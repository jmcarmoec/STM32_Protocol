
MyProtocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c900  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800cab0  0800cab0  0001cab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc88  0800cc88  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc88  0800cc88  0001cc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc90  0800cc90  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc90  0800cc90  0001cc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc94  0800cc94  0001cc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800cc98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003800  20000160  0800cdf8  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003960  0800cdf8  00023960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   000262b7  00000000  00000000  000201d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005570  00000000  00000000  0004648a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e58  00000000  00000000  0004ba00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001755  00000000  00000000  0004d858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002da80  00000000  00000000  0004efad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000250c5  00000000  00000000  0007ca2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f730  00000000  00000000  000a1af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008484  00000000  00000000  001b1224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001b96a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000160 	.word	0x20000160
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ca98 	.word	0x0800ca98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000164 	.word	0x20000164
 80001ec:	0800ca98 	.word	0x0800ca98

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <print_UART>:
#include "stm32l4xx_hal.h"

extern osMessageQueueId_t UARTTxQueueHandle;
extern UART_HandleTypeDef hlpuart1;

int print_UART(const char* format, ...){
 800059c:	b40f      	push	{r0, r1, r2, r3}
 800059e:	b580      	push	{r7, lr}
 80005a0:	b084      	sub	sp, #16
 80005a2:	af00      	add	r7, sp, #0
	if(!format){
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d102      	bne.n	80005b0 <print_UART+0x14>
		return -1;
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	e039      	b.n	8000624 <print_UART+0x88>
	}

	Msg_t msg = {0};
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
	va_list args;
	osStatus_t status = osOK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]

	msg.msg = (uint8_t*) calloc(MSG_MAX_LEN,sizeof(Msg_t));
 80005bc:	2108      	movs	r1, #8
 80005be:	20fa      	movs	r0, #250	; 0xfa
 80005c0:	f00b fd30 	bl	800c024 <calloc>
 80005c4:	4603      	mov	r3, r0
 80005c6:	607b      	str	r3, [r7, #4]

	if(!msg.msg){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d102      	bne.n	80005d4 <print_UART+0x38>
		return -1;
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	e027      	b.n	8000624 <print_UART+0x88>
	}

	va_start(args, format);
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	603b      	str	r3, [r7, #0]

	if(vsnprintf(msg.msg,MSG_MAX_LEN,format, args) < 0){
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	69ba      	ldr	r2, [r7, #24]
 80005e0:	21fa      	movs	r1, #250	; 0xfa
 80005e2:	f00b fe1d 	bl	800c220 <vsniprintf>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	da06      	bge.n	80005fa <print_UART+0x5e>
		va_end(args);
		free(msg.msg);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f00b fd36 	bl	800c060 <free>
		return -1;
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	e014      	b.n	8000624 <print_UART+0x88>
	}

	va_end(args);


	msg.len = strlen(msg.msg);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fdf7 	bl	80001f0 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	60bb      	str	r3, [r7, #8]

	status = osMessageQueuePut(UARTTxQueueHandle, &msg, NULL, 0xFF);
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <print_UART+0x98>)
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	1d39      	adds	r1, r7, #4
 800060c:	23ff      	movs	r3, #255	; 0xff
 800060e:	2200      	movs	r2, #0
 8000610:	f008 f8be 	bl	8008790 <osMessageQueuePut>
 8000614:	60f8      	str	r0, [r7, #12]

	if(status != osOK){
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d002      	beq.n	8000622 <print_UART+0x86>
		return -1;
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	e000      	b.n	8000624 <print_UART+0x88>
	}

	return 0;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800062e:	b004      	add	sp, #16
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000214 	.word	0x20000214

08000638 <UARTTxTask>:

void UARTTxTask(void *argument){
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
	Msg_t msg = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]

	while(1){
		status = osMessageQueueGet(UARTTxQueueHandle, &msg, NULL, osWaitForever);
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <UARTTxTask+0x4c>)
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	f107 010c 	add.w	r1, r7, #12
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	2200      	movs	r2, #0
 800065c:	f008 f8f8 	bl	8008850 <osMessageQueueGet>
 8000660:	6178      	str	r0, [r7, #20]

		if(status != osOK){
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d10b      	bne.n	8000680 <UARTTxTask+0x48>
			continue;
		}

		HAL_UART_Transmit(&hlpuart1, msg.msg, msg.len, 0xFF);
 8000668:	68f9      	ldr	r1, [r7, #12]
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	b29a      	uxth	r2, r3
 800066e:	23ff      	movs	r3, #255	; 0xff
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <UARTTxTask+0x50>)
 8000672:	f003 ff33 	bl	80044dc <HAL_UART_Transmit>

		free(msg.msg);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	4618      	mov	r0, r3
 800067a:	f00b fcf1 	bl	800c060 <free>
 800067e:	e7e6      	b.n	800064e <UARTTxTask+0x16>
			continue;
 8000680:	bf00      	nop
		status = osMessageQueueGet(UARTTxQueueHandle, &msg, NULL, osWaitForever);
 8000682:	e7e4      	b.n	800064e <UARTTxTask+0x16>
 8000684:	20000214 	.word	0x20000214
 8000688:	2000017c 	.word	0x2000017c

0800068c <print_USB>:

#include "Message/MSG.h"

extern osMessageQueueId_t USBTxQueueHandle;

int print_USB(const char* format, ...){
 800068c:	b40f      	push	{r0, r1, r2, r3}
 800068e:	b580      	push	{r7, lr}
 8000690:	b084      	sub	sp, #16
 8000692:	af00      	add	r7, sp, #0
	if(!format){
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d102      	bne.n	80006a0 <print_USB+0x14>
		return -1;
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	e039      	b.n	8000714 <print_USB+0x88>
	}

	Msg_t msg = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
	va_list args;
	osStatus_t status = osOK;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]

	msg.msg = (uint8_t*) calloc(MSG_MAX_LEN,sizeof(Msg_t));
 80006ac:	2108      	movs	r1, #8
 80006ae:	20fa      	movs	r0, #250	; 0xfa
 80006b0:	f00b fcb8 	bl	800c024 <calloc>
 80006b4:	4603      	mov	r3, r0
 80006b6:	607b      	str	r3, [r7, #4]

	if(!msg.msg){
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d102      	bne.n	80006c4 <print_USB+0x38>
		return -1;
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	e027      	b.n	8000714 <print_USB+0x88>
	}

	va_start(args, format);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	603b      	str	r3, [r7, #0]

	if(vsnprintf(msg.msg,MSG_MAX_LEN,format, args) < 0){
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	69ba      	ldr	r2, [r7, #24]
 80006d0:	21fa      	movs	r1, #250	; 0xfa
 80006d2:	f00b fda5 	bl	800c220 <vsniprintf>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	da06      	bge.n	80006ea <print_USB+0x5e>
		va_end(args);
		free(msg.msg);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4618      	mov	r0, r3
 80006e0:	f00b fcbe 	bl	800c060 <free>
		return -1;
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	e014      	b.n	8000714 <print_USB+0x88>
	}

	va_end(args);


	msg.len = strlen(msg.msg);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fd7f 	bl	80001f0 <strlen>
 80006f2:	4603      	mov	r3, r0
 80006f4:	60bb      	str	r3, [r7, #8]

	status = osMessageQueuePut(USBTxQueueHandle, &msg, NULL, 0xFF);
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <print_USB+0x98>)
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	1d39      	adds	r1, r7, #4
 80006fc:	23ff      	movs	r3, #255	; 0xff
 80006fe:	2200      	movs	r2, #0
 8000700:	f008 f846 	bl	8008790 <osMessageQueuePut>
 8000704:	60f8      	str	r0, [r7, #12]

	if(status != osOK){
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <print_USB+0x86>
		return -1;
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	e000      	b.n	8000714 <print_USB+0x88>
	}

	return 0;
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800071e:	b004      	add	sp, #16
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000210 	.word	0x20000210

08000728 <USBTxTask>:

void USBTxTask(void *argument){
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
	Msg_t msg = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]

	while(1){
		status = osMessageQueueGet(USBTxQueueHandle, &msg, NULL, osWaitForever);
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <USBTxTask+0x4c>)
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	f107 010c 	add.w	r1, r7, #12
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	2200      	movs	r2, #0
 800074c:	f008 f880 	bl	8008850 <osMessageQueueGet>
 8000750:	6178      	str	r0, [r7, #20]

		if(status != osOK){
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d10a      	bne.n	800076e <USBTxTask+0x46>
			continue;
		}

		CDC_Transmit_FS(msg.msg, msg.len);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f00a fed2 	bl	800b508 <CDC_Transmit_FS>

		free(msg.msg);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4618      	mov	r0, r3
 8000768:	f00b fc7a 	bl	800c060 <free>
 800076c:	e7e7      	b.n	800073e <USBTxTask+0x16>
			continue;
 800076e:	bf00      	nop
	while(1){
 8000770:	e7e5      	b.n	800073e <USBTxTask+0x16>
 8000772:	bf00      	nop
 8000774:	20000210 	.word	0x20000210

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077c:	f000 fb43 	bl	8000e06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000780:	f000 f84c 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 f8ce 	bl	8000924 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000788:	f000 f89e 	bl	80008c8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800078c:	f007 fe96 	bl	80084bc <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of USBTxQueue */
  USBTxQueueHandle = osMessageQueueNew (20, sizeof(Msg_t), &USBTxQueue_attributes);
 8000790:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <main+0x70>)
 8000792:	2108      	movs	r1, #8
 8000794:	2014      	movs	r0, #20
 8000796:	f007 ff88 	bl	80086aa <osMessageQueueNew>
 800079a:	4603      	mov	r3, r0
 800079c:	4a13      	ldr	r2, [pc, #76]	; (80007ec <main+0x74>)
 800079e:	6013      	str	r3, [r2, #0]

  /* creation of UARTTxQueue */
  UARTTxQueueHandle = osMessageQueueNew (20, sizeof(Msg_t), &UARTTxQueue_attributes);
 80007a0:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <main+0x78>)
 80007a2:	2108      	movs	r1, #8
 80007a4:	2014      	movs	r0, #20
 80007a6:	f007 ff80 	bl	80086aa <osMessageQueueNew>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a11      	ldr	r2, [pc, #68]	; (80007f4 <main+0x7c>)
 80007ae:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Blink */
  BlinkHandle = osThreadNew(BlinkTask, NULL, &Blink_attributes);
 80007b0:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <main+0x80>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	4811      	ldr	r0, [pc, #68]	; (80007fc <main+0x84>)
 80007b6:	f007 fecb 	bl	8008550 <osThreadNew>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a10      	ldr	r2, [pc, #64]	; (8000800 <main+0x88>)
 80007be:	6013      	str	r3, [r2, #0]

  /* creation of USBTx */
  USBTxHandle = osThreadNew(USBTxTask, NULL, &USBTx_attributes);
 80007c0:	4a10      	ldr	r2, [pc, #64]	; (8000804 <main+0x8c>)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4810      	ldr	r0, [pc, #64]	; (8000808 <main+0x90>)
 80007c6:	f007 fec3 	bl	8008550 <osThreadNew>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a0f      	ldr	r2, [pc, #60]	; (800080c <main+0x94>)
 80007ce:	6013      	str	r3, [r2, #0]

  /* creation of UARTTx */
  UARTTxHandle = osThreadNew(UARTTxTask, NULL, &UARTTx_attributes);
 80007d0:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <main+0x98>)
 80007d2:	2100      	movs	r1, #0
 80007d4:	480f      	ldr	r0, [pc, #60]	; (8000814 <main+0x9c>)
 80007d6:	f007 febb 	bl	8008550 <osThreadNew>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <main+0xa0>)
 80007de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007e0:	f007 fe90 	bl	8008504 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80007e4:	e7fe      	b.n	80007e4 <main+0x6c>
 80007e6:	bf00      	nop
 80007e8:	0800cbdc 	.word	0x0800cbdc
 80007ec:	20000210 	.word	0x20000210
 80007f0:	0800cbf4 	.word	0x0800cbf4
 80007f4:	20000214 	.word	0x20000214
 80007f8:	0800cb70 	.word	0x0800cb70
 80007fc:	08000a59 	.word	0x08000a59
 8000800:	20000204 	.word	0x20000204
 8000804:	0800cb94 	.word	0x0800cb94
 8000808:	08000729 	.word	0x08000729
 800080c:	20000208 	.word	0x20000208
 8000810:	0800cbb8 	.word	0x0800cbb8
 8000814:	08000639 	.word	0x08000639
 8000818:	2000020c 	.word	0x2000020c

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b096      	sub	sp, #88	; 0x58
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	2244      	movs	r2, #68	; 0x44
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f00b fd06 	bl	800c23c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	463b      	mov	r3, r7
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800083e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000842:	f001 ff99 	bl	8002778 <HAL_PWREx_ControlVoltageScaling>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800084c:	f000 f944 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000850:	2330      	movs	r3, #48	; 0x30
 8000852:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000860:	2360      	movs	r3, #96	; 0x60
 8000862:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000864:	2302      	movs	r3, #2
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000868:	2301      	movs	r3, #1
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000870:	2328      	movs	r3, #40	; 0x28
 8000872:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800087c:	2302      	movs	r3, #2
 800087e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4618      	mov	r0, r3
 8000886:	f001 ffed 	bl	8002864 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000890:	f000 f922 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2303      	movs	r3, #3
 800089a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	2104      	movs	r1, #4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fbf2 	bl	8003098 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008ba:	f000 f90d 	bl	8000ad8 <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3758      	adds	r7, #88	; 0x58
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_LPUART1_UART_Init+0x50>)
 80008ce:	4a13      	ldr	r2, [pc, #76]	; (800091c <MX_LPUART1_UART_Init+0x54>)
 80008d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_LPUART1_UART_Init+0x50>)
 80008d4:	4a12      	ldr	r2, [pc, #72]	; (8000920 <MX_LPUART1_UART_Init+0x58>)
 80008d6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_LPUART1_UART_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_LPUART1_UART_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_LPUART1_UART_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_LPUART1_UART_Init+0x50>)
 80008ec:	220c      	movs	r2, #12
 80008ee:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_LPUART1_UART_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_LPUART1_UART_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_LPUART1_UART_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_LPUART1_UART_Init+0x50>)
 8000904:	f003 fd9c 	bl	8004440 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 800090e:	f000 f8e3 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000017c 	.word	0x2000017c
 800091c:	40008000 	.word	0x40008000
 8000920:	00033324 	.word	0x00033324

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	4b43      	ldr	r3, [pc, #268]	; (8000a48 <MX_GPIO_Init+0x124>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a42      	ldr	r2, [pc, #264]	; (8000a48 <MX_GPIO_Init+0x124>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b40      	ldr	r3, [pc, #256]	; (8000a48 <MX_GPIO_Init+0x124>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <MX_GPIO_Init+0x124>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a3c      	ldr	r2, [pc, #240]	; (8000a48 <MX_GPIO_Init+0x124>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <MX_GPIO_Init+0x124>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <MX_GPIO_Init+0x124>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a36      	ldr	r2, [pc, #216]	; (8000a48 <MX_GPIO_Init+0x124>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <MX_GPIO_Init+0x124>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <MX_GPIO_Init+0x124>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a30      	ldr	r2, [pc, #192]	; (8000a48 <MX_GPIO_Init+0x124>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <MX_GPIO_Init+0x124>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800099a:	f001 ff53 	bl	8002844 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_GPIO_Init+0x124>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <MX_GPIO_Init+0x124>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <MX_GPIO_Init+0x124>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80009bc:	4823      	ldr	r0, [pc, #140]	; (8000a4c <MX_GPIO_Init+0x128>)
 80009be:	f000 fcf3 	bl	80013a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 80009c8:	4821      	ldr	r0, [pc, #132]	; (8000a50 <MX_GPIO_Init+0x12c>)
 80009ca:	f000 fced 	bl	80013a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	481b      	ldr	r0, [pc, #108]	; (8000a54 <MX_GPIO_Init+0x130>)
 80009e6:	f000 fb4d 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80009ea:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4812      	ldr	r0, [pc, #72]	; (8000a4c <MX_GPIO_Init+0x128>)
 8000a04:	f000 fb3e 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8000a08:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <MX_GPIO_Init+0x12c>)
 8000a1e:	f000 fb31 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8000a22:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_GPIO_Init+0x12c>)
 8000a3c:	f000 fb22 	bl	8001084 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48000400 	.word	0x48000400
 8000a50:	48001800 	.word	0x48001800
 8000a54:	48000800 	.word	0x48000800

08000a58 <BlinkTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BlinkTask */
void BlinkTask(void *argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a60:	f00a fc94 	bl	800b38c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <BlinkTask+0x48>)
 8000a68:	f000 fcb6 	bl	80013d8 <HAL_GPIO_TogglePin>
	for (;;) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <BlinkTask+0x48>)
 8000a70:	f000 fcb2 	bl	80013d8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <BlinkTask+0x48>)
 8000a7a:	f000 fcad 	bl	80013d8 <HAL_GPIO_TogglePin>
		print_USB("teste %d %s %s", 15, "porra deu bom", " USB");
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <BlinkTask+0x4c>)
 8000a80:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <BlinkTask+0x50>)
 8000a82:	210f      	movs	r1, #15
 8000a84:	4809      	ldr	r0, [pc, #36]	; (8000aac <BlinkTask+0x54>)
 8000a86:	f7ff fe01 	bl	800068c <print_USB>
		print_UART("teste %d %s %s", 15, "porra deu bom", "UART");
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <BlinkTask+0x58>)
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <BlinkTask+0x50>)
 8000a8e:	210f      	movs	r1, #15
 8000a90:	4806      	ldr	r0, [pc, #24]	; (8000aac <BlinkTask+0x54>)
 8000a92:	f7ff fd83 	bl	800059c <print_UART>

		osDelay(1000);
 8000a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9a:	f007 fdeb 	bl	8008674 <osDelay>
	for (;;) {
 8000a9e:	e7e5      	b.n	8000a6c <BlinkTask+0x14>
 8000aa0:	48000400 	.word	0x48000400
 8000aa4:	0800cae0 	.word	0x0800cae0
 8000aa8:	0800cae8 	.word	0x0800cae8
 8000aac:	0800caf8 	.word	0x0800caf8
 8000ab0:	0800cb08 	.word	0x0800cb08

08000ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac6:	f000 f9b7 	bl	8000e38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40012c00 	.word	0x40012c00

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_MspInit+0x4c>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6613      	str	r3, [r2, #96]	; 0x60
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	f06f 0001 	mvn.w	r0, #1
 8000b22:	f000 fa85 	bl	8001030 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0ac      	sub	sp, #176	; 0xb0
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	228c      	movs	r2, #140	; 0x8c
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f00b fb71 	bl	800c23c <memset>
  if(huart->Instance==LPUART1)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <HAL_UART_MspInit+0xb4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d13d      	bne.n	8000be0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b64:	2320      	movs	r3, #32
 8000b66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 fce7 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b7c:	f7ff ffac 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_UART_MspInit+0xb8>)
 8000b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <HAL_UART_MspInit+0xb8>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_UART_MspInit+0xb8>)
 8000b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_UART_MspInit+0xb8>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <HAL_UART_MspInit+0xb8>)
 8000b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_UART_MspInit+0xb8>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000bb0:	f001 fe48 	bl	8002844 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bb4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <HAL_UART_MspInit+0xbc>)
 8000bdc:	f000 fa52 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000be0:	bf00      	nop
 8000be2:	37b0      	adds	r7, #176	; 0xb0
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40008000 	.word	0x40008000
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48001800 	.word	0x48001800

08000bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	; 0x30
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <HAL_InitTick+0xc8>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	4a2d      	ldr	r2, [pc, #180]	; (8000cbc <HAL_InitTick+0xc8>)
 8000c08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0e:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <HAL_InitTick+0xc8>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1a:	f107 020c 	add.w	r2, r7, #12
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 fbfb 	bl	8003420 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c2a:	f002 fbe3 	bl	80033f4 <HAL_RCC_GetPCLK2Freq>
 8000c2e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c32:	4a23      	ldr	r2, [pc, #140]	; (8000cc0 <HAL_InitTick+0xcc>)
 8000c34:	fba2 2303 	umull	r2, r3, r2, r3
 8000c38:	0c9b      	lsrs	r3, r3, #18
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <HAL_InitTick+0xd0>)
 8000c40:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <HAL_InitTick+0xd4>)
 8000c42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <HAL_InitTick+0xd0>)
 8000c46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c4a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c4c:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <HAL_InitTick+0xd0>)
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <HAL_InitTick+0xd0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <HAL_InitTick+0xd0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <HAL_InitTick+0xd0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c64:	4817      	ldr	r0, [pc, #92]	; (8000cc4 <HAL_InitTick+0xd0>)
 8000c66:	f003 f937 	bl	8003ed8 <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d11b      	bne.n	8000cb0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c78:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <HAL_InitTick+0xd0>)
 8000c7a:	f003 f98f 	bl	8003f9c <HAL_TIM_Base_Start_IT>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d111      	bne.n	8000cb0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c8c:	2019      	movs	r0, #25
 8000c8e:	f000 f9eb 	bl	8001068 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d808      	bhi.n	8000caa <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	2019      	movs	r0, #25
 8000c9e:	f000 f9c7 	bl	8001030 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_InitTick+0xd8>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	e002      	b.n	8000cb0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3730      	adds	r7, #48	; 0x30
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	431bde83 	.word	0x431bde83
 8000cc4:	20000218 	.word	0x20000218
 8000cc8:	40012c00 	.word	0x40012c00
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d02:	f003 f9bb 	bl	800407c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000218 	.word	0x20000218

08000d10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <OTG_FS_IRQHandler+0x10>)
 8000d16:	f000 fccc 	bl	80016b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200030ec 	.word	0x200030ec

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f00b fae0 	bl	800c318 <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20050000 	.word	0x20050000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	20000264 	.word	0x20000264
 8000d8c:	20003960 	.word	0x20003960

08000d90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db8:	f7ff ffea 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	; (8000df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <LoopForever+0xe>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	; (8000e00 <LoopForever+0x16>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de2:	f00b fa9f 	bl	800c324 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de6:	f7ff fcc7 	bl	8000778 <main>

08000dea <LoopForever>:

LoopForever:
    b LoopForever
 8000dea:	e7fe      	b.n	8000dea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000df8:	0800cc98 	.word	0x0800cc98
  ldr r2, =_sbss
 8000dfc:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000e00:	20003960 	.word	0x20003960

08000e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC1_2_IRQHandler>

08000e06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f902 	bl	800101a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e16:	200f      	movs	r0, #15
 8000e18:	f7ff feec 	bl	8000bf4 <HAL_InitTick>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	e001      	b.n	8000e2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e28:	f7ff fe5c 	bl	8000ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000268 	.word	0x20000268

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000268 	.word	0x20000268

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff ffee 	bl	8000e60 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ffde 	bl	8000e60 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	; (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff4c 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001042:	f7ff ff61 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001046:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	6978      	ldr	r0, [r7, #20]
 800104e:	f7ff ffb1 	bl	8000fb4 <NVIC_EncodePriority>
 8001052:	4602      	mov	r2, r0
 8001054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff80 	bl	8000f60 <__NVIC_SetPriority>
}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff54 	bl	8000f24 <__NVIC_EnableIRQ>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001092:	e166      	b.n	8001362 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8158 	beq.w	800135c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d005      	beq.n	80010c4 <HAL_GPIO_Init+0x40>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d130      	bne.n	8001126 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010fa:	2201      	movs	r2, #1
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	f003 0201 	and.w	r2, r3, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	2b03      	cmp	r3, #3
 8001130:	d017      	beq.n	8001162 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d123      	bne.n	80011b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	6939      	ldr	r1, [r7, #16]
 80011b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0203 	and.w	r2, r3, #3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80b2 	beq.w	800135c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f8:	4b61      	ldr	r3, [pc, #388]	; (8001380 <HAL_GPIO_Init+0x2fc>)
 80011fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fc:	4a60      	ldr	r2, [pc, #384]	; (8001380 <HAL_GPIO_Init+0x2fc>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6613      	str	r3, [r2, #96]	; 0x60
 8001204:	4b5e      	ldr	r3, [pc, #376]	; (8001380 <HAL_GPIO_Init+0x2fc>)
 8001206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001210:	4a5c      	ldr	r2, [pc, #368]	; (8001384 <HAL_GPIO_Init+0x300>)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800123a:	d02b      	beq.n	8001294 <HAL_GPIO_Init+0x210>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a52      	ldr	r2, [pc, #328]	; (8001388 <HAL_GPIO_Init+0x304>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d025      	beq.n	8001290 <HAL_GPIO_Init+0x20c>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a51      	ldr	r2, [pc, #324]	; (800138c <HAL_GPIO_Init+0x308>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d01f      	beq.n	800128c <HAL_GPIO_Init+0x208>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a50      	ldr	r2, [pc, #320]	; (8001390 <HAL_GPIO_Init+0x30c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d019      	beq.n	8001288 <HAL_GPIO_Init+0x204>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <HAL_GPIO_Init+0x310>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d013      	beq.n	8001284 <HAL_GPIO_Init+0x200>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4e      	ldr	r2, [pc, #312]	; (8001398 <HAL_GPIO_Init+0x314>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d00d      	beq.n	8001280 <HAL_GPIO_Init+0x1fc>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a4d      	ldr	r2, [pc, #308]	; (800139c <HAL_GPIO_Init+0x318>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d007      	beq.n	800127c <HAL_GPIO_Init+0x1f8>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <HAL_GPIO_Init+0x31c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d101      	bne.n	8001278 <HAL_GPIO_Init+0x1f4>
 8001274:	2307      	movs	r3, #7
 8001276:	e00e      	b.n	8001296 <HAL_GPIO_Init+0x212>
 8001278:	2308      	movs	r3, #8
 800127a:	e00c      	b.n	8001296 <HAL_GPIO_Init+0x212>
 800127c:	2306      	movs	r3, #6
 800127e:	e00a      	b.n	8001296 <HAL_GPIO_Init+0x212>
 8001280:	2305      	movs	r3, #5
 8001282:	e008      	b.n	8001296 <HAL_GPIO_Init+0x212>
 8001284:	2304      	movs	r3, #4
 8001286:	e006      	b.n	8001296 <HAL_GPIO_Init+0x212>
 8001288:	2303      	movs	r3, #3
 800128a:	e004      	b.n	8001296 <HAL_GPIO_Init+0x212>
 800128c:	2302      	movs	r3, #2
 800128e:	e002      	b.n	8001296 <HAL_GPIO_Init+0x212>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <HAL_GPIO_Init+0x212>
 8001294:	2300      	movs	r3, #0
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	f002 0203 	and.w	r2, r2, #3
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	4093      	lsls	r3, r2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012a6:	4937      	ldr	r1, [pc, #220]	; (8001384 <HAL_GPIO_Init+0x300>)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012b4:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <HAL_GPIO_Init+0x320>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012d8:	4a32      	ldr	r2, [pc, #200]	; (80013a4 <HAL_GPIO_Init+0x320>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012de:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <HAL_GPIO_Init+0x320>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001302:	4a28      	ldr	r2, [pc, #160]	; (80013a4 <HAL_GPIO_Init+0x320>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001308:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <HAL_GPIO_Init+0x320>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800132c:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <HAL_GPIO_Init+0x320>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_GPIO_Init+0x320>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <HAL_GPIO_Init+0x320>)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	f47f ae91 	bne.w	8001094 <HAL_GPIO_Init+0x10>
  }
}
 8001372:	bf00      	nop
 8001374:	bf00      	nop
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000
 8001384:	40010000 	.word	0x40010000
 8001388:	48000400 	.word	0x48000400
 800138c:	48000800 	.word	0x48000800
 8001390:	48000c00 	.word	0x48000c00
 8001394:	48001000 	.word	0x48001000
 8001398:	48001400 	.word	0x48001400
 800139c:	48001800 	.word	0x48001800
 80013a0:	48001c00 	.word	0x48001c00
 80013a4:	40010400 	.word	0x40010400

080013a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
 80013b4:	4613      	mov	r3, r2
 80013b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b8:	787b      	ldrb	r3, [r7, #1]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013ea:	887a      	ldrh	r2, [r7, #2]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4013      	ands	r3, r2
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43d9      	mvns	r1, r3
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	400b      	ands	r3, r1
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	619a      	str	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800140c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140e:	b08f      	sub	sp, #60	; 0x3c
 8001410:	af0a      	add	r7, sp, #40	; 0x28
 8001412:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e116      	b.n	800164c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d106      	bne.n	800143e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f00a f9bf 	bl	800b7bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fe6e 	bl	800513e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	687e      	ldr	r6, [r7, #4]
 800146a:	466d      	mov	r5, sp
 800146c:	f106 0410 	add.w	r4, r6, #16
 8001470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001478:	e894 0003 	ldmia.w	r4, {r0, r1}
 800147c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001480:	1d33      	adds	r3, r6, #4
 8001482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001484:	6838      	ldr	r0, [r7, #0]
 8001486:	f003 fd80 	bl	8004f8a <USB_CoreInit>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0d7      	b.n	800164c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fe5c 	bl	8005160 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e04a      	b.n	8001544 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	333d      	adds	r3, #61	; 0x3d
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	333c      	adds	r3, #60	; 0x3c
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	b298      	uxth	r0, r3
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	3356      	adds	r3, #86	; 0x56
 80014ea:	4602      	mov	r2, r0
 80014ec:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	3340      	adds	r3, #64	; 0x40
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	3344      	adds	r3, #68	; 0x44
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4413      	add	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	3348      	adds	r3, #72	; 0x48
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4413      	add	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	334c      	adds	r3, #76	; 0x4c
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	3301      	adds	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	d3af      	bcc.n	80014ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e044      	b.n	80015de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	3301      	adds	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d3b5      	bcc.n	8001554 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	687e      	ldr	r6, [r7, #4]
 80015f0:	466d      	mov	r5, sp
 80015f2:	f106 0410 	add.w	r4, r6, #16
 80015f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001602:	e885 0003 	stmia.w	r5, {r0, r1}
 8001606:	1d33      	adds	r3, r6, #4
 8001608:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160a:	6838      	ldr	r0, [r7, #0]
 800160c:	f003 fdf4 	bl	80051f8 <USB_DevInit>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2202      	movs	r2, #2
 800161a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e014      	b.n	800164c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	2b01      	cmp	r3, #1
 8001638:	d102      	bne.n	8001640 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f001 f86a 	bl	8002714 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f004 fda2 	bl	800618e <USB_DevDisconnect>

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001654 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_PCD_Start+0x1c>
 800166c:	2302      	movs	r3, #2
 800166e:	e01c      	b.n	80016aa <HAL_PCD_Start+0x56>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f003 fd43 	bl	800511c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f004 fd56 	bl	800614c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016b2:	b590      	push	{r4, r7, lr}
 80016b4:	b08d      	sub	sp, #52	; 0x34
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f004 fe14 	bl	80062f6 <USB_GetMode>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 847e 	bne.w	8001fd2 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fd78 	bl	80061d0 <USB_ReadInterrupts>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8474 	beq.w	8001fd0 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f004 fd65 	bl	80061d0 <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b02      	cmp	r3, #2
 800170e:	d107      	bne.n	8001720 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f002 0202 	and.w	r2, r2, #2
 800171e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f004 fd53 	bl	80061d0 <USB_ReadInterrupts>
 800172a:	4603      	mov	r3, r0
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b10      	cmp	r3, #16
 8001732:	d161      	bne.n	80017f8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0210 	bic.w	r2, r2, #16
 8001742:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f003 020f 	and.w	r2, r3, #15
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	3304      	adds	r3, #4
 8001762:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	0c5b      	lsrs	r3, r3, #17
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	2b02      	cmp	r3, #2
 800176e:	d124      	bne.n	80017ba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d035      	beq.n	80017e8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800178a:	b29b      	uxth	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	6a38      	ldr	r0, [r7, #32]
 8001790:	f004 fb8a 	bl	8005ea8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017a0:	441a      	add	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017b2:	441a      	add	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	e016      	b.n	80017e8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	0c5b      	lsrs	r3, r3, #17
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d110      	bne.n	80017e8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017cc:	2208      	movs	r2, #8
 80017ce:	4619      	mov	r1, r3
 80017d0:	6a38      	ldr	r0, [r7, #32]
 80017d2:	f004 fb69 	bl	8005ea8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017e2:	441a      	add	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699a      	ldr	r2, [r3, #24]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0210 	orr.w	r2, r2, #16
 80017f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f004 fce7 	bl	80061d0 <USB_ReadInterrupts>
 8001802:	4603      	mov	r3, r0
 8001804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001808:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800180c:	f040 80a7 	bne.w	800195e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f004 fcec 	bl	80061f6 <USB_ReadDevAllOutEpInterrupt>
 800181e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001820:	e099      	b.n	8001956 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 808e 	beq.w	800194a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f004 fd10 	bl	800625e <USB_ReadDevOutEPInterrupt>
 800183e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00c      	beq.n	8001864 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	015a      	lsls	r2, r3, #5
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	4413      	add	r3, r2
 8001852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001856:	461a      	mov	r2, r3
 8001858:	2301      	movs	r3, #1
 800185a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800185c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fe7e 	bl	8002560 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00c      	beq.n	8001888 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	4413      	add	r3, r2
 8001876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800187a:	461a      	mov	r2, r3
 800187c:	2308      	movs	r3, #8
 800187e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 feba 	bl	80025fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4413      	add	r3, r2
 800189a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800189e:	461a      	mov	r2, r3
 80018a0:	2310      	movs	r3, #16
 80018a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d030      	beq.n	8001910 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	2b80      	cmp	r3, #128	; 0x80
 80018b8:	d109      	bne.n	80018ce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018cc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	3304      	adds	r3, #4
 80018e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	78db      	ldrb	r3, [r3, #3]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2200      	movs	r2, #0
 80018f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f00a f8a3 	bl	800ba44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800190a:	461a      	mov	r2, r3
 800190c:	2302      	movs	r3, #2
 800190e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b00      	cmp	r3, #0
 8001918:	d008      	beq.n	800192c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	015a      	lsls	r2, r3, #5
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	4413      	add	r3, r2
 8001922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001926:	461a      	mov	r2, r3
 8001928:	2320      	movs	r3, #32
 800192a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	015a      	lsls	r2, r3, #5
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4413      	add	r3, r2
 800193e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001942:	461a      	mov	r2, r3
 8001944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001948:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3301      	adds	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	085b      	lsrs	r3, r3, #1
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001958:	2b00      	cmp	r3, #0
 800195a:	f47f af62 	bne.w	8001822 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f004 fc34 	bl	80061d0 <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001972:	f040 80a4 	bne.w	8001abe <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f004 fc55 	bl	800622a <USB_ReadDevAllInEpInterrupt>
 8001980:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001986:	e096      	b.n	8001ab6 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 808b 	beq.w	8001aaa <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 fc7b 	bl	800629a <USB_ReadDevInEPInterrupt>
 80019a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	2201      	movs	r2, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69f9      	ldr	r1, [r7, #28]
 80019cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019d0:	4013      	ands	r3, r2
 80019d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e0:	461a      	mov	r2, r3
 80019e2:	2301      	movs	r3, #1
 80019e4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4619      	mov	r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f009 ff94 	bl	800b91a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	015a      	lsls	r2, r3, #5
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	015a      	lsls	r2, r3, #5
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	4413      	add	r3, r2
 8001a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a24:	461a      	mov	r2, r3
 8001a26:	2310      	movs	r3, #16
 8001a28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	015a      	lsls	r2, r3, #5
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a40:	461a      	mov	r2, r3
 8001a42:	2340      	movs	r3, #64	; 0x40
 8001a44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d023      	beq.n	8001a98 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a52:	6a38      	ldr	r0, [r7, #32]
 8001a54:	f003 fd12 	bl	800547c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	3338      	adds	r3, #56	; 0x38
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	3304      	adds	r3, #4
 8001a6a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	78db      	ldrb	r3, [r3, #3]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d108      	bne.n	8001a86 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	2200      	movs	r2, #0
 8001a78:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f009 fff1 	bl	800ba68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	015a      	lsls	r2, r3, #5
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a92:	461a      	mov	r2, r3
 8001a94:	2302      	movs	r3, #2
 8001a96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 fcd2 	bl	800244e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	3301      	adds	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f47f af65 	bne.w	8001988 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f004 fb84 	bl	80061d0 <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ad2:	d122      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ae2:	f023 0301 	bic.w	r3, r3, #1
 8001ae6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d108      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001afa:	2100      	movs	r1, #0
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f00a fa25 	bl	800bf4c <HAL_PCDEx_LPM_Callback>
 8001b02:	e002      	b.n	8001b0a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f009 ff75 	bl	800b9f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 fb56 	bl	80061d0 <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b2e:	d112      	bne.n	8001b56 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d102      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f009 ff31 	bl	800b9a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695a      	ldr	r2, [r3, #20]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 fb38 	bl	80061d0 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b6a:	d121      	bne.n	8001bb0 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001b7a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d111      	bne.n	8001baa <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	f003 020f 	and.w	r2, r3, #15
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f00a f9d2 	bl	800bf4c <HAL_PCDEx_LPM_Callback>
 8001ba8:	e002      	b.n	8001bb0 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f009 fefc 	bl	800b9a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f004 fb0b 	bl	80061d0 <USB_ReadInterrupts>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc4:	f040 80b5 	bne.w	8001d32 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bd6:	f023 0301 	bic.w	r3, r3, #1
 8001bda:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2110      	movs	r1, #16
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fc4a 	bl	800547c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bec:	e046      	b.n	8001c7c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	015a      	lsls	r2, r3, #5
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c00:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c12:	0151      	lsls	r1, r2, #5
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	440a      	add	r2, r1
 8001c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c34:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c46:	0151      	lsls	r1, r2, #5
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	440a      	add	r2, r1
 8001c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c66:	0151      	lsls	r1, r2, #5
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	440a      	add	r2, r1
 8001c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c74:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	3301      	adds	r3, #1
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d3b3      	bcc.n	8001bee <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c94:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c98:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d016      	beq.n	8001cd0 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb2:	f043 030b 	orr.w	r3, r3, #11
 8001cb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc8:	f043 030b 	orr.w	r3, r3, #11
 8001ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cce:	e015      	b.n	8001cfc <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ce2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ce6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf6:	f043 030b 	orr.w	r3, r3, #11
 8001cfa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d0e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	f004 fb1b 	bl	8006358 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f004 fa4a 	bl	80061d0 <USB_ReadInterrupts>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d46:	d124      	bne.n	8001d92 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f004 fae0 	bl	8006312 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 fc0d 	bl	8005576 <USB_GetDevSpeed>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681c      	ldr	r4, [r3, #0]
 8001d68:	f001 fb22 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 8001d6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	4620      	mov	r0, r4
 8001d78:	f003 f934 	bl	8004fe4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f009 fdf4 	bl	800b96a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 fa1a 	bl	80061d0 <USB_ReadInterrupts>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d10a      	bne.n	8001dbc <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f009 fdd1 	bl	800b94e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f002 0208 	and.w	r2, r2, #8
 8001dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f004 fa05 	bl	80061d0 <USB_ReadInterrupts>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dcc:	2b80      	cmp	r3, #128	; 0x80
 8001dce:	d122      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ddc:	2301      	movs	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
 8001de0:	e014      	b.n	8001e0c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d105      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 faf3 	bl	80023ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	3301      	adds	r3, #1
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d3e5      	bcc.n	8001de2 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 f9d8 	bl	80061d0 <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e2a:	d13b      	bne.n	8001ea4 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e30:	e02b      	b.n	8001e8a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	3340      	adds	r3, #64	; 0x40
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d115      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	da12      	bge.n	8001e84 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	333f      	adds	r3, #63	; 0x3f
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fab4 	bl	80023ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	3301      	adds	r3, #1
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d3ce      	bcc.n	8001e32 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f004 f991 	bl	80061d0 <USB_ReadInterrupts>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eb8:	d155      	bne.n	8001f66 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eba:	2301      	movs	r3, #1
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebe:	e045      	b.n	8001f4c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d12e      	bne.n	8001f46 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ee8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	da2b      	bge.n	8001f46 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001efa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d121      	bne.n	8001f46 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10a      	bne.n	8001f46 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	69fa      	ldr	r2, [r7, #28]
 8001f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f42:	6053      	str	r3, [r2, #4]
            break;
 8001f44:	e007      	b.n	8001f56 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	3301      	adds	r3, #1
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d3b4      	bcc.n	8001ec0 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 f930 	bl	80061d0 <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7a:	d10a      	bne.n	8001f92 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f009 fd85 	bl	800ba8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 f91a 	bl	80061d0 <USB_ReadInterrupts>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d115      	bne.n	8001fd2 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f009 fd75 	bl	800baa8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	e000      	b.n	8001fd2 <HAL_PCD_IRQHandler+0x920>
      return;
 8001fd0:	bf00      	nop
    }
  }
}
 8001fd2:	3734      	adds	r7, #52	; 0x34
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd90      	pop	{r4, r7, pc}

08001fd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_PCD_SetAddress+0x1a>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e013      	b.n	800201a <HAL_PCD_SetAddress+0x42>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f004 f878 	bl	8006100 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	4608      	mov	r0, r1
 800202c:	4611      	mov	r1, r2
 800202e:	461a      	mov	r2, r3
 8002030:	4603      	mov	r3, r0
 8002032:	70fb      	strb	r3, [r7, #3]
 8002034:	460b      	mov	r3, r1
 8002036:	803b      	strh	r3, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002044:	2b00      	cmp	r3, #0
 8002046:	da0f      	bge.n	8002068 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	3338      	adds	r3, #56	; 0x38
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	3304      	adds	r3, #4
 800205e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2201      	movs	r2, #1
 8002064:	705a      	strb	r2, [r3, #1]
 8002066:	e00f      	b.n	8002088 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 020f 	and.w	r2, r3, #15
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	3304      	adds	r3, #4
 8002080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	b2da      	uxtb	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002094:	883a      	ldrh	r2, [r7, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	78ba      	ldrb	r2, [r7, #2]
 800209e:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	785b      	ldrb	r3, [r3, #1]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d004      	beq.n	80020b2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020b2:	78bb      	ldrb	r3, [r7, #2]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d102      	bne.n	80020be <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_PCD_EP_Open+0xaa>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e00e      	b.n	80020ea <HAL_PCD_EP_Open+0xc8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68f9      	ldr	r1, [r7, #12]
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 fa6a 	bl	80055b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80020e8:	7afb      	ldrb	r3, [r7, #11]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002102:	2b00      	cmp	r3, #0
 8002104:	da0f      	bge.n	8002126 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	f003 020f 	and.w	r2, r3, #15
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	3338      	adds	r3, #56	; 0x38
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	3304      	adds	r3, #4
 800211c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	705a      	strb	r2, [r3, #1]
 8002124:	e00f      	b.n	8002146 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	3304      	adds	r3, #4
 800213e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_PCD_EP_Close+0x6e>
 800215c:	2302      	movs	r3, #2
 800215e:	e00e      	b.n	800217e <HAL_PCD_EP_Close+0x8c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68f9      	ldr	r1, [r7, #12]
 800216e:	4618      	mov	r0, r3
 8002170:	f003 faa8 	bl	80056c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
 8002192:	460b      	mov	r3, r1
 8002194:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002196:	7afb      	ldrb	r3, [r7, #11]
 8002198:	f003 020f 	and.w	r2, r3, #15
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	3304      	adds	r3, #4
 80021ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2200      	movs	r2, #0
 80021c0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2200      	movs	r2, #0
 80021c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021c8:	7afb      	ldrb	r3, [r7, #11]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6979      	ldr	r1, [r7, #20]
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 fb4e 	bl	800587c <USB_EPStartXfer>

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 020f 	and.w	r2, r3, #15
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800220c:	681b      	ldr	r3, [r3, #0]
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	460b      	mov	r3, r1
 8002228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222a:	7afb      	ldrb	r3, [r7, #11]
 800222c:	f003 020f 	and.w	r2, r3, #15
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	3338      	adds	r3, #56	; 0x38
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4413      	add	r3, r2
 800223e:	3304      	adds	r3, #4
 8002240:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2201      	movs	r2, #1
 8002258:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800225a:	7afb      	ldrb	r3, [r7, #11]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	b2da      	uxtb	r2, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6979      	ldr	r1, [r7, #20]
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fb05 	bl	800587c <USB_EPStartXfer>

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f003 020f 	and.w	r2, r3, #15
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	429a      	cmp	r2, r3
 8002294:	d901      	bls.n	800229a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e04e      	b.n	8002338 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800229a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	da0f      	bge.n	80022c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	f003 020f 	and.w	r2, r3, #15
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	3338      	adds	r3, #56	; 0x38
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	3304      	adds	r3, #4
 80022b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	705a      	strb	r2, [r3, #1]
 80022c0:	e00d      	b.n	80022de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4413      	add	r3, r2
 80022d4:	3304      	adds	r3, #4
 80022d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_PCD_EP_SetStall+0x82>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e01c      	b.n	8002338 <HAL_PCD_EP_SetStall+0xbc>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68f9      	ldr	r1, [r7, #12]
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fe23 	bl	8005f58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	2b00      	cmp	r3, #0
 800231a:	d108      	bne.n	800232e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002326:	4619      	mov	r1, r3
 8002328:	4610      	mov	r0, r2
 800232a:	f004 f815 	bl	8006358 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	f003 020f 	and.w	r2, r3, #15
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	429a      	cmp	r2, r3
 8002358:	d901      	bls.n	800235e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e042      	b.n	80023e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800235e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002362:	2b00      	cmp	r3, #0
 8002364:	da0f      	bge.n	8002386 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	f003 020f 	and.w	r2, r3, #15
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	3338      	adds	r3, #56	; 0x38
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	3304      	adds	r3, #4
 800237c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	705a      	strb	r2, [r3, #1]
 8002384:	e00f      	b.n	80023a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 020f 	and.w	r2, r3, #15
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	3304      	adds	r3, #4
 800239e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_PCD_EP_ClrStall+0x86>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e00e      	b.n	80023e4 <HAL_PCD_EP_ClrStall+0xa4>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68f9      	ldr	r1, [r7, #12]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 fe2d 	bl	8006034 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80023f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	da0c      	bge.n	800241a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	f003 020f 	and.w	r2, r3, #15
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	3338      	adds	r3, #56	; 0x38
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	4413      	add	r3, r2
 8002414:	3304      	adds	r3, #4
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	e00c      	b.n	8002434 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	f003 020f 	and.w	r2, r3, #15
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68f9      	ldr	r1, [r7, #12]
 800243a:	4618      	mov	r0, r3
 800243c:	f003 fc50 	bl	8005ce0 <USB_EPStopXfer>
 8002440:	4603      	mov	r3, r0
 8002442:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002444:	7afb      	ldrb	r3, [r7, #11]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b088      	sub	sp, #32
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	3338      	adds	r3, #56	; 0x38
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	3304      	adds	r3, #4
 8002474:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	429a      	cmp	r2, r3
 8002480:	d901      	bls.n	8002486 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e067      	b.n	8002556 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	429a      	cmp	r2, r3
 800249a:	d902      	bls.n	80024a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3303      	adds	r3, #3
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024aa:	e026      	b.n	80024fa <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d902      	bls.n	80024c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	3303      	adds	r3, #3
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	68d9      	ldr	r1, [r3, #12]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	6978      	ldr	r0, [r7, #20]
 80024de:	f003 fca9 	bl	8005e34 <USB_WritePacket>

    ep->xfer_buff  += len;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	441a      	add	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	441a      	add	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	429a      	cmp	r2, r3
 800250e:	d809      	bhi.n	8002524 <PCD_WriteEmptyTxFifo+0xd6>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002518:	429a      	cmp	r2, r3
 800251a:	d203      	bcs.n	8002524 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1c3      	bne.n	80024ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	429a      	cmp	r2, r3
 800252e:	d811      	bhi.n	8002554 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	2201      	movs	r2, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	43db      	mvns	r3, r3
 800254a:	6939      	ldr	r1, [r7, #16]
 800254c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002550:	4013      	ands	r3, r2
 8002552:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	333c      	adds	r3, #60	; 0x3c
 8002578:	3304      	adds	r3, #4
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <PCD_EP_OutXfrComplete_int+0x98>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d124      	bne.n	80025e0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ac:	461a      	mov	r2, r3
 80025ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025b2:	6093      	str	r3, [r2, #8]
 80025b4:	e01a      	b.n	80025ec <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025cc:	461a      	mov	r2, r3
 80025ce:	2320      	movs	r3, #32
 80025d0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	4619      	mov	r1, r3
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f009 f983 	bl	800b8e4 <HAL_PCD_DataOutStageCallback>
 80025de:	e005      	b.n	80025ec <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f009 f97c 	bl	800b8e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	4f54310a 	.word	0x4f54310a

080025fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	333c      	adds	r3, #60	; 0x3c
 8002614:	3304      	adds	r3, #4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <PCD_EP_OutSetupPacket_int+0x64>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d90e      	bls.n	8002650 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002638:	2b00      	cmp	r3, #0
 800263a:	d009      	beq.n	8002650 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002648:	461a      	mov	r2, r3
 800264a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800264e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f009 f935 	bl	800b8c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	4f54300a 	.word	0x4f54300a

08002664 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	70fb      	strb	r3, [r7, #3]
 8002670:	4613      	mov	r3, r2
 8002672:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002682:	883b      	ldrh	r3, [r7, #0]
 8002684:	0419      	lsls	r1, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	430a      	orrs	r2, r1
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
 8002690:	e028      	b.n	80026e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	4413      	add	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	e00d      	b.n	80026c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	3340      	adds	r3, #64	; 0x40
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	0c1b      	lsrs	r3, r3, #16
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	4413      	add	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	3301      	adds	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d3ec      	bcc.n	80026a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026cc:	883b      	ldrh	r3, [r7, #0]
 80026ce:	0418      	lsls	r0, r3, #16
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	4302      	orrs	r2, r0
 80026dc:	3340      	adds	r3, #64	; 0x40
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002746:	f043 0303 	orr.w	r3, r3, #3
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <HAL_PWREx_GetVoltageRange+0x18>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40007000 	.word	0x40007000

08002778 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002786:	d130      	bne.n	80027ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002788:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002794:	d038      	beq.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800279e:	4a1e      	ldr	r2, [pc, #120]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2232      	movs	r2, #50	; 0x32
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0c9b      	lsrs	r3, r3, #18
 80027b8:	3301      	adds	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027bc:	e002      	b.n	80027c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d0:	d102      	bne.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f2      	bne.n	80027be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e4:	d110      	bne.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e00f      	b.n	800280a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f6:	d007      	beq.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002800:	4a05      	ldr	r2, [pc, #20]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002806:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40007000 	.word	0x40007000
 800281c:	20000000 	.word	0x20000000
 8002820:	431bde83 	.word	0x431bde83

08002824 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_PWREx_EnableVddUSB+0x1c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_PWREx_EnableVddUSB+0x1c>)
 800282e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002832:	6053      	str	r3, [r2, #4]
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40007000 	.word	0x40007000

08002844 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_PWREx_EnableVddIO2+0x1c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a04      	ldr	r2, [pc, #16]	; (8002860 <HAL_PWREx_EnableVddIO2+0x1c>)
 800284e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002852:	6053      	str	r3, [r2, #4]
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40007000 	.word	0x40007000

08002864 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d102      	bne.n	8002878 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	f000 bc08 	b.w	8003088 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002878:	4b96      	ldr	r3, [pc, #600]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002882:	4b94      	ldr	r3, [pc, #592]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80e4 	beq.w	8002a62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <HAL_RCC_OscConfig+0x4c>
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	f040 808b 	bne.w	80029be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	f040 8087 	bne.w	80029be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028b0:	4b88      	ldr	r3, [pc, #544]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_OscConfig+0x64>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e3df      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1a      	ldr	r2, [r3, #32]
 80028cc:	4b81      	ldr	r3, [pc, #516]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <HAL_RCC_OscConfig+0x7e>
 80028d8:	4b7e      	ldr	r3, [pc, #504]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e0:	e005      	b.n	80028ee <HAL_RCC_OscConfig+0x8a>
 80028e2:	4b7c      	ldr	r3, [pc, #496]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 80028e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d223      	bcs.n	800293a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fdc4 	bl	8003484 <RCC_SetFlashLatencyFromMSIRange>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e3c0      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002906:	4b73      	ldr	r3, [pc, #460]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a72      	ldr	r2, [pc, #456]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 800290c:	f043 0308 	orr.w	r3, r3, #8
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b70      	ldr	r3, [pc, #448]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	496d      	ldr	r1, [pc, #436]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002924:	4b6b      	ldr	r3, [pc, #428]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	4968      	ldr	r1, [pc, #416]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
 8002938:	e025      	b.n	8002986 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800293a:	4b66      	ldr	r3, [pc, #408]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a65      	ldr	r2, [pc, #404]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4960      	ldr	r1, [pc, #384]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002958:	4b5e      	ldr	r3, [pc, #376]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	495b      	ldr	r1, [pc, #364]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fd84 	bl	8003484 <RCC_SetFlashLatencyFromMSIRange>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e380      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002986:	f000 fc87 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 800298a:	4602      	mov	r2, r0
 800298c:	4b51      	ldr	r3, [pc, #324]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	4950      	ldr	r1, [pc, #320]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002998:	5ccb      	ldrb	r3, [r1, r3]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	fa22 f303 	lsr.w	r3, r2, r3
 80029a2:	4a4e      	ldr	r2, [pc, #312]	; (8002adc <HAL_RCC_OscConfig+0x278>)
 80029a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029a6:	4b4e      	ldr	r3, [pc, #312]	; (8002ae0 <HAL_RCC_OscConfig+0x27c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe f922 	bl	8000bf4 <HAL_InitTick>
 80029b0:	4603      	mov	r3, r0
 80029b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d052      	beq.n	8002a60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	e364      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d032      	beq.n	8002a2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029c6:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a42      	ldr	r2, [pc, #264]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029d2:	f7fe fa45 	bl	8000e60 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029da:	f7fe fa41 	bl	8000e60 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e34d      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029ec:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029f8:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a35      	ldr	r2, [pc, #212]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 80029fe:	f043 0308 	orr.w	r3, r3, #8
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b33      	ldr	r3, [pc, #204]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4930      	ldr	r1, [pc, #192]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a16:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	492b      	ldr	r1, [pc, #172]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
 8002a2a:	e01a      	b.n	8002a62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a2c:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a28      	ldr	r2, [pc, #160]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fa12 	bl	8000e60 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a40:	f7fe fa0e 	bl	8000e60 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e31a      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x1dc>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d073      	beq.n	8002b56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_OscConfig+0x21c>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	d10e      	bne.n	8002a98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d10b      	bne.n	8002a98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d063      	beq.n	8002b54 <HAL_RCC_OscConfig+0x2f0>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d15f      	bne.n	8002b54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e2f7      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d106      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x24c>
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a0b      	ldr	r2, [pc, #44]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e025      	b.n	8002afc <HAL_RCC_OscConfig+0x298>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab8:	d114      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x280>
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a02      	ldr	r2, [pc, #8]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e013      	b.n	8002afc <HAL_RCC_OscConfig+0x298>
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	0800cc0c 	.word	0x0800cc0c
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	20000004 	.word	0x20000004
 8002ae4:	4ba0      	ldr	r3, [pc, #640]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a9f      	ldr	r2, [pc, #636]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b9d      	ldr	r3, [pc, #628]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a9c      	ldr	r2, [pc, #624]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe f9ac 	bl	8000e60 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7fe f9a8 	bl	8000e60 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e2b4      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1e:	4b92      	ldr	r3, [pc, #584]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x2a8>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe f998 	bl	8000e60 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7fe f994 	bl	8000e60 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e2a0      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b46:	4b88      	ldr	r3, [pc, #544]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x2d0>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d060      	beq.n	8002c24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_OscConfig+0x310>
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d119      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d116      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b74:	4b7c      	ldr	r3, [pc, #496]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_OscConfig+0x328>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e27d      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4b76      	ldr	r3, [pc, #472]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	061b      	lsls	r3, r3, #24
 8002b9a:	4973      	ldr	r1, [pc, #460]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba0:	e040      	b.n	8002c24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d023      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002baa:	4b6f      	ldr	r3, [pc, #444]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a6e      	ldr	r2, [pc, #440]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe f953 	bl	8000e60 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7fe f94f 	bl	8000e60 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e25b      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd0:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bdc:	4b62      	ldr	r3, [pc, #392]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	495f      	ldr	r1, [pc, #380]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
 8002bf0:	e018      	b.n	8002c24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf2:	4b5d      	ldr	r3, [pc, #372]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a5c      	ldr	r2, [pc, #368]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfe:	f7fe f92f 	bl	8000e60 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c06:	f7fe f92b 	bl	8000e60 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e237      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c18:	4b53      	ldr	r3, [pc, #332]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f0      	bne.n	8002c06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d03c      	beq.n	8002caa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01c      	beq.n	8002c72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c38:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3e:	4a4a      	ldr	r2, [pc, #296]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe f90a 	bl	8000e60 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe f906 	bl	8000e60 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e212      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c62:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ef      	beq.n	8002c50 <HAL_RCC_OscConfig+0x3ec>
 8002c70:	e01b      	b.n	8002caa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c72:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c78:	4a3b      	ldr	r2, [pc, #236]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	f023 0301 	bic.w	r3, r3, #1
 8002c7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe f8ed 	bl	8000e60 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fe f8e9 	bl	8000e60 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1f5      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c9c:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1ef      	bne.n	8002c8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80a6 	beq.w	8002e04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce4:	4b21      	ldr	r3, [pc, #132]	; (8002d6c <HAL_RCC_OscConfig+0x508>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d118      	bne.n	8002d22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf0:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <HAL_RCC_OscConfig+0x508>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <HAL_RCC_OscConfig+0x508>)
 8002cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfc:	f7fe f8b0 	bl	8000e60 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d04:	f7fe f8ac 	bl	8000e60 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1b8      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_RCC_OscConfig+0x508>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <HAL_RCC_OscConfig+0x4d8>
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	4a0d      	ldr	r2, [pc, #52]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d3a:	e029      	b.n	8002d90 <HAL_RCC_OscConfig+0x52c>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d115      	bne.n	8002d70 <HAL_RCC_OscConfig+0x50c>
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002d4c:	f043 0304 	orr.w	r3, r3, #4
 8002d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5a:	4a03      	ldr	r2, [pc, #12]	; (8002d68 <HAL_RCC_OscConfig+0x504>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d64:	e014      	b.n	8002d90 <HAL_RCC_OscConfig+0x52c>
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40007000 	.word	0x40007000
 8002d70:	4b9d      	ldr	r3, [pc, #628]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	4a9c      	ldr	r2, [pc, #624]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d80:	4b99      	ldr	r3, [pc, #612]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	4a98      	ldr	r2, [pc, #608]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d016      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7fe f862 	bl	8000e60 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da0:	f7fe f85e 	bl	8000e60 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e168      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db6:	4b8c      	ldr	r3, [pc, #560]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ed      	beq.n	8002da0 <HAL_RCC_OscConfig+0x53c>
 8002dc4:	e015      	b.n	8002df2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe f84b 	bl	8000e60 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe f847 	bl	8000e60 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e151      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de4:	4b80      	ldr	r3, [pc, #512]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1ed      	bne.n	8002dce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d105      	bne.n	8002e04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df8:	4b7b      	ldr	r3, [pc, #492]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	4a7a      	ldr	r2, [pc, #488]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d03c      	beq.n	8002e8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01c      	beq.n	8002e52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e18:	4b73      	ldr	r3, [pc, #460]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e1e:	4a72      	ldr	r2, [pc, #456]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7fe f81a 	bl	8000e60 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e30:	f7fe f816 	bl	8000e60 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e122      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e42:	4b69      	ldr	r3, [pc, #420]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0ef      	beq.n	8002e30 <HAL_RCC_OscConfig+0x5cc>
 8002e50:	e01b      	b.n	8002e8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e58:	4a63      	ldr	r2, [pc, #396]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e62:	f7fd fffd 	bl	8000e60 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e6a:	f7fd fff9 	bl	8000e60 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e105      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e7c:	4b5a      	ldr	r3, [pc, #360]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1ef      	bne.n	8002e6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80f9 	beq.w	8003086 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	f040 80cf 	bne.w	800303c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e9e:	4b52      	ldr	r3, [pc, #328]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f003 0203 	and.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d12c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d123      	bne.n	8002f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d11b      	bne.n	8002f0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d113      	bne.n	8002f0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eee:	085b      	lsrs	r3, r3, #1
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d109      	bne.n	8002f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	3b01      	subs	r3, #1
 8002f06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d071      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b0c      	cmp	r3, #12
 8002f10:	d068      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f12:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f1e:	4b32      	ldr	r3, [pc, #200]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0ac      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f2e:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2d      	ldr	r2, [pc, #180]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f3a:	f7fd ff91 	bl	8000e60 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fd ff8d 	bl	8000e60 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e099      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f54:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <HAL_RCC_OscConfig+0x788>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f70:	3a01      	subs	r2, #1
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	4311      	orrs	r1, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f7a:	0212      	lsls	r2, r2, #8
 8002f7c:	4311      	orrs	r1, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f82:	0852      	lsrs	r2, r2, #1
 8002f84:	3a01      	subs	r2, #1
 8002f86:	0552      	lsls	r2, r2, #21
 8002f88:	4311      	orrs	r1, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f8e:	0852      	lsrs	r2, r2, #1
 8002f90:	3a01      	subs	r2, #1
 8002f92:	0652      	lsls	r2, r2, #25
 8002f94:	4311      	orrs	r1, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f9a:	06d2      	lsls	r2, r2, #27
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	4912      	ldr	r1, [pc, #72]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fa4:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0f      	ldr	r2, [pc, #60]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fbc:	f7fd ff50 	bl	8000e60 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fd ff4c 	bl	8000e60 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e058      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <HAL_RCC_OscConfig+0x784>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fe2:	e050      	b.n	8003086 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e04f      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff0:	4b27      	ldr	r3, [pc, #156]	; (8003090 <HAL_RCC_OscConfig+0x82c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d144      	bne.n	8003086 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ffc:	4b24      	ldr	r3, [pc, #144]	; (8003090 <HAL_RCC_OscConfig+0x82c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a23      	ldr	r2, [pc, #140]	; (8003090 <HAL_RCC_OscConfig+0x82c>)
 8003002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003006:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <HAL_RCC_OscConfig+0x82c>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4a20      	ldr	r2, [pc, #128]	; (8003090 <HAL_RCC_OscConfig+0x82c>)
 800300e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003012:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003014:	f7fd ff24 	bl	8000e60 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7fd ff20 	bl	8000e60 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e02c      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <HAL_RCC_OscConfig+0x82c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x7b8>
 800303a:	e024      	b.n	8003086 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2b0c      	cmp	r3, #12
 8003040:	d01f      	beq.n	8003082 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_RCC_OscConfig+0x82c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a12      	ldr	r2, [pc, #72]	; (8003090 <HAL_RCC_OscConfig+0x82c>)
 8003048:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fd ff07 	bl	8000e60 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003056:	f7fd ff03 	bl	8000e60 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e00f      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_RCC_OscConfig+0x82c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_OscConfig+0x82c>)
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	4905      	ldr	r1, [pc, #20]	; (8003090 <HAL_RCC_OscConfig+0x82c>)
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCC_OscConfig+0x830>)
 800307c:	4013      	ands	r3, r2
 800307e:	60cb      	str	r3, [r1, #12]
 8003080:	e001      	b.n	8003086 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	feeefffc 	.word	0xfeeefffc

08003098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0e7      	b.n	800327c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b75      	ldr	r3, [pc, #468]	; (8003284 <HAL_RCC_ClockConfig+0x1ec>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d910      	bls.n	80030dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b72      	ldr	r3, [pc, #456]	; (8003284 <HAL_RCC_ClockConfig+0x1ec>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 0207 	bic.w	r2, r3, #7
 80030c2:	4970      	ldr	r1, [pc, #448]	; (8003284 <HAL_RCC_ClockConfig+0x1ec>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b6e      	ldr	r3, [pc, #440]	; (8003284 <HAL_RCC_ClockConfig+0x1ec>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0cf      	b.n	800327c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d010      	beq.n	800310a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4b66      	ldr	r3, [pc, #408]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d908      	bls.n	800310a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f8:	4b63      	ldr	r3, [pc, #396]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4960      	ldr	r1, [pc, #384]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d04c      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311e:	4b5a      	ldr	r3, [pc, #360]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d121      	bne.n	800316e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0a6      	b.n	800327c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003136:	4b54      	ldr	r3, [pc, #336]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d115      	bne.n	800316e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e09a      	b.n	800327c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800314e:	4b4e      	ldr	r3, [pc, #312]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e08e      	b.n	800327c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800315e:	4b4a      	ldr	r3, [pc, #296]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e086      	b.n	800327c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800316e:	4b46      	ldr	r3, [pc, #280]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f023 0203 	bic.w	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4943      	ldr	r1, [pc, #268]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 800317c:	4313      	orrs	r3, r2
 800317e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003180:	f7fd fe6e 	bl	8000e60 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	e00a      	b.n	800319e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003188:	f7fd fe6a 	bl	8000e60 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e06e      	b.n	800327c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	4b3a      	ldr	r3, [pc, #232]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 020c 	and.w	r2, r3, #12
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d1eb      	bne.n	8003188 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d010      	beq.n	80031de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	4b31      	ldr	r3, [pc, #196]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d208      	bcs.n	80031de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031cc:	4b2e      	ldr	r3, [pc, #184]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	492b      	ldr	r1, [pc, #172]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031de:	4b29      	ldr	r3, [pc, #164]	; (8003284 <HAL_RCC_ClockConfig+0x1ec>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d210      	bcs.n	800320e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <HAL_RCC_ClockConfig+0x1ec>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 0207 	bic.w	r2, r3, #7
 80031f4:	4923      	ldr	r1, [pc, #140]	; (8003284 <HAL_RCC_ClockConfig+0x1ec>)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fc:	4b21      	ldr	r3, [pc, #132]	; (8003284 <HAL_RCC_ClockConfig+0x1ec>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d001      	beq.n	800320e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e036      	b.n	800327c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800321a:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	4918      	ldr	r1, [pc, #96]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 8003228:	4313      	orrs	r3, r2
 800322a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d009      	beq.n	800324c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4910      	ldr	r1, [pc, #64]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800324c:	f000 f824 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <HAL_RCC_ClockConfig+0x1f0>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	490b      	ldr	r1, [pc, #44]	; (800328c <HAL_RCC_ClockConfig+0x1f4>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
 8003268:	4a09      	ldr	r2, [pc, #36]	; (8003290 <HAL_RCC_ClockConfig+0x1f8>)
 800326a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x1fc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fcbf 	bl	8000bf4 <HAL_InitTick>
 8003276:	4603      	mov	r3, r0
 8003278:	72fb      	strb	r3, [r7, #11]

  return status;
 800327a:	7afb      	ldrb	r3, [r7, #11]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40022000 	.word	0x40022000
 8003288:	40021000 	.word	0x40021000
 800328c:	0800cc0c 	.word	0x0800cc0c
 8003290:	20000000 	.word	0x20000000
 8003294:	20000004 	.word	0x20000004

08003298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a6:	4b3e      	ldr	r3, [pc, #248]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b0:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x34>
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d121      	bne.n	800330a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d11e      	bne.n	800330a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032cc:	4b34      	ldr	r3, [pc, #208]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032d8:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	e005      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032e8:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032f4:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d102      	bne.n	8003316 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003310:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	e004      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d101      	bne.n	8003320 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800331c:	4b23      	ldr	r3, [pc, #140]	; (80033ac <HAL_RCC_GetSysClockFreq+0x114>)
 800331e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d134      	bne.n	8003390 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003326:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d003      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0xa6>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d003      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0xac>
 800333c:	e005      	b.n	800334a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800333e:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003340:	617b      	str	r3, [r7, #20]
      break;
 8003342:	e005      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003344:	4b19      	ldr	r3, [pc, #100]	; (80033ac <HAL_RCC_GetSysClockFreq+0x114>)
 8003346:	617b      	str	r3, [r7, #20]
      break;
 8003348:	e002      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	617b      	str	r3, [r7, #20]
      break;
 800334e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003350:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	3301      	adds	r3, #1
 800335c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	fb03 f202 	mul.w	r2, r3, r2
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	0e5b      	lsrs	r3, r3, #25
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	3301      	adds	r3, #1
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	fbb2 f3f3 	udiv	r3, r2, r3
 800338e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003390:	69bb      	ldr	r3, [r7, #24]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3724      	adds	r7, #36	; 0x24
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
 80033a4:	0800cc24 	.word	0x0800cc24
 80033a8:	00f42400 	.word	0x00f42400
 80033ac:	007a1200 	.word	0x007a1200

080033b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000000 	.word	0x20000000

080033c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033cc:	f7ff fff0 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4904      	ldr	r1, [pc, #16]	; (80033f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000
 80033f0:	0800cc1c 	.word	0x0800cc1c

080033f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033f8:	f7ff ffda 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0adb      	lsrs	r3, r3, #11
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4904      	ldr	r1, [pc, #16]	; (800341c <HAL_RCC_GetPCLK2Freq+0x28>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	0800cc1c 	.word	0x0800cc1c

08003420 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	220f      	movs	r2, #15
 800342e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0203 	and.w	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	08db      	lsrs	r3, r3, #3
 800345a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003462:	4b07      	ldr	r3, [pc, #28]	; (8003480 <HAL_RCC_GetClockConfig+0x60>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0207 	and.w	r2, r3, #7
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	601a      	str	r2, [r3, #0]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	40022000 	.word	0x40022000

08003484 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003490:	4b2a      	ldr	r3, [pc, #168]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800349c:	f7ff f95e 	bl	800275c <HAL_PWREx_GetVoltageRange>
 80034a0:	6178      	str	r0, [r7, #20]
 80034a2:	e014      	b.n	80034ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a4:	4b25      	ldr	r3, [pc, #148]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	4a24      	ldr	r2, [pc, #144]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ae:	6593      	str	r3, [r2, #88]	; 0x58
 80034b0:	4b22      	ldr	r3, [pc, #136]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034bc:	f7ff f94e 	bl	800275c <HAL_PWREx_GetVoltageRange>
 80034c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	4a1d      	ldr	r2, [pc, #116]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d4:	d10b      	bne.n	80034ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d919      	bls.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2ba0      	cmp	r3, #160	; 0xa0
 80034e0:	d902      	bls.n	80034e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034e2:	2302      	movs	r3, #2
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	e013      	b.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034e8:	2301      	movs	r3, #1
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	e010      	b.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b80      	cmp	r3, #128	; 0x80
 80034f2:	d902      	bls.n	80034fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034f4:	2303      	movs	r3, #3
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	e00a      	b.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d102      	bne.n	8003506 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003500:	2302      	movs	r3, #2
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	e004      	b.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b70      	cmp	r3, #112	; 0x70
 800350a:	d101      	bne.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800350c:	2301      	movs	r3, #1
 800350e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 0207 	bic.w	r2, r3, #7
 8003518:	4909      	ldr	r1, [pc, #36]	; (8003540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	429a      	cmp	r2, r3
 800352c:	d001      	beq.n	8003532 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	40022000 	.word	0x40022000

08003544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800354c:	2300      	movs	r3, #0
 800354e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003550:	2300      	movs	r3, #0
 8003552:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800355c:	2b00      	cmp	r3, #0
 800355e:	d041      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003564:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003568:	d02a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800356a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800356e:	d824      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003570:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003574:	d008      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003576:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800357a:	d81e      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003584:	d010      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003586:	e018      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003588:	4b86      	ldr	r3, [pc, #536]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a85      	ldr	r2, [pc, #532]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003592:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003594:	e015      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f000 facd 	bl	8003b3c <RCCEx_PLLSAI1_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035a6:	e00c      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3320      	adds	r3, #32
 80035ac:	2100      	movs	r1, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fbb6 	bl	8003d20 <RCCEx_PLLSAI2_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035b8:	e003      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	74fb      	strb	r3, [r7, #19]
      break;
 80035be:	e000      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c2:	7cfb      	ldrb	r3, [r7, #19]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10b      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035c8:	4b76      	ldr	r3, [pc, #472]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d6:	4973      	ldr	r1, [pc, #460]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035de:	e001      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d041      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035f8:	d02a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035fe:	d824      	bhi.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003604:	d008      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800360a:	d81e      	bhi.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003614:	d010      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003616:	e018      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003618:	4b62      	ldr	r3, [pc, #392]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a61      	ldr	r2, [pc, #388]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003622:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003624:	e015      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fa85 	bl	8003b3c <RCCEx_PLLSAI1_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003636:	e00c      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3320      	adds	r3, #32
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fb6e 	bl	8003d20 <RCCEx_PLLSAI2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003648:	e003      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	74fb      	strb	r3, [r7, #19]
      break;
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003652:	7cfb      	ldrb	r3, [r7, #19]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10b      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003658:	4b52      	ldr	r3, [pc, #328]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003666:	494f      	ldr	r1, [pc, #316]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800366e:	e001      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a0 	beq.w	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003686:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003696:	2300      	movs	r3, #0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369c:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	4a40      	ldr	r2, [pc, #256]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a6:	6593      	str	r3, [r2, #88]	; 0x58
 80036a8:	4b3e      	ldr	r3, [pc, #248]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b4:	2301      	movs	r3, #1
 80036b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b8:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a3a      	ldr	r2, [pc, #232]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036c4:	f7fd fbcc 	bl	8000e60 <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ca:	e009      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036cc:	f7fd fbc8 	bl	8000e60 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d902      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	74fb      	strb	r3, [r7, #19]
        break;
 80036de:	e005      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036e0:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ef      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d15c      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036f2:	4b2c      	ldr	r3, [pc, #176]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01f      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	429a      	cmp	r2, r3
 800370e:	d019      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003710:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800371c:	4b21      	ldr	r3, [pc, #132]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	4a20      	ldr	r2, [pc, #128]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800372c:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003732:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fd fb87 	bl	8000e60 <HAL_GetTick>
 8003752:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003754:	e00b      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003756:	f7fd fb83 	bl	8000e60 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	f241 3288 	movw	r2, #5000	; 0x1388
 8003764:	4293      	cmp	r3, r2
 8003766:	d902      	bls.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	74fb      	strb	r3, [r7, #19]
            break;
 800376c:	e006      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0ec      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10c      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	4904      	ldr	r1, [pc, #16]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800379a:	e009      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
 80037a0:	e006      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037b0:	7c7b      	ldrb	r3, [r7, #17]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d105      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b6:	4ba6      	ldr	r3, [pc, #664]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ba:	4aa5      	ldr	r2, [pc, #660]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ce:	4ba0      	ldr	r3, [pc, #640]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d4:	f023 0203 	bic.w	r2, r3, #3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	499c      	ldr	r1, [pc, #624]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037f0:	4b97      	ldr	r3, [pc, #604]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	f023 020c 	bic.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	4994      	ldr	r1, [pc, #592]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003812:	4b8f      	ldr	r3, [pc, #572]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	498b      	ldr	r1, [pc, #556]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003834:	4b86      	ldr	r3, [pc, #536]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	4983      	ldr	r1, [pc, #524]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003856:	4b7e      	ldr	r3, [pc, #504]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003864:	497a      	ldr	r1, [pc, #488]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003878:	4b75      	ldr	r3, [pc, #468]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	4972      	ldr	r1, [pc, #456]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800389a:	4b6d      	ldr	r3, [pc, #436]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a8:	4969      	ldr	r1, [pc, #420]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038bc:	4b64      	ldr	r3, [pc, #400]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ca:	4961      	ldr	r1, [pc, #388]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038de:	4b5c      	ldr	r3, [pc, #368]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	4958      	ldr	r1, [pc, #352]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003900:	4b53      	ldr	r3, [pc, #332]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003906:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	4950      	ldr	r1, [pc, #320]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003922:	4b4b      	ldr	r3, [pc, #300]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	4947      	ldr	r1, [pc, #284]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003944:	4b42      	ldr	r3, [pc, #264]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	493f      	ldr	r1, [pc, #252]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d028      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003966:	4b3a      	ldr	r3, [pc, #232]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4936      	ldr	r1, [pc, #216]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003984:	d106      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003986:	4b32      	ldr	r3, [pc, #200]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	4a31      	ldr	r2, [pc, #196]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800398c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003990:	60d3      	str	r3, [r2, #12]
 8003992:	e011      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800399c:	d10c      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3304      	adds	r3, #4
 80039a2:	2101      	movs	r1, #1
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f8c9 	bl	8003b3c <RCCEx_PLLSAI1_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039ae:	7cfb      	ldrb	r3, [r7, #19]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d028      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039c4:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d2:	491f      	ldr	r1, [pc, #124]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e2:	d106      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e4:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ee:	60d3      	str	r3, [r2, #12]
 80039f0:	e011      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039fa:	d10c      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	2101      	movs	r1, #1
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f89a 	bl	8003b3c <RCCEx_PLLSAI1_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d02a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a30:	4907      	ldr	r1, [pc, #28]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a40:	d108      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a42:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	4a02      	ldr	r2, [pc, #8]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a4c:	60d3      	str	r3, [r2, #12]
 8003a4e:	e013      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003a50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2101      	movs	r1, #1
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f869 	bl	8003b3c <RCCEx_PLLSAI1_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d02f      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a84:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a92:	4929      	ldr	r1, [pc, #164]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f846 	bl	8003b3c <RCCEx_PLLSAI1_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d014      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003aba:	7cfb      	ldrb	r3, [r7, #19]
 8003abc:	74bb      	strb	r3, [r7, #18]
 8003abe:	e011      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3320      	adds	r3, #32
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f925 	bl	8003d20 <RCCEx_PLLSAI2_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
 8003ae2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00b      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b00:	490d      	ldr	r1, [pc, #52]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00b      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b14:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b24:	4904      	ldr	r1, [pc, #16]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000

08003b3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b4a:	4b74      	ldr	r3, [pc, #464]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d018      	beq.n	8003b88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b56:	4b71      	ldr	r3, [pc, #452]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0203 	and.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d10d      	bne.n	8003b82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
       ||
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b6e:	4b6b      	ldr	r3, [pc, #428]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d047      	beq.n	8003c12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
 8003b86:	e044      	b.n	8003c12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d018      	beq.n	8003bc2 <RCCEx_PLLSAI1_Config+0x86>
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d825      	bhi.n	8003be0 <RCCEx_PLLSAI1_Config+0xa4>
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d002      	beq.n	8003b9e <RCCEx_PLLSAI1_Config+0x62>
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d009      	beq.n	8003bb0 <RCCEx_PLLSAI1_Config+0x74>
 8003b9c:	e020      	b.n	8003be0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b9e:	4b5f      	ldr	r3, [pc, #380]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d11d      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bae:	e01a      	b.n	8003be6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bb0:	4b5a      	ldr	r3, [pc, #360]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d116      	bne.n	8003bea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc0:	e013      	b.n	8003bea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bc2:	4b56      	ldr	r3, [pc, #344]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10f      	bne.n	8003bee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bce:	4b53      	ldr	r3, [pc, #332]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bde:	e006      	b.n	8003bee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
      break;
 8003be4:	e004      	b.n	8003bf0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003be6:	bf00      	nop
 8003be8:	e002      	b.n	8003bf0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bea:	bf00      	nop
 8003bec:	e000      	b.n	8003bf0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bee:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bf6:	4b49      	ldr	r3, [pc, #292]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6819      	ldr	r1, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	4943      	ldr	r1, [pc, #268]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d17c      	bne.n	8003d12 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c18:	4b40      	ldr	r3, [pc, #256]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a3f      	ldr	r2, [pc, #252]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c24:	f7fd f91c 	bl	8000e60 <HAL_GetTick>
 8003c28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c2a:	e009      	b.n	8003c40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c2c:	f7fd f918 	bl	8000e60 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d902      	bls.n	8003c40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c3e:	e005      	b.n	8003c4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c40:	4b36      	ldr	r3, [pc, #216]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1ef      	bne.n	8003c2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d15f      	bne.n	8003d12 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d110      	bne.n	8003c7a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c58:	4b30      	ldr	r3, [pc, #192]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6892      	ldr	r2, [r2, #8]
 8003c68:	0211      	lsls	r1, r2, #8
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68d2      	ldr	r2, [r2, #12]
 8003c6e:	06d2      	lsls	r2, r2, #27
 8003c70:	430a      	orrs	r2, r1
 8003c72:	492a      	ldr	r1, [pc, #168]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	610b      	str	r3, [r1, #16]
 8003c78:	e027      	b.n	8003cca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d112      	bne.n	8003ca6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c80:	4b26      	ldr	r3, [pc, #152]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6892      	ldr	r2, [r2, #8]
 8003c90:	0211      	lsls	r1, r2, #8
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6912      	ldr	r2, [r2, #16]
 8003c96:	0852      	lsrs	r2, r2, #1
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	0552      	lsls	r2, r2, #21
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	491f      	ldr	r1, [pc, #124]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	610b      	str	r3, [r1, #16]
 8003ca4:	e011      	b.n	8003cca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6892      	ldr	r2, [r2, #8]
 8003cb6:	0211      	lsls	r1, r2, #8
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6952      	ldr	r2, [r2, #20]
 8003cbc:	0852      	lsrs	r2, r2, #1
 8003cbe:	3a01      	subs	r2, #1
 8003cc0:	0652      	lsls	r2, r2, #25
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	4915      	ldr	r1, [pc, #84]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cd4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd6:	f7fd f8c3 	bl	8000e60 <HAL_GetTick>
 8003cda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cdc:	e009      	b.n	8003cf2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cde:	f7fd f8bf 	bl	8000e60 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d902      	bls.n	8003cf2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	73fb      	strb	r3, [r7, #15]
          break;
 8003cf0:	e005      	b.n	8003cfe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0ef      	beq.n	8003cde <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	4903      	ldr	r1, [pc, #12]	; (8003d1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000

08003d20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d2e:	4b69      	ldr	r3, [pc, #420]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d018      	beq.n	8003d6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d3a:	4b66      	ldr	r3, [pc, #408]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0203 	and.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d10d      	bne.n	8003d66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d52:	4b60      	ldr	r3, [pc, #384]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
       ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d047      	beq.n	8003df6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
 8003d6a:	e044      	b.n	8003df6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d018      	beq.n	8003da6 <RCCEx_PLLSAI2_Config+0x86>
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d825      	bhi.n	8003dc4 <RCCEx_PLLSAI2_Config+0xa4>
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d002      	beq.n	8003d82 <RCCEx_PLLSAI2_Config+0x62>
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d009      	beq.n	8003d94 <RCCEx_PLLSAI2_Config+0x74>
 8003d80:	e020      	b.n	8003dc4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d82:	4b54      	ldr	r3, [pc, #336]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d11d      	bne.n	8003dca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d92:	e01a      	b.n	8003dca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d94:	4b4f      	ldr	r3, [pc, #316]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d116      	bne.n	8003dce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da4:	e013      	b.n	8003dce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003da6:	4b4b      	ldr	r3, [pc, #300]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10f      	bne.n	8003dd2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003db2:	4b48      	ldr	r3, [pc, #288]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dc2:	e006      	b.n	8003dd2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	e004      	b.n	8003dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e002      	b.n	8003dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dda:	4b3e      	ldr	r3, [pc, #248]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6819      	ldr	r1, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	430b      	orrs	r3, r1
 8003df0:	4938      	ldr	r1, [pc, #224]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d166      	bne.n	8003eca <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dfc:	4b35      	ldr	r3, [pc, #212]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a34      	ldr	r2, [pc, #208]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e08:	f7fd f82a 	bl	8000e60 <HAL_GetTick>
 8003e0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e0e:	e009      	b.n	8003e24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e10:	f7fd f826 	bl	8000e60 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d902      	bls.n	8003e24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	73fb      	strb	r3, [r7, #15]
        break;
 8003e22:	e005      	b.n	8003e30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e24:	4b2b      	ldr	r3, [pc, #172]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ef      	bne.n	8003e10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d149      	bne.n	8003eca <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d110      	bne.n	8003e5e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e3c:	4b25      	ldr	r3, [pc, #148]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6892      	ldr	r2, [r2, #8]
 8003e4c:	0211      	lsls	r1, r2, #8
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68d2      	ldr	r2, [r2, #12]
 8003e52:	06d2      	lsls	r2, r2, #27
 8003e54:	430a      	orrs	r2, r1
 8003e56:	491f      	ldr	r1, [pc, #124]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	614b      	str	r3, [r1, #20]
 8003e5c:	e011      	b.n	8003e82 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6892      	ldr	r2, [r2, #8]
 8003e6e:	0211      	lsls	r1, r2, #8
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6912      	ldr	r2, [r2, #16]
 8003e74:	0852      	lsrs	r2, r2, #1
 8003e76:	3a01      	subs	r2, #1
 8003e78:	0652      	lsls	r2, r2, #25
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	4915      	ldr	r1, [pc, #84]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e82:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7fc ffe7 	bl	8000e60 <HAL_GetTick>
 8003e92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e94:	e009      	b.n	8003eaa <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e96:	f7fc ffe3 	bl	8000e60 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d902      	bls.n	8003eaa <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	73fb      	strb	r3, [r7, #15]
          break;
 8003ea8:	e005      	b.n	8003eb6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0ef      	beq.n	8003e96 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	4903      	ldr	r1, [pc, #12]	; (8003ed4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40021000 	.word	0x40021000

08003ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e049      	b.n	8003f7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f841 	bl	8003f86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	4619      	mov	r1, r3
 8003f16:	4610      	mov	r0, r2
 8003f18:	f000 f9da 	bl	80042d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d001      	beq.n	8003fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e04f      	b.n	8004054 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a23      	ldr	r2, [pc, #140]	; (8004060 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01d      	beq.n	8004012 <HAL_TIM_Base_Start_IT+0x76>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fde:	d018      	beq.n	8004012 <HAL_TIM_Base_Start_IT+0x76>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a1f      	ldr	r2, [pc, #124]	; (8004064 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d013      	beq.n	8004012 <HAL_TIM_Base_Start_IT+0x76>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1e      	ldr	r2, [pc, #120]	; (8004068 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00e      	beq.n	8004012 <HAL_TIM_Base_Start_IT+0x76>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1c      	ldr	r2, [pc, #112]	; (800406c <HAL_TIM_Base_Start_IT+0xd0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d009      	beq.n	8004012 <HAL_TIM_Base_Start_IT+0x76>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1b      	ldr	r2, [pc, #108]	; (8004070 <HAL_TIM_Base_Start_IT+0xd4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d004      	beq.n	8004012 <HAL_TIM_Base_Start_IT+0x76>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <HAL_TIM_Base_Start_IT+0xd8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d115      	bne.n	800403e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	4b17      	ldr	r3, [pc, #92]	; (8004078 <HAL_TIM_Base_Start_IT+0xdc>)
 800401a:	4013      	ands	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b06      	cmp	r3, #6
 8004022:	d015      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0xb4>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402a:	d011      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403c:	e008      	b.n	8004050 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0201 	orr.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e000      	b.n	8004052 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004050:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40000400 	.word	0x40000400
 8004068:	40000800 	.word	0x40000800
 800406c:	40000c00 	.word	0x40000c00
 8004070:	40013400 	.word	0x40013400
 8004074:	40014000 	.word	0x40014000
 8004078:	00010007 	.word	0x00010007

0800407c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d020      	beq.n	80040e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01b      	beq.n	80040e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0202 	mvn.w	r2, #2
 80040b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f8e4 	bl	8004294 <HAL_TIM_IC_CaptureCallback>
 80040cc:	e005      	b.n	80040da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f8d6 	bl	8004280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f8e7 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d020      	beq.n	800412c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01b      	beq.n	800412c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0204 	mvn.w	r2, #4
 80040fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f8be 	bl	8004294 <HAL_TIM_IC_CaptureCallback>
 8004118:	e005      	b.n	8004126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f8b0 	bl	8004280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f8c1 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d020      	beq.n	8004178 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01b      	beq.n	8004178 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0208 	mvn.w	r2, #8
 8004148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2204      	movs	r2, #4
 800414e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f898 	bl	8004294 <HAL_TIM_IC_CaptureCallback>
 8004164:	e005      	b.n	8004172 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f88a 	bl	8004280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f89b 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0310 	and.w	r3, r3, #16
 800417e:	2b00      	cmp	r3, #0
 8004180:	d020      	beq.n	80041c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01b      	beq.n	80041c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0210 	mvn.w	r2, #16
 8004194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2208      	movs	r2, #8
 800419a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f872 	bl	8004294 <HAL_TIM_IC_CaptureCallback>
 80041b0:	e005      	b.n	80041be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f864 	bl	8004280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f875 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00c      	beq.n	80041e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0201 	mvn.w	r2, #1
 80041e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fc fc66 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00c      	beq.n	800420c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f906 	bl	8004418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00c      	beq.n	8004230 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8fe 	bl	800442c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00c      	beq.n	8004254 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f834 	bl	80042bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0220 	mvn.w	r2, #32
 8004270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f8c6 	bl	8004404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a40      	ldr	r2, [pc, #256]	; (80043e4 <TIM_Base_SetConfig+0x114>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ee:	d00f      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a3d      	ldr	r2, [pc, #244]	; (80043e8 <TIM_Base_SetConfig+0x118>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00b      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a3c      	ldr	r2, [pc, #240]	; (80043ec <TIM_Base_SetConfig+0x11c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a3b      	ldr	r2, [pc, #236]	; (80043f0 <TIM_Base_SetConfig+0x120>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a3a      	ldr	r2, [pc, #232]	; (80043f4 <TIM_Base_SetConfig+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d108      	bne.n	8004322 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2f      	ldr	r2, [pc, #188]	; (80043e4 <TIM_Base_SetConfig+0x114>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01f      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004330:	d01b      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2c      	ldr	r2, [pc, #176]	; (80043e8 <TIM_Base_SetConfig+0x118>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d017      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a2b      	ldr	r2, [pc, #172]	; (80043ec <TIM_Base_SetConfig+0x11c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a2a      	ldr	r2, [pc, #168]	; (80043f0 <TIM_Base_SetConfig+0x120>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00f      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a29      	ldr	r2, [pc, #164]	; (80043f4 <TIM_Base_SetConfig+0x124>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00b      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a28      	ldr	r2, [pc, #160]	; (80043f8 <TIM_Base_SetConfig+0x128>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d007      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a27      	ldr	r2, [pc, #156]	; (80043fc <TIM_Base_SetConfig+0x12c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d003      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a26      	ldr	r2, [pc, #152]	; (8004400 <TIM_Base_SetConfig+0x130>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d108      	bne.n	800437c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a10      	ldr	r2, [pc, #64]	; (80043e4 <TIM_Base_SetConfig+0x114>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00f      	beq.n	80043c8 <TIM_Base_SetConfig+0xf8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <TIM_Base_SetConfig+0x124>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00b      	beq.n	80043c8 <TIM_Base_SetConfig+0xf8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a11      	ldr	r2, [pc, #68]	; (80043f8 <TIM_Base_SetConfig+0x128>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d007      	beq.n	80043c8 <TIM_Base_SetConfig+0xf8>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a10      	ldr	r2, [pc, #64]	; (80043fc <TIM_Base_SetConfig+0x12c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <TIM_Base_SetConfig+0xf8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a0f      	ldr	r2, [pc, #60]	; (8004400 <TIM_Base_SetConfig+0x130>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d103      	bne.n	80043d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	615a      	str	r2, [r3, #20]
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00
 80043f4:	40013400 	.word	0x40013400
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40014400 	.word	0x40014400
 8004400:	40014800 	.word	0x40014800

08004404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e040      	b.n	80044d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc fb66 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2224      	movs	r2, #36	; 0x24
 800446c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fb6a 	bl	8004b60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f8af 	bl	80045f0 <UART_SetConfig>
 8004492:	4603      	mov	r3, r0
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e01b      	b.n	80044d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fbe9 	bl	8004ca4 <UART_CheckIdleState>
 80044d2:	4603      	mov	r3, r0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	; 0x28
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d178      	bne.n	80045e6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_UART_Transmit+0x24>
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e071      	b.n	80045e8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2221      	movs	r2, #33	; 0x21
 8004510:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004512:	f7fc fca5 	bl	8000e60 <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	88fa      	ldrh	r2, [r7, #6]
 8004524:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004530:	d108      	bne.n	8004544 <HAL_UART_Transmit+0x68>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d104      	bne.n	8004544 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	e003      	b.n	800454c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004548:	2300      	movs	r3, #0
 800454a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800454c:	e030      	b.n	80045b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2200      	movs	r2, #0
 8004556:	2180      	movs	r1, #128	; 0x80
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fc4b 	bl	8004df4 <UART_WaitOnFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e03c      	b.n	80045e8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10b      	bne.n	800458c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	881a      	ldrh	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004580:	b292      	uxth	r2, r2
 8004582:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	3302      	adds	r3, #2
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	e008      	b.n	800459e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	781a      	ldrb	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	b292      	uxth	r2, r2
 8004596:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	3301      	adds	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1c8      	bne.n	800454e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2200      	movs	r2, #0
 80045c4:	2140      	movs	r1, #64	; 0x40
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fc14 	bl	8004df4 <UART_WaitOnFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e005      	b.n	80045e8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e000      	b.n	80045e8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
  }
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3720      	adds	r7, #32
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f4:	b08a      	sub	sp, #40	; 0x28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	431a      	orrs	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	431a      	orrs	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	4313      	orrs	r3, r2
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4ba4      	ldr	r3, [pc, #656]	; (80048b0 <UART_SetConfig+0x2c0>)
 8004620:	4013      	ands	r3, r2
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004628:	430b      	orrs	r3, r1
 800462a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a99      	ldr	r2, [pc, #612]	; (80048b4 <UART_SetConfig+0x2c4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004658:	4313      	orrs	r3, r2
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	430a      	orrs	r2, r1
 800466e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a90      	ldr	r2, [pc, #576]	; (80048b8 <UART_SetConfig+0x2c8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d126      	bne.n	80046c8 <UART_SetConfig+0xd8>
 800467a:	4b90      	ldr	r3, [pc, #576]	; (80048bc <UART_SetConfig+0x2cc>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	2b03      	cmp	r3, #3
 8004686:	d81b      	bhi.n	80046c0 <UART_SetConfig+0xd0>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0xa0>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046a1 	.word	0x080046a1
 8004694:	080046b1 	.word	0x080046b1
 8004698:	080046a9 	.word	0x080046a9
 800469c:	080046b9 	.word	0x080046b9
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a6:	e116      	b.n	80048d6 <UART_SetConfig+0x2e6>
 80046a8:	2302      	movs	r3, #2
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ae:	e112      	b.n	80048d6 <UART_SetConfig+0x2e6>
 80046b0:	2304      	movs	r3, #4
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b6:	e10e      	b.n	80048d6 <UART_SetConfig+0x2e6>
 80046b8:	2308      	movs	r3, #8
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046be:	e10a      	b.n	80048d6 <UART_SetConfig+0x2e6>
 80046c0:	2310      	movs	r3, #16
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c6:	e106      	b.n	80048d6 <UART_SetConfig+0x2e6>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a7c      	ldr	r2, [pc, #496]	; (80048c0 <UART_SetConfig+0x2d0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d138      	bne.n	8004744 <UART_SetConfig+0x154>
 80046d2:	4b7a      	ldr	r3, [pc, #488]	; (80048bc <UART_SetConfig+0x2cc>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	d82d      	bhi.n	800473c <UART_SetConfig+0x14c>
 80046e0:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <UART_SetConfig+0xf8>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	0800471d 	.word	0x0800471d
 80046ec:	0800473d 	.word	0x0800473d
 80046f0:	0800473d 	.word	0x0800473d
 80046f4:	0800473d 	.word	0x0800473d
 80046f8:	0800472d 	.word	0x0800472d
 80046fc:	0800473d 	.word	0x0800473d
 8004700:	0800473d 	.word	0x0800473d
 8004704:	0800473d 	.word	0x0800473d
 8004708:	08004725 	.word	0x08004725
 800470c:	0800473d 	.word	0x0800473d
 8004710:	0800473d 	.word	0x0800473d
 8004714:	0800473d 	.word	0x0800473d
 8004718:	08004735 	.word	0x08004735
 800471c:	2300      	movs	r3, #0
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004722:	e0d8      	b.n	80048d6 <UART_SetConfig+0x2e6>
 8004724:	2302      	movs	r3, #2
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472a:	e0d4      	b.n	80048d6 <UART_SetConfig+0x2e6>
 800472c:	2304      	movs	r3, #4
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004732:	e0d0      	b.n	80048d6 <UART_SetConfig+0x2e6>
 8004734:	2308      	movs	r3, #8
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473a:	e0cc      	b.n	80048d6 <UART_SetConfig+0x2e6>
 800473c:	2310      	movs	r3, #16
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004742:	e0c8      	b.n	80048d6 <UART_SetConfig+0x2e6>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a5e      	ldr	r2, [pc, #376]	; (80048c4 <UART_SetConfig+0x2d4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d125      	bne.n	800479a <UART_SetConfig+0x1aa>
 800474e:	4b5b      	ldr	r3, [pc, #364]	; (80048bc <UART_SetConfig+0x2cc>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004754:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004758:	2b30      	cmp	r3, #48	; 0x30
 800475a:	d016      	beq.n	800478a <UART_SetConfig+0x19a>
 800475c:	2b30      	cmp	r3, #48	; 0x30
 800475e:	d818      	bhi.n	8004792 <UART_SetConfig+0x1a2>
 8004760:	2b20      	cmp	r3, #32
 8004762:	d00a      	beq.n	800477a <UART_SetConfig+0x18a>
 8004764:	2b20      	cmp	r3, #32
 8004766:	d814      	bhi.n	8004792 <UART_SetConfig+0x1a2>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <UART_SetConfig+0x182>
 800476c:	2b10      	cmp	r3, #16
 800476e:	d008      	beq.n	8004782 <UART_SetConfig+0x192>
 8004770:	e00f      	b.n	8004792 <UART_SetConfig+0x1a2>
 8004772:	2300      	movs	r3, #0
 8004774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004778:	e0ad      	b.n	80048d6 <UART_SetConfig+0x2e6>
 800477a:	2302      	movs	r3, #2
 800477c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004780:	e0a9      	b.n	80048d6 <UART_SetConfig+0x2e6>
 8004782:	2304      	movs	r3, #4
 8004784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004788:	e0a5      	b.n	80048d6 <UART_SetConfig+0x2e6>
 800478a:	2308      	movs	r3, #8
 800478c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004790:	e0a1      	b.n	80048d6 <UART_SetConfig+0x2e6>
 8004792:	2310      	movs	r3, #16
 8004794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004798:	e09d      	b.n	80048d6 <UART_SetConfig+0x2e6>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a4a      	ldr	r2, [pc, #296]	; (80048c8 <UART_SetConfig+0x2d8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d125      	bne.n	80047f0 <UART_SetConfig+0x200>
 80047a4:	4b45      	ldr	r3, [pc, #276]	; (80048bc <UART_SetConfig+0x2cc>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047ae:	2bc0      	cmp	r3, #192	; 0xc0
 80047b0:	d016      	beq.n	80047e0 <UART_SetConfig+0x1f0>
 80047b2:	2bc0      	cmp	r3, #192	; 0xc0
 80047b4:	d818      	bhi.n	80047e8 <UART_SetConfig+0x1f8>
 80047b6:	2b80      	cmp	r3, #128	; 0x80
 80047b8:	d00a      	beq.n	80047d0 <UART_SetConfig+0x1e0>
 80047ba:	2b80      	cmp	r3, #128	; 0x80
 80047bc:	d814      	bhi.n	80047e8 <UART_SetConfig+0x1f8>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <UART_SetConfig+0x1d8>
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d008      	beq.n	80047d8 <UART_SetConfig+0x1e8>
 80047c6:	e00f      	b.n	80047e8 <UART_SetConfig+0x1f8>
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ce:	e082      	b.n	80048d6 <UART_SetConfig+0x2e6>
 80047d0:	2302      	movs	r3, #2
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d6:	e07e      	b.n	80048d6 <UART_SetConfig+0x2e6>
 80047d8:	2304      	movs	r3, #4
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047de:	e07a      	b.n	80048d6 <UART_SetConfig+0x2e6>
 80047e0:	2308      	movs	r3, #8
 80047e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e6:	e076      	b.n	80048d6 <UART_SetConfig+0x2e6>
 80047e8:	2310      	movs	r3, #16
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ee:	e072      	b.n	80048d6 <UART_SetConfig+0x2e6>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a35      	ldr	r2, [pc, #212]	; (80048cc <UART_SetConfig+0x2dc>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d12a      	bne.n	8004850 <UART_SetConfig+0x260>
 80047fa:	4b30      	ldr	r3, [pc, #192]	; (80048bc <UART_SetConfig+0x2cc>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004808:	d01a      	beq.n	8004840 <UART_SetConfig+0x250>
 800480a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800480e:	d81b      	bhi.n	8004848 <UART_SetConfig+0x258>
 8004810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004814:	d00c      	beq.n	8004830 <UART_SetConfig+0x240>
 8004816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481a:	d815      	bhi.n	8004848 <UART_SetConfig+0x258>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <UART_SetConfig+0x238>
 8004820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004824:	d008      	beq.n	8004838 <UART_SetConfig+0x248>
 8004826:	e00f      	b.n	8004848 <UART_SetConfig+0x258>
 8004828:	2300      	movs	r3, #0
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482e:	e052      	b.n	80048d6 <UART_SetConfig+0x2e6>
 8004830:	2302      	movs	r3, #2
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004836:	e04e      	b.n	80048d6 <UART_SetConfig+0x2e6>
 8004838:	2304      	movs	r3, #4
 800483a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483e:	e04a      	b.n	80048d6 <UART_SetConfig+0x2e6>
 8004840:	2308      	movs	r3, #8
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004846:	e046      	b.n	80048d6 <UART_SetConfig+0x2e6>
 8004848:	2310      	movs	r3, #16
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484e:	e042      	b.n	80048d6 <UART_SetConfig+0x2e6>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <UART_SetConfig+0x2c4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d13a      	bne.n	80048d0 <UART_SetConfig+0x2e0>
 800485a:	4b18      	ldr	r3, [pc, #96]	; (80048bc <UART_SetConfig+0x2cc>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004864:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004868:	d01a      	beq.n	80048a0 <UART_SetConfig+0x2b0>
 800486a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800486e:	d81b      	bhi.n	80048a8 <UART_SetConfig+0x2b8>
 8004870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004874:	d00c      	beq.n	8004890 <UART_SetConfig+0x2a0>
 8004876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487a:	d815      	bhi.n	80048a8 <UART_SetConfig+0x2b8>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <UART_SetConfig+0x298>
 8004880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004884:	d008      	beq.n	8004898 <UART_SetConfig+0x2a8>
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x2b8>
 8004888:	2300      	movs	r3, #0
 800488a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488e:	e022      	b.n	80048d6 <UART_SetConfig+0x2e6>
 8004890:	2302      	movs	r3, #2
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004896:	e01e      	b.n	80048d6 <UART_SetConfig+0x2e6>
 8004898:	2304      	movs	r3, #4
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489e:	e01a      	b.n	80048d6 <UART_SetConfig+0x2e6>
 80048a0:	2308      	movs	r3, #8
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a6:	e016      	b.n	80048d6 <UART_SetConfig+0x2e6>
 80048a8:	2310      	movs	r3, #16
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ae:	e012      	b.n	80048d6 <UART_SetConfig+0x2e6>
 80048b0:	efff69f3 	.word	0xefff69f3
 80048b4:	40008000 	.word	0x40008000
 80048b8:	40013800 	.word	0x40013800
 80048bc:	40021000 	.word	0x40021000
 80048c0:	40004400 	.word	0x40004400
 80048c4:	40004800 	.word	0x40004800
 80048c8:	40004c00 	.word	0x40004c00
 80048cc:	40005000 	.word	0x40005000
 80048d0:	2310      	movs	r3, #16
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a9f      	ldr	r2, [pc, #636]	; (8004b58 <UART_SetConfig+0x568>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d17a      	bne.n	80049d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d824      	bhi.n	8004932 <UART_SetConfig+0x342>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <UART_SetConfig+0x300>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004915 	.word	0x08004915
 80048f4:	08004933 	.word	0x08004933
 80048f8:	0800491d 	.word	0x0800491d
 80048fc:	08004933 	.word	0x08004933
 8004900:	08004923 	.word	0x08004923
 8004904:	08004933 	.word	0x08004933
 8004908:	08004933 	.word	0x08004933
 800490c:	08004933 	.word	0x08004933
 8004910:	0800492b 	.word	0x0800492b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004914:	f7fe fd58 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8004918:	61f8      	str	r0, [r7, #28]
        break;
 800491a:	e010      	b.n	800493e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800491c:	4b8f      	ldr	r3, [pc, #572]	; (8004b5c <UART_SetConfig+0x56c>)
 800491e:	61fb      	str	r3, [r7, #28]
        break;
 8004920:	e00d      	b.n	800493e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004922:	f7fe fcb9 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8004926:	61f8      	str	r0, [r7, #28]
        break;
 8004928:	e009      	b.n	800493e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800492e:	61fb      	str	r3, [r7, #28]
        break;
 8004930:	e005      	b.n	800493e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800493c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80fb 	beq.w	8004b3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	4413      	add	r3, r2
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	429a      	cmp	r2, r3
 8004954:	d305      	bcc.n	8004962 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	429a      	cmp	r2, r3
 8004960:	d903      	bls.n	800496a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004968:	e0e8      	b.n	8004b3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	2200      	movs	r2, #0
 800496e:	461c      	mov	r4, r3
 8004970:	4615      	mov	r5, r2
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	022b      	lsls	r3, r5, #8
 800497c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004980:	0222      	lsls	r2, r4, #8
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	6849      	ldr	r1, [r1, #4]
 8004986:	0849      	lsrs	r1, r1, #1
 8004988:	2000      	movs	r0, #0
 800498a:	4688      	mov	r8, r1
 800498c:	4681      	mov	r9, r0
 800498e:	eb12 0a08 	adds.w	sl, r2, r8
 8004992:	eb43 0b09 	adc.w	fp, r3, r9
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049a4:	4650      	mov	r0, sl
 80049a6:	4659      	mov	r1, fp
 80049a8:	f7fb fc7a 	bl	80002a0 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4613      	mov	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ba:	d308      	bcc.n	80049ce <UART_SetConfig+0x3de>
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c2:	d204      	bcs.n	80049ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	60da      	str	r2, [r3, #12]
 80049cc:	e0b6      	b.n	8004b3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049d4:	e0b2      	b.n	8004b3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049de:	d15e      	bne.n	8004a9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d828      	bhi.n	8004a3a <UART_SetConfig+0x44a>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <UART_SetConfig+0x400>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a15 	.word	0x08004a15
 80049f4:	08004a1d 	.word	0x08004a1d
 80049f8:	08004a25 	.word	0x08004a25
 80049fc:	08004a3b 	.word	0x08004a3b
 8004a00:	08004a2b 	.word	0x08004a2b
 8004a04:	08004a3b 	.word	0x08004a3b
 8004a08:	08004a3b 	.word	0x08004a3b
 8004a0c:	08004a3b 	.word	0x08004a3b
 8004a10:	08004a33 	.word	0x08004a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a14:	f7fe fcd8 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8004a18:	61f8      	str	r0, [r7, #28]
        break;
 8004a1a:	e014      	b.n	8004a46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a1c:	f7fe fcea 	bl	80033f4 <HAL_RCC_GetPCLK2Freq>
 8004a20:	61f8      	str	r0, [r7, #28]
        break;
 8004a22:	e010      	b.n	8004a46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a24:	4b4d      	ldr	r3, [pc, #308]	; (8004b5c <UART_SetConfig+0x56c>)
 8004a26:	61fb      	str	r3, [r7, #28]
        break;
 8004a28:	e00d      	b.n	8004a46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2a:	f7fe fc35 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8004a2e:	61f8      	str	r0, [r7, #28]
        break;
 8004a30:	e009      	b.n	8004a46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a36:	61fb      	str	r3, [r7, #28]
        break;
 8004a38:	e005      	b.n	8004a46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d077      	beq.n	8004b3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005a      	lsls	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	085b      	lsrs	r3, r3, #1
 8004a56:	441a      	add	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b0f      	cmp	r3, #15
 8004a66:	d916      	bls.n	8004a96 <UART_SetConfig+0x4a6>
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a6e:	d212      	bcs.n	8004a96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f023 030f 	bic.w	r3, r3, #15
 8004a78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	8afb      	ldrh	r3, [r7, #22]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	8afa      	ldrh	r2, [r7, #22]
 8004a92:	60da      	str	r2, [r3, #12]
 8004a94:	e052      	b.n	8004b3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a9c:	e04e      	b.n	8004b3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d827      	bhi.n	8004af6 <UART_SetConfig+0x506>
 8004aa6:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <UART_SetConfig+0x4bc>)
 8004aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aac:	08004ad1 	.word	0x08004ad1
 8004ab0:	08004ad9 	.word	0x08004ad9
 8004ab4:	08004ae1 	.word	0x08004ae1
 8004ab8:	08004af7 	.word	0x08004af7
 8004abc:	08004ae7 	.word	0x08004ae7
 8004ac0:	08004af7 	.word	0x08004af7
 8004ac4:	08004af7 	.word	0x08004af7
 8004ac8:	08004af7 	.word	0x08004af7
 8004acc:	08004aef 	.word	0x08004aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad0:	f7fe fc7a 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8004ad4:	61f8      	str	r0, [r7, #28]
        break;
 8004ad6:	e014      	b.n	8004b02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ad8:	f7fe fc8c 	bl	80033f4 <HAL_RCC_GetPCLK2Freq>
 8004adc:	61f8      	str	r0, [r7, #28]
        break;
 8004ade:	e010      	b.n	8004b02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae0:	4b1e      	ldr	r3, [pc, #120]	; (8004b5c <UART_SetConfig+0x56c>)
 8004ae2:	61fb      	str	r3, [r7, #28]
        break;
 8004ae4:	e00d      	b.n	8004b02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ae6:	f7fe fbd7 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8004aea:	61f8      	str	r0, [r7, #28]
        break;
 8004aec:	e009      	b.n	8004b02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af2:	61fb      	str	r3, [r7, #28]
        break;
 8004af4:	e005      	b.n	8004b02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b00:	bf00      	nop
    }

    if (pclk != 0U)
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d019      	beq.n	8004b3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	085a      	lsrs	r2, r3, #1
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	441a      	add	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b0f      	cmp	r3, #15
 8004b20:	d909      	bls.n	8004b36 <UART_SetConfig+0x546>
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b28:	d205      	bcs.n	8004b36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60da      	str	r2, [r3, #12]
 8004b34:	e002      	b.n	8004b3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3728      	adds	r7, #40	; 0x28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b56:	bf00      	nop
 8004b58:	40008000 	.word	0x40008000
 8004b5c:	00f42400 	.word	0x00f42400

08004b60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01a      	beq.n	8004c76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5e:	d10a      	bne.n	8004c76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
  }
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b098      	sub	sp, #96	; 0x60
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cb4:	f7fc f8d4 	bl	8000e60 <HAL_GetTick>
 8004cb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d12e      	bne.n	8004d26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f88c 	bl	8004df4 <UART_WaitOnFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d021      	beq.n	8004d26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d00:	647b      	str	r3, [r7, #68]	; 0x44
 8004d02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e6      	bne.n	8004ce2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e062      	b.n	8004dec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d149      	bne.n	8004dc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f856 	bl	8004df4 <UART_WaitOnFlagUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d03c      	beq.n	8004dc8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	e853 3f00 	ldrex	r3, [r3]
 8004d5a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e6      	bne.n	8004d4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3308      	adds	r3, #8
 8004d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0301 	bic.w	r3, r3, #1
 8004d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da0:	61fa      	str	r2, [r7, #28]
 8004da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	69b9      	ldr	r1, [r7, #24]
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	617b      	str	r3, [r7, #20]
   return(result);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e5      	bne.n	8004d80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e011      	b.n	8004dec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3758      	adds	r7, #88	; 0x58
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e04:	e049      	b.n	8004e9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d045      	beq.n	8004e9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0e:	f7fc f827 	bl	8000e60 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e048      	b.n	8004eba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d031      	beq.n	8004e9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d110      	bne.n	8004e66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2208      	movs	r2, #8
 8004e4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f838 	bl	8004ec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2208      	movs	r2, #8
 8004e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e029      	b.n	8004eba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e74:	d111      	bne.n	8004e9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f81e 	bl	8004ec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e00f      	b.n	8004eba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	bf0c      	ite	eq
 8004eaa:	2301      	moveq	r3, #1
 8004eac:	2300      	movne	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	79fb      	ldrb	r3, [r7, #7]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d0a6      	beq.n	8004e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b095      	sub	sp, #84	; 0x54
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8004eea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e6      	bne.n	8004eca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3308      	adds	r3, #8
 8004f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3308      	adds	r3, #8
 8004f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e5      	bne.n	8004efc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d118      	bne.n	8004f6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f023 0310 	bic.w	r3, r3, #16
 8004f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f56:	61bb      	str	r3, [r7, #24]
 8004f58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	6979      	ldr	r1, [r7, #20]
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	613b      	str	r3, [r7, #16]
   return(result);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e6      	bne.n	8004f38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f7e:	bf00      	nop
 8004f80:	3754      	adds	r7, #84	; 0x54
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	f107 001c 	add.w	r0, r7, #28
 8004f98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f001 fa1d 	bl	80063e8 <USB_CoreReset>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	639a      	str	r2, [r3, #56]	; 0x38
 8004fc4:	e005      	b.n	8004fd2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fde:	b004      	add	sp, #16
 8004fe0:	4770      	bx	lr
	...

08004fe4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d165      	bne.n	80050c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4a3e      	ldr	r2, [pc, #248]	; (80050f4 <USB_SetTurnaroundTime+0x110>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d906      	bls.n	800500e <USB_SetTurnaroundTime+0x2a>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4a3d      	ldr	r2, [pc, #244]	; (80050f8 <USB_SetTurnaroundTime+0x114>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d202      	bcs.n	800500e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005008:	230f      	movs	r3, #15
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	e05c      	b.n	80050c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	4a39      	ldr	r2, [pc, #228]	; (80050f8 <USB_SetTurnaroundTime+0x114>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d306      	bcc.n	8005024 <USB_SetTurnaroundTime+0x40>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	4a38      	ldr	r2, [pc, #224]	; (80050fc <USB_SetTurnaroundTime+0x118>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d202      	bcs.n	8005024 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800501e:	230e      	movs	r3, #14
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e051      	b.n	80050c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4a35      	ldr	r2, [pc, #212]	; (80050fc <USB_SetTurnaroundTime+0x118>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d306      	bcc.n	800503a <USB_SetTurnaroundTime+0x56>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4a34      	ldr	r2, [pc, #208]	; (8005100 <USB_SetTurnaroundTime+0x11c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d202      	bcs.n	800503a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005034:	230d      	movs	r3, #13
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e046      	b.n	80050c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4a30      	ldr	r2, [pc, #192]	; (8005100 <USB_SetTurnaroundTime+0x11c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d306      	bcc.n	8005050 <USB_SetTurnaroundTime+0x6c>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4a2f      	ldr	r2, [pc, #188]	; (8005104 <USB_SetTurnaroundTime+0x120>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d802      	bhi.n	8005050 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800504a:	230c      	movs	r3, #12
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	e03b      	b.n	80050c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4a2c      	ldr	r2, [pc, #176]	; (8005104 <USB_SetTurnaroundTime+0x120>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d906      	bls.n	8005066 <USB_SetTurnaroundTime+0x82>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4a2b      	ldr	r2, [pc, #172]	; (8005108 <USB_SetTurnaroundTime+0x124>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d802      	bhi.n	8005066 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005060:	230b      	movs	r3, #11
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	e030      	b.n	80050c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4a27      	ldr	r2, [pc, #156]	; (8005108 <USB_SetTurnaroundTime+0x124>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d906      	bls.n	800507c <USB_SetTurnaroundTime+0x98>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4a26      	ldr	r2, [pc, #152]	; (800510c <USB_SetTurnaroundTime+0x128>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d802      	bhi.n	800507c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005076:	230a      	movs	r3, #10
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	e025      	b.n	80050c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4a23      	ldr	r2, [pc, #140]	; (800510c <USB_SetTurnaroundTime+0x128>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d906      	bls.n	8005092 <USB_SetTurnaroundTime+0xae>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4a22      	ldr	r2, [pc, #136]	; (8005110 <USB_SetTurnaroundTime+0x12c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d202      	bcs.n	8005092 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800508c:	2309      	movs	r3, #9
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e01a      	b.n	80050c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4a1e      	ldr	r2, [pc, #120]	; (8005110 <USB_SetTurnaroundTime+0x12c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d306      	bcc.n	80050a8 <USB_SetTurnaroundTime+0xc4>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <USB_SetTurnaroundTime+0x130>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d802      	bhi.n	80050a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80050a2:	2308      	movs	r3, #8
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	e00f      	b.n	80050c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4a1a      	ldr	r2, [pc, #104]	; (8005114 <USB_SetTurnaroundTime+0x130>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d906      	bls.n	80050be <USB_SetTurnaroundTime+0xda>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4a19      	ldr	r2, [pc, #100]	; (8005118 <USB_SetTurnaroundTime+0x134>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d202      	bcs.n	80050be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80050b8:	2307      	movs	r3, #7
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e004      	b.n	80050c8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80050be:	2306      	movs	r3, #6
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	e001      	b.n	80050c8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80050c4:	2309      	movs	r3, #9
 80050c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	029b      	lsls	r3, r3, #10
 80050dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80050e0:	431a      	orrs	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	00d8acbf 	.word	0x00d8acbf
 80050f8:	00e4e1c0 	.word	0x00e4e1c0
 80050fc:	00f42400 	.word	0x00f42400
 8005100:	01067380 	.word	0x01067380
 8005104:	011a499f 	.word	0x011a499f
 8005108:	01312cff 	.word	0x01312cff
 800510c:	014ca43f 	.word	0x014ca43f
 8005110:	016e3600 	.word	0x016e3600
 8005114:	01a6ab1f 	.word	0x01a6ab1f
 8005118:	01e84800 	.word	0x01e84800

0800511c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f043 0201 	orr.w	r2, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f023 0201 	bic.w	r2, r3, #1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d115      	bne.n	80051ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800518e:	2001      	movs	r0, #1
 8005190:	f7fb fe72 	bl	8000e78 <HAL_Delay>
      ms++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3301      	adds	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f001 f8ab 	bl	80062f6 <USB_GetMode>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d01e      	beq.n	80051e4 <USB_SetCurrentMode+0x84>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b31      	cmp	r3, #49	; 0x31
 80051aa:	d9f0      	bls.n	800518e <USB_SetCurrentMode+0x2e>
 80051ac:	e01a      	b.n	80051e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d115      	bne.n	80051e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051c0:	2001      	movs	r0, #1
 80051c2:	f7fb fe59 	bl	8000e78 <HAL_Delay>
      ms++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3301      	adds	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f001 f892 	bl	80062f6 <USB_GetMode>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <USB_SetCurrentMode+0x84>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b31      	cmp	r3, #49	; 0x31
 80051dc:	d9f0      	bls.n	80051c0 <USB_SetCurrentMode+0x60>
 80051de:	e001      	b.n	80051e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e005      	b.n	80051f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b32      	cmp	r3, #50	; 0x32
 80051e8:	d101      	bne.n	80051ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051f8:	b084      	sub	sp, #16
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b086      	sub	sp, #24
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	e009      	b.n	800522c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	3340      	adds	r3, #64	; 0x40
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	2200      	movs	r2, #0
 8005224:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	3301      	adds	r3, #1
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b0e      	cmp	r3, #14
 8005230:	d9f2      	bls.n	8005218 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d11c      	bne.n	8005272 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005246:	f043 0302 	orr.w	r3, r3, #2
 800524a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e005      	b.n	800527e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005284:	461a      	mov	r2, r3
 8005286:	2300      	movs	r3, #0
 8005288:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800528a:	2103      	movs	r1, #3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f959 	bl	8005544 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005292:	2110      	movs	r1, #16
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f8f1 	bl	800547c <USB_FlushTxFifo>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f91d 	bl	80054e4 <USB_FlushRxFifo>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ba:	461a      	mov	r2, r3
 80052bc:	2300      	movs	r3, #0
 80052be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c6:	461a      	mov	r2, r3
 80052c8:	2300      	movs	r3, #0
 80052ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d2:	461a      	mov	r2, r3
 80052d4:	2300      	movs	r3, #0
 80052d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	e043      	b.n	8005366 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052f4:	d118      	bne.n	8005328 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005308:	461a      	mov	r2, r3
 800530a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	e013      	b.n	800533a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531e:	461a      	mov	r2, r3
 8005320:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e008      	b.n	800533a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	461a      	mov	r2, r3
 8005336:	2300      	movs	r3, #0
 8005338:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005346:	461a      	mov	r2, r3
 8005348:	2300      	movs	r3, #0
 800534a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	461a      	mov	r2, r3
 800535a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800535e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	3301      	adds	r3, #1
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	429a      	cmp	r2, r3
 800536c:	d3b7      	bcc.n	80052de <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800536e:	2300      	movs	r3, #0
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	e043      	b.n	80053fc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800538a:	d118      	bne.n	80053be <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10a      	bne.n	80053a8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539e:	461a      	mov	r2, r3
 80053a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	e013      	b.n	80053d0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	461a      	mov	r2, r3
 80053b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	e008      	b.n	80053d0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ca:	461a      	mov	r2, r3
 80053cc:	2300      	movs	r3, #0
 80053ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053dc:	461a      	mov	r2, r3
 80053de:	2300      	movs	r3, #0
 80053e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ee:	461a      	mov	r2, r3
 80053f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	3301      	adds	r3, #1
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	429a      	cmp	r2, r3
 8005402:	d3b7      	bcc.n	8005374 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005416:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005424:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f043 0210 	orr.w	r2, r3, #16
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	4b10      	ldr	r3, [pc, #64]	; (8005478 <USB_DevInit+0x280>)
 8005438:	4313      	orrs	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f043 0208 	orr.w	r2, r3, #8
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005452:	2b01      	cmp	r3, #1
 8005454:	d107      	bne.n	8005466 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800545e:	f043 0304 	orr.w	r3, r3, #4
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005466:	7dfb      	ldrb	r3, [r7, #23]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005472:	b004      	add	sp, #16
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	803c3800 	.word	0x803c3800

0800547c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3301      	adds	r3, #1
 800548e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <USB_FlushTxFifo+0x64>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d901      	bls.n	800549c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e01b      	b.n	80054d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	daf2      	bge.n	800548a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	019b      	lsls	r3, r3, #6
 80054ac:	f043 0220 	orr.w	r2, r3, #32
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3301      	adds	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a08      	ldr	r2, [pc, #32]	; (80054e0 <USB_FlushTxFifo+0x64>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d901      	bls.n	80054c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e006      	b.n	80054d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d0f0      	beq.n	80054b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	00030d40 	.word	0x00030d40

080054e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4a11      	ldr	r2, [pc, #68]	; (8005540 <USB_FlushRxFifo+0x5c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d901      	bls.n	8005502 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e018      	b.n	8005534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	daf2      	bge.n	80054f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2210      	movs	r2, #16
 8005512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3301      	adds	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4a08      	ldr	r2, [pc, #32]	; (8005540 <USB_FlushRxFifo+0x5c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e006      	b.n	8005534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2b10      	cmp	r3, #16
 8005530:	d0f0      	beq.n	8005514 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	00030d40 	.word	0x00030d40

08005544 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005564:	4313      	orrs	r3, r2
 8005566:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005576:	b480      	push	{r7}
 8005578:	b087      	sub	sp, #28
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 0306 	and.w	r3, r3, #6
 800558e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d002      	beq.n	800559c <USB_GetDevSpeed+0x26>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b06      	cmp	r3, #6
 800559a:	d102      	bne.n	80055a2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800559c:	2302      	movs	r3, #2
 800559e:	75fb      	strb	r3, [r7, #23]
 80055a0:	e001      	b.n	80055a6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80055a2:	230f      	movs	r3, #15
 80055a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	785b      	ldrb	r3, [r3, #1]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d13a      	bne.n	8005646 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	2101      	movs	r1, #1
 80055e2:	fa01 f303 	lsl.w	r3, r1, r3
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	68f9      	ldr	r1, [r7, #12]
 80055ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d155      	bne.n	80056b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	791b      	ldrb	r3, [r3, #4]
 8005622:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005624:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	059b      	lsls	r3, r3, #22
 800562a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800562c:	4313      	orrs	r3, r2
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800563e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	e036      	b.n	80056b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564c:	69da      	ldr	r2, [r3, #28]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	2101      	movs	r1, #1
 8005658:	fa01 f303 	lsl.w	r3, r1, r3
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	68f9      	ldr	r1, [r7, #12]
 8005660:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005664:	4313      	orrs	r3, r2
 8005666:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d11a      	bne.n	80056b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	791b      	ldrb	r3, [r3, #4]
 8005698:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800569a:	430b      	orrs	r3, r1
 800569c:	4313      	orrs	r3, r2
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	0151      	lsls	r1, r2, #5
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	440a      	add	r2, r1
 80056a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d161      	bne.n	80057a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056f6:	d11f      	bne.n	8005738 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	440a      	add	r2, r1
 800570e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005712:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005716:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005736:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	2101      	movs	r1, #1
 800574a:	fa01 f303 	lsl.w	r3, r1, r3
 800574e:	b29b      	uxth	r3, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	68f9      	ldr	r1, [r7, #12]
 8005754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005758:	4013      	ands	r3, r2
 800575a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	2101      	movs	r1, #1
 800576e:	fa01 f303 	lsl.w	r3, r1, r3
 8005772:	b29b      	uxth	r3, r3
 8005774:	43db      	mvns	r3, r3
 8005776:	68f9      	ldr	r1, [r7, #12]
 8005778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800577c:	4013      	ands	r3, r2
 800577e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	0159      	lsls	r1, r3, #5
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	440b      	add	r3, r1
 8005796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579a:	4619      	mov	r1, r3
 800579c:	4b35      	ldr	r3, [pc, #212]	; (8005874 <USB_DeactivateEndpoint+0x1b0>)
 800579e:	4013      	ands	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]
 80057a2:	e060      	b.n	8005866 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ba:	d11f      	bne.n	80057fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	2101      	movs	r1, #1
 800580e:	fa01 f303 	lsl.w	r3, r1, r3
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	43db      	mvns	r3, r3
 8005816:	68f9      	ldr	r1, [r7, #12]
 8005818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800581c:	4013      	ands	r3, r2
 800581e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	2101      	movs	r1, #1
 8005832:	fa01 f303 	lsl.w	r3, r1, r3
 8005836:	041b      	lsls	r3, r3, #16
 8005838:	43db      	mvns	r3, r3
 800583a:	68f9      	ldr	r1, [r7, #12]
 800583c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005840:	4013      	ands	r3, r2
 8005842:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	0159      	lsls	r1, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	440b      	add	r3, r1
 800585a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585e:	4619      	mov	r1, r3
 8005860:	4b05      	ldr	r3, [pc, #20]	; (8005878 <USB_DeactivateEndpoint+0x1b4>)
 8005862:	4013      	ands	r3, r2
 8005864:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	ec337800 	.word	0xec337800
 8005878:	eff37800 	.word	0xeff37800

0800587c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	2b01      	cmp	r3, #1
 8005896:	f040 8128 	bne.w	8005aea <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d132      	bne.n	8005908 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	0151      	lsls	r1, r2, #5
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	440a      	add	r2, r1
 80058dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005900:	0cdb      	lsrs	r3, r3, #19
 8005902:	04db      	lsls	r3, r3, #19
 8005904:	6113      	str	r3, [r2, #16]
 8005906:	e092      	b.n	8005a2e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	440a      	add	r2, r1
 800591e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005922:	0cdb      	lsrs	r3, r3, #19
 8005924:	04db      	lsls	r3, r3, #19
 8005926:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005942:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005946:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800594a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d11a      	bne.n	8005988 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	429a      	cmp	r2, r3
 800595c:	d903      	bls.n	8005966 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	440a      	add	r2, r1
 800597c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005984:	6113      	str	r3, [r2, #16]
 8005986:	e01b      	b.n	80059c0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6919      	ldr	r1, [r3, #16]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	440b      	add	r3, r1
 80059a0:	1e59      	subs	r1, r3, #1
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80059aa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059ac:	4b8d      	ldr	r3, [pc, #564]	; (8005be4 <USB_EPStartXfer+0x368>)
 80059ae:	400b      	ands	r3, r1
 80059b0:	6939      	ldr	r1, [r7, #16]
 80059b2:	0148      	lsls	r0, r1, #5
 80059b4:	6979      	ldr	r1, [r7, #20]
 80059b6:	4401      	add	r1, r0
 80059b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059bc:	4313      	orrs	r3, r2
 80059be:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059d6:	6939      	ldr	r1, [r7, #16]
 80059d8:	0148      	lsls	r0, r1, #5
 80059da:	6979      	ldr	r1, [r7, #20]
 80059dc:	4401      	add	r1, r0
 80059de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059e2:	4313      	orrs	r3, r2
 80059e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	791b      	ldrb	r3, [r3, #4]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d11f      	bne.n	8005a2e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a2c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a4c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	791b      	ldrb	r3, [r3, #4]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d015      	beq.n	8005a82 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 8139 	beq.w	8005cd2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	2101      	movs	r1, #1
 8005a72:	fa01 f303 	lsl.w	r3, r1, r3
 8005a76:	6979      	ldr	r1, [r7, #20]
 8005a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	634b      	str	r3, [r1, #52]	; 0x34
 8005a80:	e127      	b.n	8005cd2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d110      	bne.n	8005ab4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	e00f      	b.n	8005ad4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	68d9      	ldr	r1, [r3, #12]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781a      	ldrb	r2, [r3, #0]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f9a6 	bl	8005e34 <USB_WritePacket>
 8005ae8:	e0f3      	b.n	8005cd2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b04:	0cdb      	lsrs	r3, r3, #19
 8005b06:	04db      	lsls	r3, r3, #19
 8005b08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b2c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d12f      	bne.n	8005b94 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b62:	6939      	ldr	r1, [r7, #16]
 8005b64:	0148      	lsls	r0, r1, #5
 8005b66:	6979      	ldr	r1, [r7, #20]
 8005b68:	4401      	add	r1, r0
 8005b6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b90:	6113      	str	r3, [r2, #16]
 8005b92:	e061      	b.n	8005c58 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d125      	bne.n	8005be8 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba8:	691a      	ldr	r2, [r3, #16]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bb2:	6939      	ldr	r1, [r7, #16]
 8005bb4:	0148      	lsls	r0, r1, #5
 8005bb6:	6979      	ldr	r1, [r7, #20]
 8005bb8:	4401      	add	r1, r0
 8005bba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005be0:	6113      	str	r3, [r2, #16]
 8005be2:	e039      	b.n	8005c58 <USB_EPStartXfer+0x3dc>
 8005be4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	1e5a      	subs	r2, r3, #1
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfc:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	89fa      	ldrh	r2, [r7, #14]
 8005c04:	fb03 f202 	mul.w	r2, r3, r2
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	89fb      	ldrh	r3, [r7, #14]
 8005c1c:	04d9      	lsls	r1, r3, #19
 8005c1e:	4b2f      	ldr	r3, [pc, #188]	; (8005cdc <USB_EPStartXfer+0x460>)
 8005c20:	400b      	ands	r3, r1
 8005c22:	6939      	ldr	r1, [r7, #16]
 8005c24:	0148      	lsls	r0, r1, #5
 8005c26:	6979      	ldr	r1, [r7, #20]
 8005c28:	4401      	add	r1, r0
 8005c2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c48:	6939      	ldr	r1, [r7, #16]
 8005c4a:	0148      	lsls	r0, r1, #5
 8005c4c:	6979      	ldr	r1, [r7, #20]
 8005c4e:	4401      	add	r1, r0
 8005c50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c54:	4313      	orrs	r3, r2
 8005c56:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	791b      	ldrb	r3, [r3, #4]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d128      	bne.n	8005cb2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d110      	bne.n	8005c92 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	0151      	lsls	r1, r2, #5
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	440a      	add	r2, r1
 8005c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	e00f      	b.n	8005cb2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ccc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	1ff80000 	.word	0x1ff80000

08005ce0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d14a      	bne.n	8005d94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d16:	f040 8086 	bne.w	8005e26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	7812      	ldrb	r2, [r2, #0]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3301      	adds	r3, #1
 8005d66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d902      	bls.n	8005d78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	75fb      	strb	r3, [r7, #23]
          break;
 8005d76:	e056      	b.n	8005e26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d90:	d0e7      	beq.n	8005d62 <USB_EPStopXfer+0x82>
 8005d92:	e048      	b.n	8005e26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dac:	d13b      	bne.n	8005e26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	7812      	ldrb	r2, [r2, #0]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dd0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	7812      	ldrb	r2, [r2, #0]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005df4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d902      	bls.n	8005e0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	75fb      	strb	r3, [r7, #23]
          break;
 8005e0a:	e00c      	b.n	8005e26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e24:	d0e7      	beq.n	8005df6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b089      	sub	sp, #36	; 0x24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4611      	mov	r1, r2
 8005e40:	461a      	mov	r2, r3
 8005e42:	460b      	mov	r3, r1
 8005e44:	71fb      	strb	r3, [r7, #7]
 8005e46:	4613      	mov	r3, r2
 8005e48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005e52:	88bb      	ldrh	r3, [r7, #4]
 8005e54:	3303      	adds	r3, #3
 8005e56:	089b      	lsrs	r3, r3, #2
 8005e58:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61bb      	str	r3, [r7, #24]
 8005e5e:	e018      	b.n	8005e92 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	031a      	lsls	r2, r3, #12
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	3301      	adds	r3, #1
 8005e78:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	3301      	adds	r3, #1
 8005e84:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d3e2      	bcc.n	8005e60 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3724      	adds	r7, #36	; 0x24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b08b      	sub	sp, #44	; 0x2c
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	089b      	lsrs	r3, r3, #2
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	623b      	str	r3, [r7, #32]
 8005ed2:	e014      	b.n	8005efe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	3301      	adds	r3, #1
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	3301      	adds	r3, #1
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	3301      	adds	r3, #1
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	6a3a      	ldr	r2, [r7, #32]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d3e6      	bcc.n	8005ed4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f06:	8bfb      	ldrh	r3, [r7, #30]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01e      	beq.n	8005f4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f16:	461a      	mov	r2, r3
 8005f18:	f107 0310 	add.w	r3, r7, #16
 8005f1c:	6812      	ldr	r2, [r2, #0]
 8005f1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	701a      	strb	r2, [r3, #0]
      i++;
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	3301      	adds	r3, #1
 8005f36:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f3e:	8bfb      	ldrh	r3, [r7, #30]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f44:	8bfb      	ldrh	r3, [r7, #30]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1ea      	bne.n	8005f20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	372c      	adds	r7, #44	; 0x2c
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d12c      	bne.n	8005fce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	db12      	blt.n	8005fac <USB_EPSetStall+0x54>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00f      	beq.n	8005fac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005faa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	e02b      	b.n	8006026 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	db12      	blt.n	8006006 <USB_EPSetStall+0xae>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00f      	beq.n	8006006 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006000:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006004:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006024:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d128      	bne.n	80060a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800606e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	791b      	ldrb	r3, [r3, #4]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d003      	beq.n	8006080 <USB_EPClearStall+0x4c>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	791b      	ldrb	r3, [r3, #4]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d138      	bne.n	80060f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	e027      	b.n	80060f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	791b      	ldrb	r3, [r3, #4]
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d003      	beq.n	80060d2 <USB_EPClearStall+0x9e>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	791b      	ldrb	r3, [r3, #4]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d10f      	bne.n	80060f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800611e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006122:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006134:	68f9      	ldr	r1, [r7, #12]
 8006136:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800613a:	4313      	orrs	r3, r2
 800613c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800617a:	f023 0302 	bic.w	r3, r3, #2
 800617e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061a8:	f023 0303 	bic.w	r3, r3, #3
 80061ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061bc:	f043 0302 	orr.w	r3, r3, #2
 80061c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	4013      	ands	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061e8:	68fb      	ldr	r3, [r7, #12]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	4013      	ands	r3, r2
 8006218:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	0c1b      	lsrs	r3, r3, #16
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800622a:	b480      	push	{r7}
 800622c:	b085      	sub	sp, #20
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	4013      	ands	r3, r2
 800624c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	b29b      	uxth	r3, r3
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4013      	ands	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800628c:	68bb      	ldr	r3, [r7, #8]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800629a:	b480      	push	{r7}
 800629c:	b087      	sub	sp, #28
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	460b      	mov	r3, r1
 80062a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ca:	01db      	lsls	r3, r3, #7
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4013      	ands	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062e8:	68bb      	ldr	r3, [r7, #8]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	f003 0301 	and.w	r3, r3, #1
}
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006330:	f023 0307 	bic.w	r3, r3, #7
 8006334:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006348:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	333c      	adds	r3, #60	; 0x3c
 800636a:	3304      	adds	r3, #4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	4a1c      	ldr	r2, [pc, #112]	; (80063e4 <USB_EP0_OutStart+0x8c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d90a      	bls.n	800638e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006388:	d101      	bne.n	800638e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e024      	b.n	80063d8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	461a      	mov	r2, r3
 8006396:	2300      	movs	r3, #0
 8006398:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063bc:	f043 0318 	orr.w	r3, r3, #24
 80063c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80063d4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	4f54300a 	.word	0x4f54300a

080063e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3301      	adds	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4a13      	ldr	r2, [pc, #76]	; (800644c <USB_CoreReset+0x64>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e01b      	b.n	800643e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	daf2      	bge.n	80063f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f043 0201 	orr.w	r2, r3, #1
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3301      	adds	r3, #1
 8006422:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4a09      	ldr	r2, [pc, #36]	; (800644c <USB_CoreReset+0x64>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d901      	bls.n	8006430 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e006      	b.n	800643e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b01      	cmp	r3, #1
 800643a:	d0f0      	beq.n	800641e <USB_CoreReset+0x36>

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	00030d40 	.word	0x00030d40

08006450 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800645c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006460:	f005 fdc2 	bl	800bfe8 <USBD_static_malloc>
 8006464:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d109      	bne.n	8006480 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	32b0      	adds	r2, #176	; 0xb0
 8006476:	2100      	movs	r1, #0
 8006478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800647c:	2302      	movs	r3, #2
 800647e:	e0d4      	b.n	800662a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006480:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006484:	2100      	movs	r1, #0
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f005 fed8 	bl	800c23c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	32b0      	adds	r2, #176	; 0xb0
 8006496:	68f9      	ldr	r1, [r7, #12]
 8006498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	32b0      	adds	r2, #176	; 0xb0
 80064a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	7c1b      	ldrb	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d138      	bne.n	800652a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064b8:	4b5e      	ldr	r3, [pc, #376]	; (8006634 <USBD_CDC_Init+0x1e4>)
 80064ba:	7819      	ldrb	r1, [r3, #0]
 80064bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064c0:	2202      	movs	r2, #2
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f005 fb7c 	bl	800bbc0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064c8:	4b5a      	ldr	r3, [pc, #360]	; (8006634 <USBD_CDC_Init+0x1e4>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	f003 020f 	and.w	r2, r3, #15
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	3324      	adds	r3, #36	; 0x24
 80064de:	2201      	movs	r2, #1
 80064e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80064e2:	4b55      	ldr	r3, [pc, #340]	; (8006638 <USBD_CDC_Init+0x1e8>)
 80064e4:	7819      	ldrb	r1, [r3, #0]
 80064e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064ea:	2202      	movs	r2, #2
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f005 fb67 	bl	800bbc0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064f2:	4b51      	ldr	r3, [pc, #324]	; (8006638 <USBD_CDC_Init+0x1e8>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	f003 020f 	and.w	r2, r3, #15
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800650a:	2201      	movs	r2, #1
 800650c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800650e:	4b4b      	ldr	r3, [pc, #300]	; (800663c <USBD_CDC_Init+0x1ec>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	f003 020f 	and.w	r2, r3, #15
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	3326      	adds	r3, #38	; 0x26
 8006524:	2210      	movs	r2, #16
 8006526:	801a      	strh	r2, [r3, #0]
 8006528:	e035      	b.n	8006596 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800652a:	4b42      	ldr	r3, [pc, #264]	; (8006634 <USBD_CDC_Init+0x1e4>)
 800652c:	7819      	ldrb	r1, [r3, #0]
 800652e:	2340      	movs	r3, #64	; 0x40
 8006530:	2202      	movs	r2, #2
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f005 fb44 	bl	800bbc0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006538:	4b3e      	ldr	r3, [pc, #248]	; (8006634 <USBD_CDC_Init+0x1e4>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	f003 020f 	and.w	r2, r3, #15
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	3324      	adds	r3, #36	; 0x24
 800654e:	2201      	movs	r2, #1
 8006550:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006552:	4b39      	ldr	r3, [pc, #228]	; (8006638 <USBD_CDC_Init+0x1e8>)
 8006554:	7819      	ldrb	r1, [r3, #0]
 8006556:	2340      	movs	r3, #64	; 0x40
 8006558:	2202      	movs	r2, #2
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f005 fb30 	bl	800bbc0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006560:	4b35      	ldr	r3, [pc, #212]	; (8006638 <USBD_CDC_Init+0x1e8>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f003 020f 	and.w	r2, r3, #15
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	440b      	add	r3, r1
 8006574:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006578:	2201      	movs	r2, #1
 800657a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800657c:	4b2f      	ldr	r3, [pc, #188]	; (800663c <USBD_CDC_Init+0x1ec>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f003 020f 	and.w	r2, r3, #15
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	440b      	add	r3, r1
 8006590:	3326      	adds	r3, #38	; 0x26
 8006592:	2210      	movs	r2, #16
 8006594:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006596:	4b29      	ldr	r3, [pc, #164]	; (800663c <USBD_CDC_Init+0x1ec>)
 8006598:	7819      	ldrb	r1, [r3, #0]
 800659a:	2308      	movs	r3, #8
 800659c:	2203      	movs	r2, #3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f005 fb0e 	bl	800bbc0 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80065a4:	4b25      	ldr	r3, [pc, #148]	; (800663c <USBD_CDC_Init+0x1ec>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	f003 020f 	and.w	r2, r3, #15
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	3324      	adds	r3, #36	; 0x24
 80065ba:	2201      	movs	r2, #1
 80065bc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	33b0      	adds	r3, #176	; 0xb0
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80065f4:	2302      	movs	r3, #2
 80065f6:	e018      	b.n	800662a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	7c1b      	ldrb	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006600:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <USBD_CDC_Init+0x1e8>)
 8006602:	7819      	ldrb	r1, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800660a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f005 fc50 	bl	800beb4 <USBD_LL_PrepareReceive>
 8006614:	e008      	b.n	8006628 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006616:	4b08      	ldr	r3, [pc, #32]	; (8006638 <USBD_CDC_Init+0x1e8>)
 8006618:	7819      	ldrb	r1, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006620:	2340      	movs	r3, #64	; 0x40
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f005 fc46 	bl	800beb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000093 	.word	0x20000093
 8006638:	20000094 	.word	0x20000094
 800663c:	20000095 	.word	0x20000095

08006640 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800664c:	4b3a      	ldr	r3, [pc, #232]	; (8006738 <USBD_CDC_DeInit+0xf8>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f005 faf2 	bl	800bc3c <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006658:	4b37      	ldr	r3, [pc, #220]	; (8006738 <USBD_CDC_DeInit+0xf8>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f003 020f 	and.w	r2, r3, #15
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	3324      	adds	r3, #36	; 0x24
 800666e:	2200      	movs	r2, #0
 8006670:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006672:	4b32      	ldr	r3, [pc, #200]	; (800673c <USBD_CDC_DeInit+0xfc>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f005 fadf 	bl	800bc3c <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800667e:	4b2f      	ldr	r3, [pc, #188]	; (800673c <USBD_CDC_DeInit+0xfc>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	f003 020f 	and.w	r2, r3, #15
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	440b      	add	r3, r1
 8006692:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006696:	2200      	movs	r2, #0
 8006698:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800669a:	4b29      	ldr	r3, [pc, #164]	; (8006740 <USBD_CDC_DeInit+0x100>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f005 facb 	bl	800bc3c <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80066a6:	4b26      	ldr	r3, [pc, #152]	; (8006740 <USBD_CDC_DeInit+0x100>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	f003 020f 	and.w	r2, r3, #15
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	440b      	add	r3, r1
 80066ba:	3324      	adds	r3, #36	; 0x24
 80066bc:	2200      	movs	r2, #0
 80066be:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80066c0:	4b1f      	ldr	r3, [pc, #124]	; (8006740 <USBD_CDC_DeInit+0x100>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	f003 020f 	and.w	r2, r3, #15
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	3326      	adds	r3, #38	; 0x26
 80066d6:	2200      	movs	r2, #0
 80066d8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	32b0      	adds	r2, #176	; 0xb0
 80066e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01f      	beq.n	800672c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	33b0      	adds	r3, #176	; 0xb0
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	32b0      	adds	r2, #176	; 0xb0
 800670a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670e:	4618      	mov	r0, r3
 8006710:	f005 fc78 	bl	800c004 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	32b0      	adds	r2, #176	; 0xb0
 800671e:	2100      	movs	r1, #0
 8006720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000093 	.word	0x20000093
 800673c:	20000094 	.word	0x20000094
 8006740:	20000095 	.word	0x20000095

08006744 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	32b0      	adds	r2, #176	; 0xb0
 8006758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006770:	2303      	movs	r3, #3
 8006772:	e0bf      	b.n	80068f4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800677c:	2b00      	cmp	r3, #0
 800677e:	d050      	beq.n	8006822 <USBD_CDC_Setup+0xde>
 8006780:	2b20      	cmp	r3, #32
 8006782:	f040 80af 	bne.w	80068e4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	88db      	ldrh	r3, [r3, #6]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d03a      	beq.n	8006804 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	b25b      	sxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	da1b      	bge.n	80067d0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	33b0      	adds	r3, #176	; 0xb0
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80067ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	88d2      	ldrh	r2, [r2, #6]
 80067b4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	88db      	ldrh	r3, [r3, #6]
 80067ba:	2b07      	cmp	r3, #7
 80067bc:	bf28      	it	cs
 80067be:	2307      	movcs	r3, #7
 80067c0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	89fa      	ldrh	r2, [r7, #14]
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fdb3 	bl	8008334 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80067ce:	e090      	b.n	80068f2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	785a      	ldrb	r2, [r3, #1]
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	88db      	ldrh	r3, [r3, #6]
 80067de:	2b3f      	cmp	r3, #63	; 0x3f
 80067e0:	d803      	bhi.n	80067ea <USBD_CDC_Setup+0xa6>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	88db      	ldrh	r3, [r3, #6]
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	e000      	b.n	80067ec <USBD_CDC_Setup+0xa8>
 80067ea:	2240      	movs	r2, #64	; 0x40
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80067f2:	6939      	ldr	r1, [r7, #16]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80067fa:	461a      	mov	r2, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 fdc5 	bl	800838c <USBD_CtlPrepareRx>
      break;
 8006802:	e076      	b.n	80068f2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	33b0      	adds	r3, #176	; 0xb0
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	7850      	ldrb	r0, [r2, #1]
 800681a:	2200      	movs	r2, #0
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	4798      	blx	r3
      break;
 8006820:	e067      	b.n	80068f2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	785b      	ldrb	r3, [r3, #1]
 8006826:	2b0b      	cmp	r3, #11
 8006828:	d851      	bhi.n	80068ce <USBD_CDC_Setup+0x18a>
 800682a:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <USBD_CDC_Setup+0xec>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006861 	.word	0x08006861
 8006834:	080068dd 	.word	0x080068dd
 8006838:	080068cf 	.word	0x080068cf
 800683c:	080068cf 	.word	0x080068cf
 8006840:	080068cf 	.word	0x080068cf
 8006844:	080068cf 	.word	0x080068cf
 8006848:	080068cf 	.word	0x080068cf
 800684c:	080068cf 	.word	0x080068cf
 8006850:	080068cf 	.word	0x080068cf
 8006854:	080068cf 	.word	0x080068cf
 8006858:	0800688b 	.word	0x0800688b
 800685c:	080068b5 	.word	0x080068b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b03      	cmp	r3, #3
 800686a:	d107      	bne.n	800687c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800686c:	f107 030a 	add.w	r3, r7, #10
 8006870:	2202      	movs	r2, #2
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 fd5d 	bl	8008334 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800687a:	e032      	b.n	80068e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f001 fce7 	bl	8008252 <USBD_CtlError>
            ret = USBD_FAIL;
 8006884:	2303      	movs	r3, #3
 8006886:	75fb      	strb	r3, [r7, #23]
          break;
 8006888:	e02b      	b.n	80068e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b03      	cmp	r3, #3
 8006894:	d107      	bne.n	80068a6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006896:	f107 030d 	add.w	r3, r7, #13
 800689a:	2201      	movs	r2, #1
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 fd48 	bl	8008334 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068a4:	e01d      	b.n	80068e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 fcd2 	bl	8008252 <USBD_CtlError>
            ret = USBD_FAIL;
 80068ae:	2303      	movs	r3, #3
 80068b0:	75fb      	strb	r3, [r7, #23]
          break;
 80068b2:	e016      	b.n	80068e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b03      	cmp	r3, #3
 80068be:	d00f      	beq.n	80068e0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 fcc5 	bl	8008252 <USBD_CtlError>
            ret = USBD_FAIL;
 80068c8:	2303      	movs	r3, #3
 80068ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80068cc:	e008      	b.n	80068e0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 fcbe 	bl	8008252 <USBD_CtlError>
          ret = USBD_FAIL;
 80068d6:	2303      	movs	r3, #3
 80068d8:	75fb      	strb	r3, [r7, #23]
          break;
 80068da:	e002      	b.n	80068e2 <USBD_CDC_Setup+0x19e>
          break;
 80068dc:	bf00      	nop
 80068de:	e008      	b.n	80068f2 <USBD_CDC_Setup+0x1ae>
          break;
 80068e0:	bf00      	nop
      }
      break;
 80068e2:	e006      	b.n	80068f2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 fcb3 	bl	8008252 <USBD_CtlError>
      ret = USBD_FAIL;
 80068ec:	2303      	movs	r3, #3
 80068ee:	75fb      	strb	r3, [r7, #23]
      break;
 80068f0:	bf00      	nop
  }

  return (uint8_t)ret;
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800690e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	32b0      	adds	r2, #176	; 0xb0
 800691a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006922:	2303      	movs	r3, #3
 8006924:	e065      	b.n	80069f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	32b0      	adds	r2, #176	; 0xb0
 8006930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006934:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006936:	78fb      	ldrb	r3, [r7, #3]
 8006938:	f003 020f 	and.w	r2, r3, #15
 800693c:	6879      	ldr	r1, [r7, #4]
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	440b      	add	r3, r1
 8006948:	3318      	adds	r3, #24
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d02f      	beq.n	80069b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	f003 020f 	and.w	r2, r3, #15
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	440b      	add	r3, r1
 8006962:	3318      	adds	r3, #24
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	f003 010f 	and.w	r1, r3, #15
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	460b      	mov	r3, r1
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	440b      	add	r3, r1
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4403      	add	r3, r0
 8006978:	3344      	adds	r3, #68	; 0x44
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006980:	fb01 f303 	mul.w	r3, r1, r3
 8006984:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006986:	2b00      	cmp	r3, #0
 8006988:	d112      	bne.n	80069b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	f003 020f 	and.w	r2, r3, #15
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	440b      	add	r3, r1
 800699c:	3318      	adds	r3, #24
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069a2:	78f9      	ldrb	r1, [r7, #3]
 80069a4:	2300      	movs	r3, #0
 80069a6:	2200      	movs	r2, #0
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f005 fa4b 	bl	800be44 <USBD_LL_Transmit>
 80069ae:	e01f      	b.n	80069f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	33b0      	adds	r3, #176	; 0xb0
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d010      	beq.n	80069f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	33b0      	adds	r3, #176	; 0xb0
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80069ec:	78fa      	ldrb	r2, [r7, #3]
 80069ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	460b      	mov	r3, r1
 8006a04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	32b0      	adds	r2, #176	; 0xb0
 8006a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a14:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	32b0      	adds	r2, #176	; 0xb0
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e01a      	b.n	8006a62 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f005 fa77 	bl	800bf24 <USBD_LL_GetRxDataSize>
 8006a36:	4602      	mov	r2, r0
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	33b0      	adds	r3, #176	; 0xb0
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	32b0      	adds	r2, #176	; 0xb0
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e025      	b.n	8006ad8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	33b0      	adds	r3, #176	; 0xb0
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d01a      	beq.n	8006ad6 <USBD_CDC_EP0_RxReady+0x6c>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006aa6:	2bff      	cmp	r3, #255	; 0xff
 8006aa8:	d015      	beq.n	8006ad6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	33b0      	adds	r3, #176	; 0xb0
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006ac2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006aca:	b292      	uxth	r2, r2
 8006acc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	22ff      	movs	r2, #255	; 0xff
 8006ad2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ae8:	2182      	movs	r1, #130	; 0x82
 8006aea:	4818      	ldr	r0, [pc, #96]	; (8006b4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006aec:	f000 fd4f 	bl	800758e <USBD_GetEpDesc>
 8006af0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006af2:	2101      	movs	r1, #1
 8006af4:	4815      	ldr	r0, [pc, #84]	; (8006b4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006af6:	f000 fd4a 	bl	800758e <USBD_GetEpDesc>
 8006afa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006afc:	2181      	movs	r1, #129	; 0x81
 8006afe:	4813      	ldr	r0, [pc, #76]	; (8006b4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b00:	f000 fd45 	bl	800758e <USBD_GetEpDesc>
 8006b04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2210      	movs	r2, #16
 8006b10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d006      	beq.n	8006b26 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b20:	711a      	strb	r2, [r3, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d006      	beq.n	8006b3a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b34:	711a      	strb	r2, [r3, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2243      	movs	r2, #67	; 0x43
 8006b3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b40:	4b02      	ldr	r3, [pc, #8]	; (8006b4c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000050 	.word	0x20000050

08006b50 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b58:	2182      	movs	r1, #130	; 0x82
 8006b5a:	4818      	ldr	r0, [pc, #96]	; (8006bbc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b5c:	f000 fd17 	bl	800758e <USBD_GetEpDesc>
 8006b60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b62:	2101      	movs	r1, #1
 8006b64:	4815      	ldr	r0, [pc, #84]	; (8006bbc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b66:	f000 fd12 	bl	800758e <USBD_GetEpDesc>
 8006b6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b6c:	2181      	movs	r1, #129	; 0x81
 8006b6e:	4813      	ldr	r0, [pc, #76]	; (8006bbc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b70:	f000 fd0d 	bl	800758e <USBD_GetEpDesc>
 8006b74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2210      	movs	r2, #16
 8006b80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	711a      	strb	r2, [r3, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f042 0202 	orr.w	r2, r2, #2
 8006b94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d006      	beq.n	8006baa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	711a      	strb	r2, [r3, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f042 0202 	orr.w	r2, r2, #2
 8006ba8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2243      	movs	r2, #67	; 0x43
 8006bae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bb0:	4b02      	ldr	r3, [pc, #8]	; (8006bbc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000050 	.word	0x20000050

08006bc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bc8:	2182      	movs	r1, #130	; 0x82
 8006bca:	4818      	ldr	r0, [pc, #96]	; (8006c2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006bcc:	f000 fcdf 	bl	800758e <USBD_GetEpDesc>
 8006bd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	4815      	ldr	r0, [pc, #84]	; (8006c2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006bd6:	f000 fcda 	bl	800758e <USBD_GetEpDesc>
 8006bda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bdc:	2181      	movs	r1, #129	; 0x81
 8006bde:	4813      	ldr	r0, [pc, #76]	; (8006c2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006be0:	f000 fcd5 	bl	800758e <USBD_GetEpDesc>
 8006be4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2210      	movs	r2, #16
 8006bf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d006      	beq.n	8006c06 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c00:	711a      	strb	r2, [r3, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c14:	711a      	strb	r2, [r3, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2243      	movs	r2, #67	; 0x43
 8006c1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c20:	4b02      	ldr	r3, [pc, #8]	; (8006c2c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000050 	.word	0x20000050

08006c30 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	220a      	movs	r2, #10
 8006c3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c3e:	4b03      	ldr	r3, [pc, #12]	; (8006c4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	2000000c 	.word	0x2000000c

08006c50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e009      	b.n	8006c78 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	33b0      	adds	r3, #176	; 0xb0
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	32b0      	adds	r2, #176	; 0xb0
 8006c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e008      	b.n	8006cbc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	32b0      	adds	r2, #176	; 0xb0
 8006cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e004      	b.n	8006cf6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	32b0      	adds	r2, #176	; 0xb0
 8006d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e025      	b.n	8006d76 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d11f      	bne.n	8006d74 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006d3c:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <USBD_CDC_TransmitPacket+0x7c>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	f003 020f 	and.w	r2, r3, #15
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4403      	add	r3, r0
 8006d56:	3318      	adds	r3, #24
 8006d58:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006d5a:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <USBD_CDC_TransmitPacket+0x7c>)
 8006d5c:	7819      	ldrb	r1, [r3, #0]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f005 f86a 	bl	800be44 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000093 	.word	0x20000093

08006d84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	32b0      	adds	r2, #176	; 0xb0
 8006d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	32b0      	adds	r2, #176	; 0xb0
 8006da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e018      	b.n	8006de4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	7c1b      	ldrb	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10a      	bne.n	8006dd0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006dba:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <USBD_CDC_ReceivePacket+0x68>)
 8006dbc:	7819      	ldrb	r1, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f005 f873 	bl	800beb4 <USBD_LL_PrepareReceive>
 8006dce:	e008      	b.n	8006de2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006dd0:	4b06      	ldr	r3, [pc, #24]	; (8006dec <USBD_CDC_ReceivePacket+0x68>)
 8006dd2:	7819      	ldrb	r1, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dda:	2340      	movs	r3, #64	; 0x40
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f005 f869 	bl	800beb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20000094 	.word	0x20000094

08006df0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e01f      	b.n	8006e48 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	79fa      	ldrb	r2, [r7, #7]
 8006e3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f004 fe41 	bl	800bac4 <USBD_LL_Init>
 8006e42:	4603      	mov	r3, r0
 8006e44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e025      	b.n	8006eb4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	32ae      	adds	r2, #174	; 0xae
 8006e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00f      	beq.n	8006ea4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	32ae      	adds	r2, #174	; 0xae
 8006e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	f107 020e 	add.w	r2, r7, #14
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4798      	blx	r3
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f004 fe49 	bl	800bb5c <USBD_LL_Start>
 8006eca:	4603      	mov	r3, r0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006edc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d009      	beq.n	8006f18 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	78fa      	ldrb	r2, [r7, #3]
 8006f0e:	4611      	mov	r1, r2
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	4798      	blx	r3
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	78fa      	ldrb	r2, [r7, #3]
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	4798      	blx	r3
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f001 f938 	bl	80081de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f8a:	f003 031f 	and.w	r3, r3, #31
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d01a      	beq.n	8006fc8 <USBD_LL_SetupStage+0x72>
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d822      	bhi.n	8006fdc <USBD_LL_SetupStage+0x86>
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <USBD_LL_SetupStage+0x4a>
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d00a      	beq.n	8006fb4 <USBD_LL_SetupStage+0x5e>
 8006f9e:	e01d      	b.n	8006fdc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fb65 	bl	8007678 <USBD_StdDevReq>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb2:	e020      	b.n	8006ff6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fbcd 	bl	800775c <USBD_StdItfReq>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc6:	e016      	b.n	8006ff6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fc2f 	bl	8007834 <USBD_StdEPReq>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006fda:	e00c      	b.n	8006ff6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fe2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f004 fe5c 	bl	800bca8 <USBD_LL_StallEP>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff4:	bf00      	nop
  }

  return ret;
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	460b      	mov	r3, r1
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d16e      	bne.n	80070f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800701e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007026:	2b03      	cmp	r3, #3
 8007028:	f040 8098 	bne.w	800715c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	429a      	cmp	r2, r3
 8007036:	d913      	bls.n	8007060 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	1ad2      	subs	r2, r2, r3
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	4293      	cmp	r3, r2
 8007050:	bf28      	it	cs
 8007052:	4613      	movcs	r3, r2
 8007054:	461a      	mov	r2, r3
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f001 f9b4 	bl	80083c6 <USBD_CtlContinueRx>
 800705e:	e07d      	b.n	800715c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007066:	f003 031f 	and.w	r3, r3, #31
 800706a:	2b02      	cmp	r3, #2
 800706c:	d014      	beq.n	8007098 <USBD_LL_DataOutStage+0x98>
 800706e:	2b02      	cmp	r3, #2
 8007070:	d81d      	bhi.n	80070ae <USBD_LL_DataOutStage+0xae>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <USBD_LL_DataOutStage+0x7c>
 8007076:	2b01      	cmp	r3, #1
 8007078:	d003      	beq.n	8007082 <USBD_LL_DataOutStage+0x82>
 800707a:	e018      	b.n	80070ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	75bb      	strb	r3, [r7, #22]
            break;
 8007080:	e018      	b.n	80070b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007088:	b2db      	uxtb	r3, r3
 800708a:	4619      	mov	r1, r3
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 fa64 	bl	800755a <USBD_CoreFindIF>
 8007092:	4603      	mov	r3, r0
 8007094:	75bb      	strb	r3, [r7, #22]
            break;
 8007096:	e00d      	b.n	80070b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	4619      	mov	r1, r3
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 fa66 	bl	8007574 <USBD_CoreFindEP>
 80070a8:	4603      	mov	r3, r0
 80070aa:	75bb      	strb	r3, [r7, #22]
            break;
 80070ac:	e002      	b.n	80070b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	75bb      	strb	r3, [r7, #22]
            break;
 80070b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80070b4:	7dbb      	ldrb	r3, [r7, #22]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d119      	bne.n	80070ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d113      	bne.n	80070ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80070c6:	7dba      	ldrb	r2, [r7, #22]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	32ae      	adds	r2, #174	; 0xae
 80070cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00b      	beq.n	80070ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80070d6:	7dba      	ldrb	r2, [r7, #22]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80070de:	7dba      	ldrb	r2, [r7, #22]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	32ae      	adds	r2, #174	; 0xae
 80070e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f001 f97a 	bl	80083e8 <USBD_CtlSendStatus>
 80070f4:	e032      	b.n	800715c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80070f6:	7afb      	ldrb	r3, [r7, #11]
 80070f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	4619      	mov	r1, r3
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 fa37 	bl	8007574 <USBD_CoreFindEP>
 8007106:	4603      	mov	r3, r0
 8007108:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800710a:	7dbb      	ldrb	r3, [r7, #22]
 800710c:	2bff      	cmp	r3, #255	; 0xff
 800710e:	d025      	beq.n	800715c <USBD_LL_DataOutStage+0x15c>
 8007110:	7dbb      	ldrb	r3, [r7, #22]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d122      	bne.n	800715c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b03      	cmp	r3, #3
 8007120:	d117      	bne.n	8007152 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007122:	7dba      	ldrb	r2, [r7, #22]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	32ae      	adds	r2, #174	; 0xae
 8007128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00f      	beq.n	8007152 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007132:	7dba      	ldrb	r2, [r7, #22]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800713a:	7dba      	ldrb	r2, [r7, #22]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	32ae      	adds	r2, #174	; 0xae
 8007140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	7afa      	ldrb	r2, [r7, #11]
 8007148:	4611      	mov	r1, r2
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	4798      	blx	r3
 800714e:	4603      	mov	r3, r0
 8007150:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	e000      	b.n	800715e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b086      	sub	sp, #24
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	460b      	mov	r3, r1
 8007170:	607a      	str	r2, [r7, #4]
 8007172:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d16f      	bne.n	800725a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3314      	adds	r3, #20
 800717e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007186:	2b02      	cmp	r3, #2
 8007188:	d15a      	bne.n	8007240 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	429a      	cmp	r2, r3
 8007194:	d914      	bls.n	80071c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	461a      	mov	r2, r3
 80071aa:	6879      	ldr	r1, [r7, #4]
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f001 f8dc 	bl	800836a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071b2:	2300      	movs	r3, #0
 80071b4:	2200      	movs	r2, #0
 80071b6:	2100      	movs	r1, #0
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f004 fe7b 	bl	800beb4 <USBD_LL_PrepareReceive>
 80071be:	e03f      	b.n	8007240 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d11c      	bne.n	8007206 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d316      	bcc.n	8007206 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d20f      	bcs.n	8007206 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071e6:	2200      	movs	r2, #0
 80071e8:	2100      	movs	r1, #0
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f001 f8bd 	bl	800836a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071f8:	2300      	movs	r3, #0
 80071fa:	2200      	movs	r2, #0
 80071fc:	2100      	movs	r1, #0
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f004 fe58 	bl	800beb4 <USBD_LL_PrepareReceive>
 8007204:	e01c      	b.n	8007240 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b03      	cmp	r3, #3
 8007210:	d10f      	bne.n	8007232 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d009      	beq.n	8007232 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007232:	2180      	movs	r1, #128	; 0x80
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f004 fd37 	bl	800bca8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f001 f8e7 	bl	800840e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d03a      	beq.n	80072c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f7ff fe42 	bl	8006ed4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007258:	e032      	b.n	80072c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800725a:	7afb      	ldrb	r3, [r7, #11]
 800725c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007260:	b2db      	uxtb	r3, r3
 8007262:	4619      	mov	r1, r3
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 f985 	bl	8007574 <USBD_CoreFindEP>
 800726a:	4603      	mov	r3, r0
 800726c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	2bff      	cmp	r3, #255	; 0xff
 8007272:	d025      	beq.n	80072c0 <USBD_LL_DataInStage+0x15a>
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d122      	bne.n	80072c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b03      	cmp	r3, #3
 8007284:	d11c      	bne.n	80072c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007286:	7dfa      	ldrb	r2, [r7, #23]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	32ae      	adds	r2, #174	; 0xae
 800728c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d014      	beq.n	80072c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007296:	7dfa      	ldrb	r2, [r7, #23]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800729e:	7dfa      	ldrb	r2, [r7, #23]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	32ae      	adds	r2, #174	; 0xae
 80072a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	7afa      	ldrb	r2, [r7, #11]
 80072ac:	4611      	mov	r1, r2
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	4798      	blx	r3
 80072b2:	4603      	mov	r3, r0
 80072b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80072b6:	7dbb      	ldrb	r3, [r7, #22]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80072bc:	7dbb      	ldrb	r3, [r7, #22]
 80072be:	e000      	b.n	80072c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007302:	2b00      	cmp	r3, #0
 8007304:	d014      	beq.n	8007330 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00e      	beq.n	8007330 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	6852      	ldr	r2, [r2, #4]
 800731e:	b2d2      	uxtb	r2, r2
 8007320:	4611      	mov	r1, r2
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4798      	blx	r3
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800732c:	2303      	movs	r3, #3
 800732e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007330:	2340      	movs	r3, #64	; 0x40
 8007332:	2200      	movs	r2, #0
 8007334:	2100      	movs	r1, #0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f004 fc42 	bl	800bbc0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2240      	movs	r2, #64	; 0x40
 8007348:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800734c:	2340      	movs	r3, #64	; 0x40
 800734e:	2200      	movs	r2, #0
 8007350:	2180      	movs	r1, #128	; 0x80
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f004 fc34 	bl	800bbc0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2240      	movs	r2, #64	; 0x40
 8007362:	621a      	str	r2, [r3, #32]

  return ret;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800736e:	b480      	push	{r7}
 8007370:	b083      	sub	sp, #12
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	460b      	mov	r3, r1
 8007378:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	78fa      	ldrb	r2, [r7, #3]
 800737e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d006      	beq.n	80073b0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2204      	movs	r2, #4
 80073b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d106      	bne.n	80073e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b082      	sub	sp, #8
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b03      	cmp	r3, #3
 8007408:	d110      	bne.n	800742c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00b      	beq.n	800742c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b082      	sub	sp, #8
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	460b      	mov	r3, r1
 8007440:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	32ae      	adds	r2, #174	; 0xae
 800744c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007454:	2303      	movs	r3, #3
 8007456:	e01c      	b.n	8007492 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b03      	cmp	r3, #3
 8007462:	d115      	bne.n	8007490 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	32ae      	adds	r2, #174	; 0xae
 800746e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	32ae      	adds	r2, #174	; 0xae
 8007482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	78fa      	ldrb	r2, [r7, #3]
 800748a:	4611      	mov	r1, r2
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	460b      	mov	r3, r1
 80074a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	32ae      	adds	r2, #174	; 0xae
 80074b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e01c      	b.n	80074f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d115      	bne.n	80074f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	32ae      	adds	r2, #174	; 0xae
 80074d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00b      	beq.n	80074f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	32ae      	adds	r2, #174	; 0xae
 80074e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	4611      	mov	r1, r2
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00e      	beq.n	8007550 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6852      	ldr	r2, [r2, #4]
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	4611      	mov	r1, r2
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800754c:	2303      	movs	r3, #3
 800754e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007550:	7bfb      	ldrb	r3, [r7, #15]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	460b      	mov	r3, r1
 8007564:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007566:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007568:	4618      	mov	r0, r3
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007580:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b086      	sub	sp, #24
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	885b      	ldrh	r3, [r3, #2]
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d920      	bls.n	80075f8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80075be:	e013      	b.n	80075e8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80075c0:	f107 030a 	add.w	r3, r7, #10
 80075c4:	4619      	mov	r1, r3
 80075c6:	6978      	ldr	r0, [r7, #20]
 80075c8:	f000 f81b 	bl	8007602 <USBD_GetNextDesc>
 80075cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	785b      	ldrb	r3, [r3, #1]
 80075d2:	2b05      	cmp	r3, #5
 80075d4:	d108      	bne.n	80075e8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	789b      	ldrb	r3, [r3, #2]
 80075de:	78fa      	ldrb	r2, [r7, #3]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d008      	beq.n	80075f6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	885b      	ldrh	r3, [r3, #2]
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	897b      	ldrh	r3, [r7, #10]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d8e5      	bhi.n	80075c0 <USBD_GetEpDesc+0x32>
 80075f4:	e000      	b.n	80075f8 <USBD_GetEpDesc+0x6a>
          break;
 80075f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80075f8:	693b      	ldr	r3, [r7, #16]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007602:	b480      	push	{r7}
 8007604:	b085      	sub	sp, #20
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	881a      	ldrh	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	b29b      	uxth	r3, r3
 800761a:	4413      	add	r3, r2
 800761c:	b29a      	uxth	r2, r3
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4413      	add	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800762e:	68fb      	ldr	r3, [r7, #12]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	3301      	adds	r3, #1
 8007652:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800765a:	8a3b      	ldrh	r3, [r7, #16]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	b21a      	sxth	r2, r3
 8007660:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007664:	4313      	orrs	r3, r2
 8007666:	b21b      	sxth	r3, r3
 8007668:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800766a:	89fb      	ldrh	r3, [r7, #14]
}
 800766c:	4618      	mov	r0, r3
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d005      	beq.n	800769e <USBD_StdDevReq+0x26>
 8007692:	2b40      	cmp	r3, #64	; 0x40
 8007694:	d857      	bhi.n	8007746 <USBD_StdDevReq+0xce>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00f      	beq.n	80076ba <USBD_StdDevReq+0x42>
 800769a:	2b20      	cmp	r3, #32
 800769c:	d153      	bne.n	8007746 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	32ae      	adds	r2, #174	; 0xae
 80076a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4798      	blx	r3
 80076b4:	4603      	mov	r3, r0
 80076b6:	73fb      	strb	r3, [r7, #15]
      break;
 80076b8:	e04a      	b.n	8007750 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	785b      	ldrb	r3, [r3, #1]
 80076be:	2b09      	cmp	r3, #9
 80076c0:	d83b      	bhi.n	800773a <USBD_StdDevReq+0xc2>
 80076c2:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <USBD_StdDevReq+0x50>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	0800771d 	.word	0x0800771d
 80076cc:	08007731 	.word	0x08007731
 80076d0:	0800773b 	.word	0x0800773b
 80076d4:	08007727 	.word	0x08007727
 80076d8:	0800773b 	.word	0x0800773b
 80076dc:	080076fb 	.word	0x080076fb
 80076e0:	080076f1 	.word	0x080076f1
 80076e4:	0800773b 	.word	0x0800773b
 80076e8:	08007713 	.word	0x08007713
 80076ec:	08007705 	.word	0x08007705
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa3c 	bl	8007b70 <USBD_GetDescriptor>
          break;
 80076f8:	e024      	b.n	8007744 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fbcb 	bl	8007e98 <USBD_SetAddress>
          break;
 8007702:	e01f      	b.n	8007744 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fc0a 	bl	8007f20 <USBD_SetConfig>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]
          break;
 8007710:	e018      	b.n	8007744 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fcad 	bl	8008074 <USBD_GetConfig>
          break;
 800771a:	e013      	b.n	8007744 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fcde 	bl	80080e0 <USBD_GetStatus>
          break;
 8007724:	e00e      	b.n	8007744 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fd0d 	bl	8008148 <USBD_SetFeature>
          break;
 800772e:	e009      	b.n	8007744 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fd31 	bl	800819a <USBD_ClrFeature>
          break;
 8007738:	e004      	b.n	8007744 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fd88 	bl	8008252 <USBD_CtlError>
          break;
 8007742:	bf00      	nop
      }
      break;
 8007744:	e004      	b.n	8007750 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fd82 	bl	8008252 <USBD_CtlError>
      break;
 800774e:	bf00      	nop
  }

  return ret;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop

0800775c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	d005      	beq.n	8007782 <USBD_StdItfReq+0x26>
 8007776:	2b40      	cmp	r3, #64	; 0x40
 8007778:	d852      	bhi.n	8007820 <USBD_StdItfReq+0xc4>
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <USBD_StdItfReq+0x26>
 800777e:	2b20      	cmp	r3, #32
 8007780:	d14e      	bne.n	8007820 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007788:	b2db      	uxtb	r3, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	2b02      	cmp	r3, #2
 800778e:	d840      	bhi.n	8007812 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	889b      	ldrh	r3, [r3, #4]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b01      	cmp	r3, #1
 8007798:	d836      	bhi.n	8007808 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	889b      	ldrh	r3, [r3, #4]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7ff fed9 	bl	800755a <USBD_CoreFindIF>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	2bff      	cmp	r3, #255	; 0xff
 80077b0:	d01d      	beq.n	80077ee <USBD_StdItfReq+0x92>
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d11a      	bne.n	80077ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80077b8:	7bba      	ldrb	r2, [r7, #14]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	32ae      	adds	r2, #174	; 0xae
 80077be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00f      	beq.n	80077e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80077c8:	7bba      	ldrb	r2, [r7, #14]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80077d0:	7bba      	ldrb	r2, [r7, #14]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	32ae      	adds	r2, #174	; 0xae
 80077d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
 80077e2:	4603      	mov	r3, r0
 80077e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077e6:	e004      	b.n	80077f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80077e8:	2303      	movs	r3, #3
 80077ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077ec:	e001      	b.n	80077f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80077ee:	2303      	movs	r3, #3
 80077f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	88db      	ldrh	r3, [r3, #6]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d110      	bne.n	800781c <USBD_StdItfReq+0xc0>
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10d      	bne.n	800781c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fdf1 	bl	80083e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007806:	e009      	b.n	800781c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fd21 	bl	8008252 <USBD_CtlError>
          break;
 8007810:	e004      	b.n	800781c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fd1c 	bl	8008252 <USBD_CtlError>
          break;
 800781a:	e000      	b.n	800781e <USBD_StdItfReq+0xc2>
          break;
 800781c:	bf00      	nop
      }
      break;
 800781e:	e004      	b.n	800782a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fd15 	bl	8008252 <USBD_CtlError>
      break;
 8007828:	bf00      	nop
  }

  return ret;
 800782a:	7bfb      	ldrb	r3, [r7, #15]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	889b      	ldrh	r3, [r3, #4]
 8007846:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007850:	2b40      	cmp	r3, #64	; 0x40
 8007852:	d007      	beq.n	8007864 <USBD_StdEPReq+0x30>
 8007854:	2b40      	cmp	r3, #64	; 0x40
 8007856:	f200 817f 	bhi.w	8007b58 <USBD_StdEPReq+0x324>
 800785a:	2b00      	cmp	r3, #0
 800785c:	d02a      	beq.n	80078b4 <USBD_StdEPReq+0x80>
 800785e:	2b20      	cmp	r3, #32
 8007860:	f040 817a 	bne.w	8007b58 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff fe83 	bl	8007574 <USBD_CoreFindEP>
 800786e:	4603      	mov	r3, r0
 8007870:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007872:	7b7b      	ldrb	r3, [r7, #13]
 8007874:	2bff      	cmp	r3, #255	; 0xff
 8007876:	f000 8174 	beq.w	8007b62 <USBD_StdEPReq+0x32e>
 800787a:	7b7b      	ldrb	r3, [r7, #13]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f040 8170 	bne.w	8007b62 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007882:	7b7a      	ldrb	r2, [r7, #13]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800788a:	7b7a      	ldrb	r2, [r7, #13]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	32ae      	adds	r2, #174	; 0xae
 8007890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 8163 	beq.w	8007b62 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800789c:	7b7a      	ldrb	r2, [r7, #13]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	32ae      	adds	r2, #174	; 0xae
 80078a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	4798      	blx	r3
 80078ae:	4603      	mov	r3, r0
 80078b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078b2:	e156      	b.n	8007b62 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d008      	beq.n	80078ce <USBD_StdEPReq+0x9a>
 80078bc:	2b03      	cmp	r3, #3
 80078be:	f300 8145 	bgt.w	8007b4c <USBD_StdEPReq+0x318>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 809b 	beq.w	80079fe <USBD_StdEPReq+0x1ca>
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d03c      	beq.n	8007946 <USBD_StdEPReq+0x112>
 80078cc:	e13e      	b.n	8007b4c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d002      	beq.n	80078e0 <USBD_StdEPReq+0xac>
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d016      	beq.n	800790c <USBD_StdEPReq+0xd8>
 80078de:	e02c      	b.n	800793a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00d      	beq.n	8007902 <USBD_StdEPReq+0xce>
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	2b80      	cmp	r3, #128	; 0x80
 80078ea:	d00a      	beq.n	8007902 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f004 f9d9 	bl	800bca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078f6:	2180      	movs	r1, #128	; 0x80
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f004 f9d5 	bl	800bca8 <USBD_LL_StallEP>
 80078fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007900:	e020      	b.n	8007944 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fca4 	bl	8008252 <USBD_CtlError>
              break;
 800790a:	e01b      	b.n	8007944 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	885b      	ldrh	r3, [r3, #2]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10e      	bne.n	8007932 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <USBD_StdEPReq+0xfe>
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	2b80      	cmp	r3, #128	; 0x80
 800791e:	d008      	beq.n	8007932 <USBD_StdEPReq+0xfe>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	88db      	ldrh	r3, [r3, #6]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d104      	bne.n	8007932 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f004 f9bb 	bl	800bca8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fd58 	bl	80083e8 <USBD_CtlSendStatus>

              break;
 8007938:	e004      	b.n	8007944 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fc88 	bl	8008252 <USBD_CtlError>
              break;
 8007942:	bf00      	nop
          }
          break;
 8007944:	e107      	b.n	8007b56 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d002      	beq.n	8007958 <USBD_StdEPReq+0x124>
 8007952:	2b03      	cmp	r3, #3
 8007954:	d016      	beq.n	8007984 <USBD_StdEPReq+0x150>
 8007956:	e04b      	b.n	80079f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00d      	beq.n	800797a <USBD_StdEPReq+0x146>
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	2b80      	cmp	r3, #128	; 0x80
 8007962:	d00a      	beq.n	800797a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f004 f99d 	bl	800bca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800796e:	2180      	movs	r1, #128	; 0x80
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f004 f999 	bl	800bca8 <USBD_LL_StallEP>
 8007976:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007978:	e040      	b.n	80079fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fc68 	bl	8008252 <USBD_CtlError>
              break;
 8007982:	e03b      	b.n	80079fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	885b      	ldrh	r3, [r3, #2]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d136      	bne.n	80079fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007992:	2b00      	cmp	r3, #0
 8007994:	d004      	beq.n	80079a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f004 f9ba 	bl	800bd14 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fd21 	bl	80083e8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff fde2 	bl	8007574 <USBD_CoreFindEP>
 80079b0:	4603      	mov	r3, r0
 80079b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079b4:	7b7b      	ldrb	r3, [r7, #13]
 80079b6:	2bff      	cmp	r3, #255	; 0xff
 80079b8:	d01f      	beq.n	80079fa <USBD_StdEPReq+0x1c6>
 80079ba:	7b7b      	ldrb	r3, [r7, #13]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d11c      	bne.n	80079fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80079c0:	7b7a      	ldrb	r2, [r7, #13]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80079c8:	7b7a      	ldrb	r2, [r7, #13]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	32ae      	adds	r2, #174	; 0xae
 80079ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d010      	beq.n	80079fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079d8:	7b7a      	ldrb	r2, [r7, #13]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	32ae      	adds	r2, #174	; 0xae
 80079de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
 80079ea:	4603      	mov	r3, r0
 80079ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80079ee:	e004      	b.n	80079fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fc2d 	bl	8008252 <USBD_CtlError>
              break;
 80079f8:	e000      	b.n	80079fc <USBD_StdEPReq+0x1c8>
              break;
 80079fa:	bf00      	nop
          }
          break;
 80079fc:	e0ab      	b.n	8007b56 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d002      	beq.n	8007a10 <USBD_StdEPReq+0x1dc>
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d032      	beq.n	8007a74 <USBD_StdEPReq+0x240>
 8007a0e:	e097      	b.n	8007b40 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <USBD_StdEPReq+0x1f2>
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b80      	cmp	r3, #128	; 0x80
 8007a1a:	d004      	beq.n	8007a26 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fc17 	bl	8008252 <USBD_CtlError>
                break;
 8007a24:	e091      	b.n	8007b4a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	da0b      	bge.n	8007a46 <USBD_StdEPReq+0x212>
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a34:	4613      	mov	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	3310      	adds	r3, #16
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	4413      	add	r3, r2
 8007a42:	3304      	adds	r3, #4
 8007a44:	e00b      	b.n	8007a5e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fc61 	bl	8008334 <USBD_CtlSendData>
              break;
 8007a72:	e06a      	b.n	8007b4a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	da11      	bge.n	8007aa0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	f003 020f 	and.w	r2, r3, #15
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	440b      	add	r3, r1
 8007a8e:	3324      	adds	r3, #36	; 0x24
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d117      	bne.n	8007ac6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fbda 	bl	8008252 <USBD_CtlError>
                  break;
 8007a9e:	e054      	b.n	8007b4a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	f003 020f 	and.w	r2, r3, #15
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	440b      	add	r3, r1
 8007ab2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d104      	bne.n	8007ac6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fbc7 	bl	8008252 <USBD_CtlError>
                  break;
 8007ac4:	e041      	b.n	8007b4a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	da0b      	bge.n	8007ae6 <USBD_StdEPReq+0x2b2>
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	3310      	adds	r3, #16
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	e00b      	b.n	8007afe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	4413      	add	r3, r2
 8007afc:	3304      	adds	r3, #4
 8007afe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <USBD_StdEPReq+0x2d8>
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	2b80      	cmp	r3, #128	; 0x80
 8007b0a:	d103      	bne.n	8007b14 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	e00e      	b.n	8007b32 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f004 f931 	bl	800bd80 <USBD_LL_IsStallEP>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2201      	movs	r2, #1
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	e002      	b.n	8007b32 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2202      	movs	r2, #2
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fbfb 	bl	8008334 <USBD_CtlSendData>
              break;
 8007b3e:	e004      	b.n	8007b4a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fb85 	bl	8008252 <USBD_CtlError>
              break;
 8007b48:	bf00      	nop
          }
          break;
 8007b4a:	e004      	b.n	8007b56 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fb7f 	bl	8008252 <USBD_CtlError>
          break;
 8007b54:	bf00      	nop
      }
      break;
 8007b56:	e005      	b.n	8007b64 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fb79 	bl	8008252 <USBD_CtlError>
      break;
 8007b60:	e000      	b.n	8007b64 <USBD_StdEPReq+0x330>
      break;
 8007b62:	bf00      	nop
  }

  return ret;
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b82:	2300      	movs	r3, #0
 8007b84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	885b      	ldrh	r3, [r3, #2]
 8007b8a:	0a1b      	lsrs	r3, r3, #8
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	2b0e      	cmp	r3, #14
 8007b92:	f200 8152 	bhi.w	8007e3a <USBD_GetDescriptor+0x2ca>
 8007b96:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <USBD_GetDescriptor+0x2c>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007c0d 	.word	0x08007c0d
 8007ba0:	08007c25 	.word	0x08007c25
 8007ba4:	08007c65 	.word	0x08007c65
 8007ba8:	08007e3b 	.word	0x08007e3b
 8007bac:	08007e3b 	.word	0x08007e3b
 8007bb0:	08007ddb 	.word	0x08007ddb
 8007bb4:	08007e07 	.word	0x08007e07
 8007bb8:	08007e3b 	.word	0x08007e3b
 8007bbc:	08007e3b 	.word	0x08007e3b
 8007bc0:	08007e3b 	.word	0x08007e3b
 8007bc4:	08007e3b 	.word	0x08007e3b
 8007bc8:	08007e3b 	.word	0x08007e3b
 8007bcc:	08007e3b 	.word	0x08007e3b
 8007bd0:	08007e3b 	.word	0x08007e3b
 8007bd4:	08007bd9 	.word	0x08007bd9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bea:	69db      	ldr	r3, [r3, #28]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	7c12      	ldrb	r2, [r2, #16]
 8007bf0:	f107 0108 	add.w	r1, r7, #8
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
 8007bf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bfa:	e126      	b.n	8007e4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fb27 	bl	8008252 <USBD_CtlError>
        err++;
 8007c04:	7afb      	ldrb	r3, [r7, #11]
 8007c06:	3301      	adds	r3, #1
 8007c08:	72fb      	strb	r3, [r7, #11]
      break;
 8007c0a:	e11e      	b.n	8007e4a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	7c12      	ldrb	r2, [r2, #16]
 8007c18:	f107 0108 	add.w	r1, r7, #8
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	4798      	blx	r3
 8007c20:	60f8      	str	r0, [r7, #12]
      break;
 8007c22:	e112      	b.n	8007e4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7c1b      	ldrb	r3, [r3, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10d      	bne.n	8007c48 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c34:	f107 0208 	add.w	r2, r7, #8
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3301      	adds	r3, #1
 8007c42:	2202      	movs	r2, #2
 8007c44:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c46:	e100      	b.n	8007e4a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c50:	f107 0208 	add.w	r2, r7, #8
 8007c54:	4610      	mov	r0, r2
 8007c56:	4798      	blx	r3
 8007c58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	2202      	movs	r2, #2
 8007c60:	701a      	strb	r2, [r3, #0]
      break;
 8007c62:	e0f2      	b.n	8007e4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	885b      	ldrh	r3, [r3, #2]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b05      	cmp	r3, #5
 8007c6c:	f200 80ac 	bhi.w	8007dc8 <USBD_GetDescriptor+0x258>
 8007c70:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <USBD_GetDescriptor+0x108>)
 8007c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c76:	bf00      	nop
 8007c78:	08007c91 	.word	0x08007c91
 8007c7c:	08007cc5 	.word	0x08007cc5
 8007c80:	08007cf9 	.word	0x08007cf9
 8007c84:	08007d2d 	.word	0x08007d2d
 8007c88:	08007d61 	.word	0x08007d61
 8007c8c:	08007d95 	.word	0x08007d95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00b      	beq.n	8007cb4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	7c12      	ldrb	r2, [r2, #16]
 8007ca8:	f107 0108 	add.w	r1, r7, #8
 8007cac:	4610      	mov	r0, r2
 8007cae:	4798      	blx	r3
 8007cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cb2:	e091      	b.n	8007dd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 facb 	bl	8008252 <USBD_CtlError>
            err++;
 8007cbc:	7afb      	ldrb	r3, [r7, #11]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cc2:	e089      	b.n	8007dd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	7c12      	ldrb	r2, [r2, #16]
 8007cdc:	f107 0108 	add.w	r1, r7, #8
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4798      	blx	r3
 8007ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce6:	e077      	b.n	8007dd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fab1 	bl	8008252 <USBD_CtlError>
            err++;
 8007cf0:	7afb      	ldrb	r3, [r7, #11]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf6:	e06f      	b.n	8007dd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00b      	beq.n	8007d1c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	7c12      	ldrb	r2, [r2, #16]
 8007d10:	f107 0108 	add.w	r1, r7, #8
 8007d14:	4610      	mov	r0, r2
 8007d16:	4798      	blx	r3
 8007d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d1a:	e05d      	b.n	8007dd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa97 	bl	8008252 <USBD_CtlError>
            err++;
 8007d24:	7afb      	ldrb	r3, [r7, #11]
 8007d26:	3301      	adds	r3, #1
 8007d28:	72fb      	strb	r3, [r7, #11]
          break;
 8007d2a:	e055      	b.n	8007dd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00b      	beq.n	8007d50 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	7c12      	ldrb	r2, [r2, #16]
 8007d44:	f107 0108 	add.w	r1, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d4e:	e043      	b.n	8007dd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa7d 	bl	8008252 <USBD_CtlError>
            err++;
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d5e:	e03b      	b.n	8007dd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	7c12      	ldrb	r2, [r2, #16]
 8007d78:	f107 0108 	add.w	r1, r7, #8
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	4798      	blx	r3
 8007d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d82:	e029      	b.n	8007dd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa63 	bl	8008252 <USBD_CtlError>
            err++;
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	72fb      	strb	r3, [r7, #11]
          break;
 8007d92:	e021      	b.n	8007dd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00b      	beq.n	8007db8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	7c12      	ldrb	r2, [r2, #16]
 8007dac:	f107 0108 	add.w	r1, r7, #8
 8007db0:	4610      	mov	r0, r2
 8007db2:	4798      	blx	r3
 8007db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007db6:	e00f      	b.n	8007dd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa49 	bl	8008252 <USBD_CtlError>
            err++;
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007dc6:	e007      	b.n	8007dd8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fa41 	bl	8008252 <USBD_CtlError>
          err++;
 8007dd0:	7afb      	ldrb	r3, [r7, #11]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007dd6:	bf00      	nop
      }
      break;
 8007dd8:	e037      	b.n	8007e4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	7c1b      	ldrb	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dea:	f107 0208 	add.w	r2, r7, #8
 8007dee:	4610      	mov	r0, r2
 8007df0:	4798      	blx	r3
 8007df2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007df4:	e029      	b.n	8007e4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fa2a 	bl	8008252 <USBD_CtlError>
        err++;
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	3301      	adds	r3, #1
 8007e02:	72fb      	strb	r3, [r7, #11]
      break;
 8007e04:	e021      	b.n	8007e4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	7c1b      	ldrb	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10d      	bne.n	8007e2a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e16:	f107 0208 	add.w	r2, r7, #8
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	4798      	blx	r3
 8007e1e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3301      	adds	r3, #1
 8007e24:	2207      	movs	r2, #7
 8007e26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e28:	e00f      	b.n	8007e4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fa10 	bl	8008252 <USBD_CtlError>
        err++;
 8007e32:	7afb      	ldrb	r3, [r7, #11]
 8007e34:	3301      	adds	r3, #1
 8007e36:	72fb      	strb	r3, [r7, #11]
      break;
 8007e38:	e007      	b.n	8007e4a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fa08 	bl	8008252 <USBD_CtlError>
      err++;
 8007e42:	7afb      	ldrb	r3, [r7, #11]
 8007e44:	3301      	adds	r3, #1
 8007e46:	72fb      	strb	r3, [r7, #11]
      break;
 8007e48:	bf00      	nop
  }

  if (err != 0U)
 8007e4a:	7afb      	ldrb	r3, [r7, #11]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d11e      	bne.n	8007e8e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	88db      	ldrh	r3, [r3, #6]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d016      	beq.n	8007e86 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007e58:	893b      	ldrh	r3, [r7, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00e      	beq.n	8007e7c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	88da      	ldrh	r2, [r3, #6]
 8007e62:	893b      	ldrh	r3, [r7, #8]
 8007e64:	4293      	cmp	r3, r2
 8007e66:	bf28      	it	cs
 8007e68:	4613      	movcs	r3, r2
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e6e:	893b      	ldrh	r3, [r7, #8]
 8007e70:	461a      	mov	r2, r3
 8007e72:	68f9      	ldr	r1, [r7, #12]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fa5d 	bl	8008334 <USBD_CtlSendData>
 8007e7a:	e009      	b.n	8007e90 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f9e7 	bl	8008252 <USBD_CtlError>
 8007e84:	e004      	b.n	8007e90 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 faae 	bl	80083e8 <USBD_CtlSendStatus>
 8007e8c:	e000      	b.n	8007e90 <USBD_GetDescriptor+0x320>
    return;
 8007e8e:	bf00      	nop
  }
}
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop

08007e98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	889b      	ldrh	r3, [r3, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d131      	bne.n	8007f0e <USBD_SetAddress+0x76>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	88db      	ldrh	r3, [r3, #6]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d12d      	bne.n	8007f0e <USBD_SetAddress+0x76>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	885b      	ldrh	r3, [r3, #2]
 8007eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8007eb8:	d829      	bhi.n	8007f0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	885b      	ldrh	r3, [r3, #2]
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ec4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d104      	bne.n	8007edc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f9bc 	bl	8008252 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eda:	e01d      	b.n	8007f18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	7bfa      	ldrb	r2, [r7, #15]
 8007ee0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f003 ff75 	bl	800bdd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa7a 	bl	80083e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2202      	movs	r2, #2
 8007efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f02:	e009      	b.n	8007f18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0c:	e004      	b.n	8007f18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f99e 	bl	8008252 <USBD_CtlError>
  }
}
 8007f16:	bf00      	nop
 8007f18:	bf00      	nop
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	885b      	ldrh	r3, [r3, #2]
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	4b4e      	ldr	r3, [pc, #312]	; (8008070 <USBD_SetConfig+0x150>)
 8007f36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f38:	4b4d      	ldr	r3, [pc, #308]	; (8008070 <USBD_SetConfig+0x150>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d905      	bls.n	8007f4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f985 	bl	8008252 <USBD_CtlError>
    return USBD_FAIL;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e08c      	b.n	8008066 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d002      	beq.n	8007f5e <USBD_SetConfig+0x3e>
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d029      	beq.n	8007fb0 <USBD_SetConfig+0x90>
 8007f5c:	e075      	b.n	800804a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f5e:	4b44      	ldr	r3, [pc, #272]	; (8008070 <USBD_SetConfig+0x150>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d020      	beq.n	8007fa8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007f66:	4b42      	ldr	r3, [pc, #264]	; (8008070 <USBD_SetConfig+0x150>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f70:	4b3f      	ldr	r3, [pc, #252]	; (8008070 <USBD_SetConfig+0x150>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fe ffb7 	bl	8006eea <USBD_SetClassConfig>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d008      	beq.n	8007f98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f962 	bl	8008252 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2202      	movs	r2, #2
 8007f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f96:	e065      	b.n	8008064 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa25 	bl	80083e8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007fa6:	e05d      	b.n	8008064 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fa1d 	bl	80083e8 <USBD_CtlSendStatus>
      break;
 8007fae:	e059      	b.n	8008064 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fb0:	4b2f      	ldr	r3, [pc, #188]	; (8008070 <USBD_SetConfig+0x150>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d112      	bne.n	8007fde <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007fc0:	4b2b      	ldr	r3, [pc, #172]	; (8008070 <USBD_SetConfig+0x150>)
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fca:	4b29      	ldr	r3, [pc, #164]	; (8008070 <USBD_SetConfig+0x150>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7fe ffa6 	bl	8006f22 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fa06 	bl	80083e8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fdc:	e042      	b.n	8008064 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007fde:	4b24      	ldr	r3, [pc, #144]	; (8008070 <USBD_SetConfig+0x150>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d02a      	beq.n	8008042 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7fe ff94 	bl	8006f22 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ffa:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <USBD_SetConfig+0x150>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	461a      	mov	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008004:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <USBD_SetConfig+0x150>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7fe ff6d 	bl	8006eea <USBD_SetClassConfig>
 8008010:	4603      	mov	r3, r0
 8008012:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00f      	beq.n	800803a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f918 	bl	8008252 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7fe ff79 	bl	8006f22 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008038:	e014      	b.n	8008064 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f9d4 	bl	80083e8 <USBD_CtlSendStatus>
      break;
 8008040:	e010      	b.n	8008064 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f9d0 	bl	80083e8 <USBD_CtlSendStatus>
      break;
 8008048:	e00c      	b.n	8008064 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f900 	bl	8008252 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008052:	4b07      	ldr	r3, [pc, #28]	; (8008070 <USBD_SetConfig+0x150>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7fe ff62 	bl	8006f22 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800805e:	2303      	movs	r3, #3
 8008060:	73fb      	strb	r3, [r7, #15]
      break;
 8008062:	bf00      	nop
  }

  return ret;
 8008064:	7bfb      	ldrb	r3, [r7, #15]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	2000026c 	.word	0x2000026c

08008074 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	88db      	ldrh	r3, [r3, #6]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d004      	beq.n	8008090 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f8e2 	bl	8008252 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800808e:	e023      	b.n	80080d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b02      	cmp	r3, #2
 800809a:	dc02      	bgt.n	80080a2 <USBD_GetConfig+0x2e>
 800809c:	2b00      	cmp	r3, #0
 800809e:	dc03      	bgt.n	80080a8 <USBD_GetConfig+0x34>
 80080a0:	e015      	b.n	80080ce <USBD_GetConfig+0x5a>
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d00b      	beq.n	80080be <USBD_GetConfig+0x4a>
 80080a6:	e012      	b.n	80080ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	3308      	adds	r3, #8
 80080b2:	2201      	movs	r2, #1
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f93c 	bl	8008334 <USBD_CtlSendData>
        break;
 80080bc:	e00c      	b.n	80080d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3304      	adds	r3, #4
 80080c2:	2201      	movs	r2, #1
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f934 	bl	8008334 <USBD_CtlSendData>
        break;
 80080cc:	e004      	b.n	80080d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f8be 	bl	8008252 <USBD_CtlError>
        break;
 80080d6:	bf00      	nop
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d81e      	bhi.n	8008136 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	88db      	ldrh	r3, [r3, #6]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d004      	beq.n	800810a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f8a5 	bl	8008252 <USBD_CtlError>
        break;
 8008108:	e01a      	b.n	8008140 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f043 0202 	orr.w	r2, r3, #2
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	330c      	adds	r3, #12
 800812a:	2202      	movs	r2, #2
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f900 	bl	8008334 <USBD_CtlSendData>
      break;
 8008134:	e004      	b.n	8008140 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f88a 	bl	8008252 <USBD_CtlError>
      break;
 800813e:	bf00      	nop
  }
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	885b      	ldrh	r3, [r3, #2]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d107      	bne.n	800816a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f940 	bl	80083e8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008168:	e013      	b.n	8008192 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	885b      	ldrh	r3, [r3, #2]
 800816e:	2b02      	cmp	r3, #2
 8008170:	d10b      	bne.n	800818a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	889b      	ldrh	r3, [r3, #4]
 8008176:	0a1b      	lsrs	r3, r3, #8
 8008178:	b29b      	uxth	r3, r3
 800817a:	b2da      	uxtb	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f930 	bl	80083e8 <USBD_CtlSendStatus>
}
 8008188:	e003      	b.n	8008192 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f860 	bl	8008252 <USBD_CtlError>
}
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	3b01      	subs	r3, #1
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d80b      	bhi.n	80081ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	885b      	ldrh	r3, [r3, #2]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d10c      	bne.n	80081d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f910 	bl	80083e8 <USBD_CtlSendStatus>
      }
      break;
 80081c8:	e004      	b.n	80081d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f840 	bl	8008252 <USBD_CtlError>
      break;
 80081d2:	e000      	b.n	80081d6 <USBD_ClrFeature+0x3c>
      break;
 80081d4:	bf00      	nop
  }
}
 80081d6:	bf00      	nop
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	781a      	ldrb	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3301      	adds	r3, #1
 80081f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	781a      	ldrb	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3301      	adds	r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f7ff fa17 	bl	800763c <SWAPBYTE>
 800820e:	4603      	mov	r3, r0
 8008210:	461a      	mov	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3301      	adds	r3, #1
 800821a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3301      	adds	r3, #1
 8008220:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7ff fa0a 	bl	800763c <SWAPBYTE>
 8008228:	4603      	mov	r3, r0
 800822a:	461a      	mov	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3301      	adds	r3, #1
 8008234:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3301      	adds	r3, #1
 800823a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff f9fd 	bl	800763c <SWAPBYTE>
 8008242:	4603      	mov	r3, r0
 8008244:	461a      	mov	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	80da      	strh	r2, [r3, #6]
}
 800824a:	bf00      	nop
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800825c:	2180      	movs	r1, #128	; 0x80
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f003 fd22 	bl	800bca8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008264:	2100      	movs	r1, #0
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f003 fd1e 	bl	800bca8 <USBD_LL_StallEP>
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d036      	beq.n	80082f8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800828e:	6938      	ldr	r0, [r7, #16]
 8008290:	f000 f836 	bl	8008300 <USBD_GetLen>
 8008294:	4603      	mov	r3, r0
 8008296:	3301      	adds	r3, #1
 8008298:	b29b      	uxth	r3, r3
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	b29a      	uxth	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	4413      	add	r3, r2
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	7812      	ldrb	r2, [r2, #0]
 80082ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	3301      	adds	r3, #1
 80082b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	4413      	add	r3, r2
 80082ba:	2203      	movs	r2, #3
 80082bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	3301      	adds	r3, #1
 80082c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082c4:	e013      	b.n	80082ee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	4413      	add	r3, r2
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	7812      	ldrb	r2, [r2, #0]
 80082d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	3301      	adds	r3, #1
 80082d6:	613b      	str	r3, [r7, #16]
    idx++;
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
 80082da:	3301      	adds	r3, #1
 80082dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	4413      	add	r3, r2
 80082e4:	2200      	movs	r2, #0
 80082e6:	701a      	strb	r2, [r3, #0]
    idx++;
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	3301      	adds	r3, #1
 80082ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e7      	bne.n	80082c6 <USBD_GetString+0x52>
 80082f6:	e000      	b.n	80082fa <USBD_GetString+0x86>
    return;
 80082f8:	bf00      	nop
  }
}
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008310:	e005      	b.n	800831e <USBD_GetLen+0x1e>
  {
    len++;
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	3301      	adds	r3, #1
 8008316:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	3301      	adds	r3, #1
 800831c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1f5      	bne.n	8008312 <USBD_GetLen+0x12>
  }

  return len;
 8008326:	7bfb      	ldrb	r3, [r7, #15]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2202      	movs	r2, #2
 8008344:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	2100      	movs	r1, #0
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f003 fd72 	bl	800be44 <USBD_LL_Transmit>

  return USBD_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	2100      	movs	r1, #0
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f003 fd61 	bl	800be44 <USBD_LL_Transmit>

  return USBD_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2203      	movs	r2, #3
 800839c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	2100      	movs	r1, #0
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f003 fd7c 	bl	800beb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	2100      	movs	r1, #0
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f003 fd6b 	bl	800beb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2204      	movs	r2, #4
 80083f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083f8:	2300      	movs	r3, #0
 80083fa:	2200      	movs	r2, #0
 80083fc:	2100      	movs	r1, #0
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f003 fd20 	bl	800be44 <USBD_LL_Transmit>

  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2205      	movs	r2, #5
 800841a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800841e:	2300      	movs	r3, #0
 8008420:	2200      	movs	r2, #0
 8008422:	2100      	movs	r1, #0
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f003 fd45 	bl	800beb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <__NVIC_SetPriority>:
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	4603      	mov	r3, r0
 800843c:	6039      	str	r1, [r7, #0]
 800843e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008444:	2b00      	cmp	r3, #0
 8008446:	db0a      	blt.n	800845e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	b2da      	uxtb	r2, r3
 800844c:	490c      	ldr	r1, [pc, #48]	; (8008480 <__NVIC_SetPriority+0x4c>)
 800844e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008452:	0112      	lsls	r2, r2, #4
 8008454:	b2d2      	uxtb	r2, r2
 8008456:	440b      	add	r3, r1
 8008458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800845c:	e00a      	b.n	8008474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	b2da      	uxtb	r2, r3
 8008462:	4908      	ldr	r1, [pc, #32]	; (8008484 <__NVIC_SetPriority+0x50>)
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	f003 030f 	and.w	r3, r3, #15
 800846a:	3b04      	subs	r3, #4
 800846c:	0112      	lsls	r2, r2, #4
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	440b      	add	r3, r1
 8008472:	761a      	strb	r2, [r3, #24]
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	e000e100 	.word	0xe000e100
 8008484:	e000ed00 	.word	0xe000ed00

08008488 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800848c:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <SysTick_Handler+0x1c>)
 800848e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008490:	f001 ff12 	bl	800a2b8 <xTaskGetSchedulerState>
 8008494:	4603      	mov	r3, r0
 8008496:	2b01      	cmp	r3, #1
 8008498:	d001      	beq.n	800849e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800849a:	f002 fcfd 	bl	800ae98 <xPortSysTickHandler>
  }
}
 800849e:	bf00      	nop
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	e000e010 	.word	0xe000e010

080084a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80084ac:	2100      	movs	r1, #0
 80084ae:	f06f 0004 	mvn.w	r0, #4
 80084b2:	f7ff ffbf 	bl	8008434 <__NVIC_SetPriority>
#endif
}
 80084b6:	bf00      	nop
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084c2:	f3ef 8305 	mrs	r3, IPSR
 80084c6:	603b      	str	r3, [r7, #0]
  return(result);
 80084c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80084ce:	f06f 0305 	mvn.w	r3, #5
 80084d2:	607b      	str	r3, [r7, #4]
 80084d4:	e00c      	b.n	80084f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084d6:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <osKernelInitialize+0x44>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d105      	bne.n	80084ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80084de:	4b08      	ldr	r3, [pc, #32]	; (8008500 <osKernelInitialize+0x44>)
 80084e0:	2201      	movs	r2, #1
 80084e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	607b      	str	r3, [r7, #4]
 80084e8:	e002      	b.n	80084f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80084ea:	f04f 33ff 	mov.w	r3, #4294967295
 80084ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80084f0:	687b      	ldr	r3, [r7, #4]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	20000270 	.word	0x20000270

08008504 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800850a:	f3ef 8305 	mrs	r3, IPSR
 800850e:	603b      	str	r3, [r7, #0]
  return(result);
 8008510:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008516:	f06f 0305 	mvn.w	r3, #5
 800851a:	607b      	str	r3, [r7, #4]
 800851c:	e010      	b.n	8008540 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800851e:	4b0b      	ldr	r3, [pc, #44]	; (800854c <osKernelStart+0x48>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d109      	bne.n	800853a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008526:	f7ff ffbf 	bl	80084a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800852a:	4b08      	ldr	r3, [pc, #32]	; (800854c <osKernelStart+0x48>)
 800852c:	2202      	movs	r2, #2
 800852e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008530:	f001 fa66 	bl	8009a00 <vTaskStartScheduler>
      stat = osOK;
 8008534:	2300      	movs	r3, #0
 8008536:	607b      	str	r3, [r7, #4]
 8008538:	e002      	b.n	8008540 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800853a:	f04f 33ff 	mov.w	r3, #4294967295
 800853e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008540:	687b      	ldr	r3, [r7, #4]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20000270 	.word	0x20000270

08008550 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008550:	b580      	push	{r7, lr}
 8008552:	b08e      	sub	sp, #56	; 0x38
 8008554:	af04      	add	r7, sp, #16
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800855c:	2300      	movs	r3, #0
 800855e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008560:	f3ef 8305 	mrs	r3, IPSR
 8008564:	617b      	str	r3, [r7, #20]
  return(result);
 8008566:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008568:	2b00      	cmp	r3, #0
 800856a:	d17e      	bne.n	800866a <osThreadNew+0x11a>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d07b      	beq.n	800866a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008572:	2380      	movs	r3, #128	; 0x80
 8008574:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008576:	2318      	movs	r3, #24
 8008578:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800857e:	f04f 33ff 	mov.w	r3, #4294967295
 8008582:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d045      	beq.n	8008616 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <osThreadNew+0x48>
        name = attr->name;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d008      	beq.n	80085be <osThreadNew+0x6e>
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	2b38      	cmp	r3, #56	; 0x38
 80085b0:	d805      	bhi.n	80085be <osThreadNew+0x6e>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <osThreadNew+0x72>
        return (NULL);
 80085be:	2300      	movs	r3, #0
 80085c0:	e054      	b.n	800866c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	089b      	lsrs	r3, r3, #2
 80085d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00e      	beq.n	80085f8 <osThreadNew+0xa8>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	2ba7      	cmp	r3, #167	; 0xa7
 80085e0:	d90a      	bls.n	80085f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d006      	beq.n	80085f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <osThreadNew+0xa8>
        mem = 1;
 80085f2:	2301      	movs	r3, #1
 80085f4:	61bb      	str	r3, [r7, #24]
 80085f6:	e010      	b.n	800861a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10c      	bne.n	800861a <osThreadNew+0xca>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d108      	bne.n	800861a <osThreadNew+0xca>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d104      	bne.n	800861a <osThreadNew+0xca>
          mem = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	61bb      	str	r3, [r7, #24]
 8008614:	e001      	b.n	800861a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d110      	bne.n	8008642 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008628:	9202      	str	r2, [sp, #8]
 800862a:	9301      	str	r3, [sp, #4]
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	6a3a      	ldr	r2, [r7, #32]
 8008634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 fff6 	bl	8009628 <xTaskCreateStatic>
 800863c:	4603      	mov	r3, r0
 800863e:	613b      	str	r3, [r7, #16]
 8008640:	e013      	b.n	800866a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d110      	bne.n	800866a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	b29a      	uxth	r2, r3
 800864c:	f107 0310 	add.w	r3, r7, #16
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f001 f841 	bl	80096e2 <xTaskCreate>
 8008660:	4603      	mov	r3, r0
 8008662:	2b01      	cmp	r3, #1
 8008664:	d001      	beq.n	800866a <osThreadNew+0x11a>
            hTask = NULL;
 8008666:	2300      	movs	r3, #0
 8008668:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800866a:	693b      	ldr	r3, [r7, #16]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3728      	adds	r7, #40	; 0x28
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800867c:	f3ef 8305 	mrs	r3, IPSR
 8008680:	60bb      	str	r3, [r7, #8]
  return(result);
 8008682:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008684:	2b00      	cmp	r3, #0
 8008686:	d003      	beq.n	8008690 <osDelay+0x1c>
    stat = osErrorISR;
 8008688:	f06f 0305 	mvn.w	r3, #5
 800868c:	60fb      	str	r3, [r7, #12]
 800868e:	e007      	b.n	80086a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008690:	2300      	movs	r3, #0
 8008692:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d002      	beq.n	80086a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 f97c 	bl	8009998 <vTaskDelay>
    }
  }

  return (stat);
 80086a0:	68fb      	ldr	r3, [r7, #12]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b08a      	sub	sp, #40	; 0x28
 80086ae:	af02      	add	r7, sp, #8
 80086b0:	60f8      	str	r0, [r7, #12]
 80086b2:	60b9      	str	r1, [r7, #8]
 80086b4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086ba:	f3ef 8305 	mrs	r3, IPSR
 80086be:	613b      	str	r3, [r7, #16]
  return(result);
 80086c0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d15f      	bne.n	8008786 <osMessageQueueNew+0xdc>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d05c      	beq.n	8008786 <osMessageQueueNew+0xdc>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d059      	beq.n	8008786 <osMessageQueueNew+0xdc>
    mem = -1;
 80086d2:	f04f 33ff 	mov.w	r3, #4294967295
 80086d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d029      	beq.n	8008732 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d012      	beq.n	800870c <osMessageQueueNew+0x62>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	2b4f      	cmp	r3, #79	; 0x4f
 80086ec:	d90e      	bls.n	800870c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	695a      	ldr	r2, [r3, #20]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	68b9      	ldr	r1, [r7, #8]
 80086fe:	fb01 f303 	mul.w	r3, r1, r3
 8008702:	429a      	cmp	r2, r3
 8008704:	d302      	bcc.n	800870c <osMessageQueueNew+0x62>
        mem = 1;
 8008706:	2301      	movs	r3, #1
 8008708:	61bb      	str	r3, [r7, #24]
 800870a:	e014      	b.n	8008736 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d110      	bne.n	8008736 <osMessageQueueNew+0x8c>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10c      	bne.n	8008736 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008720:	2b00      	cmp	r3, #0
 8008722:	d108      	bne.n	8008736 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d104      	bne.n	8008736 <osMessageQueueNew+0x8c>
          mem = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	61bb      	str	r3, [r7, #24]
 8008730:	e001      	b.n	8008736 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d10b      	bne.n	8008754 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	691a      	ldr	r2, [r3, #16]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	2100      	movs	r1, #0
 8008746:	9100      	str	r1, [sp, #0]
 8008748:	68b9      	ldr	r1, [r7, #8]
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f000 fa2e 	bl	8008bac <xQueueGenericCreateStatic>
 8008750:	61f8      	str	r0, [r7, #28]
 8008752:	e008      	b.n	8008766 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d105      	bne.n	8008766 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800875a:	2200      	movs	r2, #0
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 fa9c 	bl	8008c9c <xQueueGenericCreate>
 8008764:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00c      	beq.n	8008786 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <osMessageQueueNew+0xd0>
        name = attr->name;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	617b      	str	r3, [r7, #20]
 8008778:	e001      	b.n	800877e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800877a:	2300      	movs	r3, #0
 800877c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800877e:	6979      	ldr	r1, [r7, #20]
 8008780:	69f8      	ldr	r0, [r7, #28]
 8008782:	f000 fef3 	bl	800956c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008786:	69fb      	ldr	r3, [r7, #28]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3720      	adds	r7, #32
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	4613      	mov	r3, r2
 800879e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087a8:	f3ef 8305 	mrs	r3, IPSR
 80087ac:	617b      	str	r3, [r7, #20]
  return(result);
 80087ae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d028      	beq.n	8008806 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d005      	beq.n	80087c6 <osMessageQueuePut+0x36>
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <osMessageQueuePut+0x36>
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80087c6:	f06f 0303 	mvn.w	r3, #3
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	e038      	b.n	8008840 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80087ce:	2300      	movs	r3, #0
 80087d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80087d2:	f107 0210 	add.w	r2, r7, #16
 80087d6:	2300      	movs	r3, #0
 80087d8:	68b9      	ldr	r1, [r7, #8]
 80087da:	69b8      	ldr	r0, [r7, #24]
 80087dc:	f000 fbba 	bl	8008f54 <xQueueGenericSendFromISR>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d003      	beq.n	80087ee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80087e6:	f06f 0302 	mvn.w	r3, #2
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	e028      	b.n	8008840 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d025      	beq.n	8008840 <osMessageQueuePut+0xb0>
 80087f4:	4b15      	ldr	r3, [pc, #84]	; (800884c <osMessageQueuePut+0xbc>)
 80087f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	e01c      	b.n	8008840 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <osMessageQueuePut+0x82>
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d103      	bne.n	800881a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008812:	f06f 0303 	mvn.w	r3, #3
 8008816:	61fb      	str	r3, [r7, #28]
 8008818:	e012      	b.n	8008840 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800881a:	2300      	movs	r3, #0
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	68b9      	ldr	r1, [r7, #8]
 8008820:	69b8      	ldr	r0, [r7, #24]
 8008822:	f000 fa99 	bl	8008d58 <xQueueGenericSend>
 8008826:	4603      	mov	r3, r0
 8008828:	2b01      	cmp	r3, #1
 800882a:	d009      	beq.n	8008840 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008832:	f06f 0301 	mvn.w	r3, #1
 8008836:	61fb      	str	r3, [r7, #28]
 8008838:	e002      	b.n	8008840 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800883a:	f06f 0302 	mvn.w	r3, #2
 800883e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008840:	69fb      	ldr	r3, [r7, #28]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3720      	adds	r7, #32
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	e000ed04 	.word	0xe000ed04

08008850 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b088      	sub	sp, #32
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008862:	2300      	movs	r3, #0
 8008864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008866:	f3ef 8305 	mrs	r3, IPSR
 800886a:	617b      	str	r3, [r7, #20]
  return(result);
 800886c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800886e:	2b00      	cmp	r3, #0
 8008870:	d028      	beq.n	80088c4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d005      	beq.n	8008884 <osMessageQueueGet+0x34>
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <osMessageQueueGet+0x34>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008884:	f06f 0303 	mvn.w	r3, #3
 8008888:	61fb      	str	r3, [r7, #28]
 800888a:	e037      	b.n	80088fc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800888c:	2300      	movs	r3, #0
 800888e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008890:	f107 0310 	add.w	r3, r7, #16
 8008894:	461a      	mov	r2, r3
 8008896:	68b9      	ldr	r1, [r7, #8]
 8008898:	69b8      	ldr	r0, [r7, #24]
 800889a:	f000 fcd7 	bl	800924c <xQueueReceiveFromISR>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d003      	beq.n	80088ac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80088a4:	f06f 0302 	mvn.w	r3, #2
 80088a8:	61fb      	str	r3, [r7, #28]
 80088aa:	e027      	b.n	80088fc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d024      	beq.n	80088fc <osMessageQueueGet+0xac>
 80088b2:	4b15      	ldr	r3, [pc, #84]	; (8008908 <osMessageQueueGet+0xb8>)
 80088b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	e01b      	b.n	80088fc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <osMessageQueueGet+0x80>
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d103      	bne.n	80088d8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80088d0:	f06f 0303 	mvn.w	r3, #3
 80088d4:	61fb      	str	r3, [r7, #28]
 80088d6:	e011      	b.n	80088fc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	68b9      	ldr	r1, [r7, #8]
 80088dc:	69b8      	ldr	r0, [r7, #24]
 80088de:	f000 fbd5 	bl	800908c <xQueueReceive>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d009      	beq.n	80088fc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80088ee:	f06f 0301 	mvn.w	r3, #1
 80088f2:	61fb      	str	r3, [r7, #28]
 80088f4:	e002      	b.n	80088fc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80088f6:	f06f 0302 	mvn.w	r3, #2
 80088fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80088fc:	69fb      	ldr	r3, [r7, #28]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3720      	adds	r7, #32
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	e000ed04 	.word	0xe000ed04

0800890c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4a07      	ldr	r2, [pc, #28]	; (8008938 <vApplicationGetIdleTaskMemory+0x2c>)
 800891c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	4a06      	ldr	r2, [pc, #24]	; (800893c <vApplicationGetIdleTaskMemory+0x30>)
 8008922:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2280      	movs	r2, #128	; 0x80
 8008928:	601a      	str	r2, [r3, #0]
}
 800892a:	bf00      	nop
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	20000274 	.word	0x20000274
 800893c:	2000031c 	.word	0x2000031c

08008940 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4a07      	ldr	r2, [pc, #28]	; (800896c <vApplicationGetTimerTaskMemory+0x2c>)
 8008950:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	4a06      	ldr	r2, [pc, #24]	; (8008970 <vApplicationGetTimerTaskMemory+0x30>)
 8008956:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800895e:	601a      	str	r2, [r3, #0]
}
 8008960:	bf00      	nop
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	2000051c 	.word	0x2000051c
 8008970:	200005c4 	.word	0x200005c4

08008974 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f103 0208 	add.w	r2, r3, #8
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f04f 32ff 	mov.w	r2, #4294967295
 800898c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f103 0208 	add.w	r2, r3, #8
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f103 0208 	add.w	r2, r3, #8
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089ce:	b480      	push	{r7}
 80089d0:	b085      	sub	sp, #20
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	601a      	str	r2, [r3, #0]
}
 8008a0a:	bf00      	nop
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a16:	b480      	push	{r7}
 8008a18:	b085      	sub	sp, #20
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2c:	d103      	bne.n	8008a36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	e00c      	b.n	8008a50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3308      	adds	r3, #8
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	e002      	b.n	8008a44 <vListInsert+0x2e>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d2f6      	bcs.n	8008a3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	601a      	str	r2, [r3, #0]
}
 8008a7c:	bf00      	nop
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6892      	ldr	r2, [r2, #8]
 8008a9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	6852      	ldr	r2, [r2, #4]
 8008aa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d103      	bne.n	8008abc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	1e5a      	subs	r2, r3, #1
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b06:	f002 f935 	bl	800ad74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b16:	fb01 f303 	mul.w	r3, r1, r3
 8008b1a:	441a      	add	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b36:	3b01      	subs	r3, #1
 8008b38:	68f9      	ldr	r1, [r7, #12]
 8008b3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b3c:	fb01 f303 	mul.w	r3, r1, r3
 8008b40:	441a      	add	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	22ff      	movs	r2, #255	; 0xff
 8008b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	22ff      	movs	r2, #255	; 0xff
 8008b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d114      	bne.n	8008b86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d01a      	beq.n	8008b9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3310      	adds	r3, #16
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 f9e3 	bl	8009f34 <xTaskRemoveFromEventList>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d012      	beq.n	8008b9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b74:	4b0c      	ldr	r3, [pc, #48]	; (8008ba8 <xQueueGenericReset+0xcc>)
 8008b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	e009      	b.n	8008b9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3310      	adds	r3, #16
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7ff fef2 	bl	8008974 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3324      	adds	r3, #36	; 0x24
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7ff feed 	bl	8008974 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b9a:	f002 f91b 	bl	800add4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b9e:	2301      	movs	r3, #1
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	e000ed04 	.word	0xe000ed04

08008bac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08e      	sub	sp, #56	; 0x38
 8008bb0:	af02      	add	r7, sp, #8
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <xQueueGenericCreateStatic+0x52>
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <xQueueGenericCreateStatic+0x56>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e000      	b.n	8008c04 <xQueueGenericCreateStatic+0x58>
 8008c02:	2300      	movs	r3, #0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10a      	bne.n	8008c1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	623b      	str	r3, [r7, #32]
}
 8008c1a:	bf00      	nop
 8008c1c:	e7fe      	b.n	8008c1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d102      	bne.n	8008c2a <xQueueGenericCreateStatic+0x7e>
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <xQueueGenericCreateStatic+0x82>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <xQueueGenericCreateStatic+0x84>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	61fb      	str	r3, [r7, #28]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c4a:	2350      	movs	r3, #80	; 0x50
 8008c4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2b50      	cmp	r3, #80	; 0x50
 8008c52:	d00a      	beq.n	8008c6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	61bb      	str	r3, [r7, #24]
}
 8008c66:	bf00      	nop
 8008c68:	e7fe      	b.n	8008c68 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00d      	beq.n	8008c92 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	4613      	mov	r3, r2
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 f83f 	bl	8008d10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3730      	adds	r7, #48	; 0x30
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08a      	sub	sp, #40	; 0x28
 8008ca0:	af02      	add	r7, sp, #8
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10a      	bne.n	8008cc6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	613b      	str	r3, [r7, #16]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	fb02 f303 	mul.w	r3, r2, r3
 8008cce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	3350      	adds	r3, #80	; 0x50
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f002 f96f 	bl	800afb8 <pvPortMalloc>
 8008cda:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d011      	beq.n	8008d06 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	3350      	adds	r3, #80	; 0x50
 8008cea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cf4:	79fa      	ldrb	r2, [r7, #7]
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	68b9      	ldr	r1, [r7, #8]
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 f805 	bl	8008d10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d06:	69bb      	ldr	r3, [r7, #24]
	}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3720      	adds	r7, #32
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
 8008d1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d103      	bne.n	8008d2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	601a      	str	r2, [r3, #0]
 8008d2a:	e002      	b.n	8008d32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d3e:	2101      	movs	r1, #1
 8008d40:	69b8      	ldr	r0, [r7, #24]
 8008d42:	f7ff fecb 	bl	8008adc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	78fa      	ldrb	r2, [r7, #3]
 8008d4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
	...

08008d58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08e      	sub	sp, #56	; 0x38
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
 8008d64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d66:	2300      	movs	r3, #0
 8008d68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <xQueueGenericSend+0x32>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d86:	bf00      	nop
 8008d88:	e7fe      	b.n	8008d88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <xQueueGenericSend+0x40>
 8008d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <xQueueGenericSend+0x44>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e000      	b.n	8008d9e <xQueueGenericSend+0x46>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10a      	bne.n	8008db8 <xQueueGenericSend+0x60>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008db4:	bf00      	nop
 8008db6:	e7fe      	b.n	8008db6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d103      	bne.n	8008dc6 <xQueueGenericSend+0x6e>
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d101      	bne.n	8008dca <xQueueGenericSend+0x72>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e000      	b.n	8008dcc <xQueueGenericSend+0x74>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10a      	bne.n	8008de6 <xQueueGenericSend+0x8e>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	623b      	str	r3, [r7, #32]
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008de6:	f001 fa67 	bl	800a2b8 <xTaskGetSchedulerState>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d102      	bne.n	8008df6 <xQueueGenericSend+0x9e>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <xQueueGenericSend+0xa2>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e000      	b.n	8008dfc <xQueueGenericSend+0xa4>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10a      	bne.n	8008e16 <xQueueGenericSend+0xbe>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	61fb      	str	r3, [r7, #28]
}
 8008e12:	bf00      	nop
 8008e14:	e7fe      	b.n	8008e14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e16:	f001 ffad 	bl	800ad74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d302      	bcc.n	8008e2c <xQueueGenericSend+0xd4>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d129      	bne.n	8008e80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e32:	f000 fa8b 	bl	800934c <prvCopyDataToQueue>
 8008e36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d010      	beq.n	8008e62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	3324      	adds	r3, #36	; 0x24
 8008e44:	4618      	mov	r0, r3
 8008e46:	f001 f875 	bl	8009f34 <xTaskRemoveFromEventList>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d013      	beq.n	8008e78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e50:	4b3f      	ldr	r3, [pc, #252]	; (8008f50 <xQueueGenericSend+0x1f8>)
 8008e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	e00a      	b.n	8008e78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d007      	beq.n	8008e78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e68:	4b39      	ldr	r3, [pc, #228]	; (8008f50 <xQueueGenericSend+0x1f8>)
 8008e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e78:	f001 ffac 	bl	800add4 <vPortExitCritical>
				return pdPASS;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e063      	b.n	8008f48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d103      	bne.n	8008e8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e86:	f001 ffa5 	bl	800add4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e05c      	b.n	8008f48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d106      	bne.n	8008ea2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e94:	f107 0314 	add.w	r3, r7, #20
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f001 f8af 	bl	8009ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ea2:	f001 ff97 	bl	800add4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ea6:	f000 fe1b 	bl	8009ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008eaa:	f001 ff63 	bl	800ad74 <vPortEnterCritical>
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eb4:	b25b      	sxtb	r3, r3
 8008eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eba:	d103      	bne.n	8008ec4 <xQueueGenericSend+0x16c>
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008eca:	b25b      	sxtb	r3, r3
 8008ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed0:	d103      	bne.n	8008eda <xQueueGenericSend+0x182>
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008eda:	f001 ff7b 	bl	800add4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ede:	1d3a      	adds	r2, r7, #4
 8008ee0:	f107 0314 	add.w	r3, r7, #20
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f001 f89e 	bl	800a028 <xTaskCheckForTimeOut>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d124      	bne.n	8008f3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ef4:	f000 fb22 	bl	800953c <prvIsQueueFull>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d018      	beq.n	8008f30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	3310      	adds	r3, #16
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	4611      	mov	r1, r2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 ffc4 	bl	8009e94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f0e:	f000 faad 	bl	800946c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f12:	f000 fdf3 	bl	8009afc <xTaskResumeAll>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f47f af7c 	bne.w	8008e16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f1e:	4b0c      	ldr	r3, [pc, #48]	; (8008f50 <xQueueGenericSend+0x1f8>)
 8008f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	e772      	b.n	8008e16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f32:	f000 fa9b 	bl	800946c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f36:	f000 fde1 	bl	8009afc <xTaskResumeAll>
 8008f3a:	e76c      	b.n	8008e16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f3e:	f000 fa95 	bl	800946c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f42:	f000 fddb 	bl	8009afc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3738      	adds	r7, #56	; 0x38
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	e000ed04 	.word	0xe000ed04

08008f54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b090      	sub	sp, #64	; 0x40
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10a      	bne.n	8008f82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f7e:	bf00      	nop
 8008f80:	e7fe      	b.n	8008f80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d103      	bne.n	8008f90 <xQueueGenericSendFromISR+0x3c>
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <xQueueGenericSendFromISR+0x40>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <xQueueGenericSendFromISR+0x42>
 8008f94:	2300      	movs	r3, #0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10a      	bne.n	8008fb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fac:	bf00      	nop
 8008fae:	e7fe      	b.n	8008fae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d103      	bne.n	8008fbe <xQueueGenericSendFromISR+0x6a>
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d101      	bne.n	8008fc2 <xQueueGenericSendFromISR+0x6e>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e000      	b.n	8008fc4 <xQueueGenericSendFromISR+0x70>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10a      	bne.n	8008fde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	623b      	str	r3, [r7, #32]
}
 8008fda:	bf00      	nop
 8008fdc:	e7fe      	b.n	8008fdc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fde:	f001 ffab 	bl	800af38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008fe2:	f3ef 8211 	mrs	r2, BASEPRI
 8008fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	61fa      	str	r2, [r7, #28]
 8008ff8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ffa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ffc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009006:	429a      	cmp	r2, r3
 8009008:	d302      	bcc.n	8009010 <xQueueGenericSendFromISR+0xbc>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b02      	cmp	r3, #2
 800900e:	d12f      	bne.n	8009070 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	68b9      	ldr	r1, [r7, #8]
 8009024:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009026:	f000 f991 	bl	800934c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800902a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800902e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009032:	d112      	bne.n	800905a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	2b00      	cmp	r3, #0
 800903a:	d016      	beq.n	800906a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800903c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903e:	3324      	adds	r3, #36	; 0x24
 8009040:	4618      	mov	r0, r3
 8009042:	f000 ff77 	bl	8009f34 <xTaskRemoveFromEventList>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00e      	beq.n	800906a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00b      	beq.n	800906a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	e007      	b.n	800906a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800905a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800905e:	3301      	adds	r3, #1
 8009060:	b2db      	uxtb	r3, r3
 8009062:	b25a      	sxtb	r2, r3
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800906a:	2301      	movs	r3, #1
 800906c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800906e:	e001      	b.n	8009074 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009070:	2300      	movs	r3, #0
 8009072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009076:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800907e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009082:	4618      	mov	r0, r3
 8009084:	3740      	adds	r7, #64	; 0x40
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
	...

0800908c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08c      	sub	sp, #48	; 0x30
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009098:	2300      	movs	r3, #0
 800909a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10a      	bne.n	80090bc <xQueueReceive+0x30>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	623b      	str	r3, [r7, #32]
}
 80090b8:	bf00      	nop
 80090ba:	e7fe      	b.n	80090ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d103      	bne.n	80090ca <xQueueReceive+0x3e>
 80090c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <xQueueReceive+0x42>
 80090ca:	2301      	movs	r3, #1
 80090cc:	e000      	b.n	80090d0 <xQueueReceive+0x44>
 80090ce:	2300      	movs	r3, #0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10a      	bne.n	80090ea <xQueueReceive+0x5e>
	__asm volatile
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	61fb      	str	r3, [r7, #28]
}
 80090e6:	bf00      	nop
 80090e8:	e7fe      	b.n	80090e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090ea:	f001 f8e5 	bl	800a2b8 <xTaskGetSchedulerState>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d102      	bne.n	80090fa <xQueueReceive+0x6e>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <xQueueReceive+0x72>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e000      	b.n	8009100 <xQueueReceive+0x74>
 80090fe:	2300      	movs	r3, #0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10a      	bne.n	800911a <xQueueReceive+0x8e>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	61bb      	str	r3, [r7, #24]
}
 8009116:	bf00      	nop
 8009118:	e7fe      	b.n	8009118 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800911a:	f001 fe2b 	bl	800ad74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009122:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	2b00      	cmp	r3, #0
 8009128:	d01f      	beq.n	800916a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800912a:	68b9      	ldr	r1, [r7, #8]
 800912c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800912e:	f000 f977 	bl	8009420 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	1e5a      	subs	r2, r3, #1
 8009136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009138:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00f      	beq.n	8009162 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009144:	3310      	adds	r3, #16
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fef4 	bl	8009f34 <xTaskRemoveFromEventList>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d007      	beq.n	8009162 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009152:	4b3d      	ldr	r3, [pc, #244]	; (8009248 <xQueueReceive+0x1bc>)
 8009154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009162:	f001 fe37 	bl	800add4 <vPortExitCritical>
				return pdPASS;
 8009166:	2301      	movs	r3, #1
 8009168:	e069      	b.n	800923e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d103      	bne.n	8009178 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009170:	f001 fe30 	bl	800add4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009174:	2300      	movs	r3, #0
 8009176:	e062      	b.n	800923e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917a:	2b00      	cmp	r3, #0
 800917c:	d106      	bne.n	800918c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800917e:	f107 0310 	add.w	r3, r7, #16
 8009182:	4618      	mov	r0, r3
 8009184:	f000 ff3a 	bl	8009ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009188:	2301      	movs	r3, #1
 800918a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800918c:	f001 fe22 	bl	800add4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009190:	f000 fca6 	bl	8009ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009194:	f001 fdee 	bl	800ad74 <vPortEnterCritical>
 8009198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800919e:	b25b      	sxtb	r3, r3
 80091a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a4:	d103      	bne.n	80091ae <xQueueReceive+0x122>
 80091a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091b4:	b25b      	sxtb	r3, r3
 80091b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ba:	d103      	bne.n	80091c4 <xQueueReceive+0x138>
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091c4:	f001 fe06 	bl	800add4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091c8:	1d3a      	adds	r2, r7, #4
 80091ca:	f107 0310 	add.w	r3, r7, #16
 80091ce:	4611      	mov	r1, r2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 ff29 	bl	800a028 <xTaskCheckForTimeOut>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d123      	bne.n	8009224 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091de:	f000 f997 	bl	8009510 <prvIsQueueEmpty>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d017      	beq.n	8009218 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ea:	3324      	adds	r3, #36	; 0x24
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	4611      	mov	r1, r2
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 fe4f 	bl	8009e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091f8:	f000 f938 	bl	800946c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091fc:	f000 fc7e 	bl	8009afc <xTaskResumeAll>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d189      	bne.n	800911a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009206:	4b10      	ldr	r3, [pc, #64]	; (8009248 <xQueueReceive+0x1bc>)
 8009208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	e780      	b.n	800911a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800921a:	f000 f927 	bl	800946c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800921e:	f000 fc6d 	bl	8009afc <xTaskResumeAll>
 8009222:	e77a      	b.n	800911a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009226:	f000 f921 	bl	800946c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800922a:	f000 fc67 	bl	8009afc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800922e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009230:	f000 f96e 	bl	8009510 <prvIsQueueEmpty>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	f43f af6f 	beq.w	800911a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800923c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800923e:	4618      	mov	r0, r3
 8009240:	3730      	adds	r7, #48	; 0x30
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	e000ed04 	.word	0xe000ed04

0800924c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08e      	sub	sp, #56	; 0x38
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800925c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10a      	bne.n	8009278 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	623b      	str	r3, [r7, #32]
}
 8009274:	bf00      	nop
 8009276:	e7fe      	b.n	8009276 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d103      	bne.n	8009286 <xQueueReceiveFromISR+0x3a>
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <xQueueReceiveFromISR+0x3e>
 8009286:	2301      	movs	r3, #1
 8009288:	e000      	b.n	800928c <xQueueReceiveFromISR+0x40>
 800928a:	2300      	movs	r3, #0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10a      	bne.n	80092a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	61fb      	str	r3, [r7, #28]
}
 80092a2:	bf00      	nop
 80092a4:	e7fe      	b.n	80092a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092a6:	f001 fe47 	bl	800af38 <vPortValidateInterruptPriority>
	__asm volatile
 80092aa:	f3ef 8211 	mrs	r2, BASEPRI
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	61ba      	str	r2, [r7, #24]
 80092c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80092c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d02f      	beq.n	8009332 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092dc:	68b9      	ldr	r1, [r7, #8]
 80092de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092e0:	f000 f89e 	bl	8009420 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e6:	1e5a      	subs	r2, r3, #1
 80092e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80092ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f4:	d112      	bne.n	800931c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d016      	beq.n	800932c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	3310      	adds	r3, #16
 8009302:	4618      	mov	r0, r3
 8009304:	f000 fe16 	bl	8009f34 <xTaskRemoveFromEventList>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00e      	beq.n	800932c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00b      	beq.n	800932c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	e007      	b.n	800932c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800931c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009320:	3301      	adds	r3, #1
 8009322:	b2db      	uxtb	r3, r3
 8009324:	b25a      	sxtb	r2, r3
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800932c:	2301      	movs	r3, #1
 800932e:	637b      	str	r3, [r7, #52]	; 0x34
 8009330:	e001      	b.n	8009336 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009332:	2300      	movs	r3, #0
 8009334:	637b      	str	r3, [r7, #52]	; 0x34
 8009336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009338:	613b      	str	r3, [r7, #16]
	__asm volatile
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f383 8811 	msr	BASEPRI, r3
}
 8009340:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009344:	4618      	mov	r0, r3
 8009346:	3738      	adds	r7, #56	; 0x38
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009358:	2300      	movs	r3, #0
 800935a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10d      	bne.n	8009386 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d14d      	bne.n	800940e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 ffbc 	bl	800a2f4 <xTaskPriorityDisinherit>
 800937c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	609a      	str	r2, [r3, #8]
 8009384:	e043      	b.n	800940e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d119      	bne.n	80093c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6858      	ldr	r0, [r3, #4]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009394:	461a      	mov	r2, r3
 8009396:	68b9      	ldr	r1, [r7, #8]
 8009398:	f002 ffea 	bl	800c370 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a4:	441a      	add	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d32b      	bcc.n	800940e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	605a      	str	r2, [r3, #4]
 80093be:	e026      	b.n	800940e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	68d8      	ldr	r0, [r3, #12]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c8:	461a      	mov	r2, r3
 80093ca:	68b9      	ldr	r1, [r7, #8]
 80093cc:	f002 ffd0 	bl	800c370 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	68da      	ldr	r2, [r3, #12]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d8:	425b      	negs	r3, r3
 80093da:	441a      	add	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	68da      	ldr	r2, [r3, #12]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d207      	bcs.n	80093fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	689a      	ldr	r2, [r3, #8]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f4:	425b      	negs	r3, r3
 80093f6:	441a      	add	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d105      	bne.n	800940e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	3b01      	subs	r3, #1
 800940c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009416:	697b      	ldr	r3, [r7, #20]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3718      	adds	r7, #24
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942e:	2b00      	cmp	r3, #0
 8009430:	d018      	beq.n	8009464 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68da      	ldr	r2, [r3, #12]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943a:	441a      	add	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68da      	ldr	r2, [r3, #12]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	429a      	cmp	r2, r3
 800944a:	d303      	bcc.n	8009454 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	68d9      	ldr	r1, [r3, #12]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945c:	461a      	mov	r2, r3
 800945e:	6838      	ldr	r0, [r7, #0]
 8009460:	f002 ff86 	bl	800c370 <memcpy>
	}
}
 8009464:	bf00      	nop
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009474:	f001 fc7e 	bl	800ad74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800947e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009480:	e011      	b.n	80094a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	2b00      	cmp	r3, #0
 8009488:	d012      	beq.n	80094b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	3324      	adds	r3, #36	; 0x24
 800948e:	4618      	mov	r0, r3
 8009490:	f000 fd50 	bl	8009f34 <xTaskRemoveFromEventList>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d001      	beq.n	800949e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800949a:	f000 fe27 	bl	800a0ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800949e:	7bfb      	ldrb	r3, [r7, #15]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	dce9      	bgt.n	8009482 <prvUnlockQueue+0x16>
 80094ae:	e000      	b.n	80094b2 <prvUnlockQueue+0x46>
					break;
 80094b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	22ff      	movs	r2, #255	; 0xff
 80094b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80094ba:	f001 fc8b 	bl	800add4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80094be:	f001 fc59 	bl	800ad74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094ca:	e011      	b.n	80094f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d012      	beq.n	80094fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3310      	adds	r3, #16
 80094d8:	4618      	mov	r0, r3
 80094da:	f000 fd2b 	bl	8009f34 <xTaskRemoveFromEventList>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80094e4:	f000 fe02 	bl	800a0ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	dce9      	bgt.n	80094cc <prvUnlockQueue+0x60>
 80094f8:	e000      	b.n	80094fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80094fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	22ff      	movs	r2, #255	; 0xff
 8009500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009504:	f001 fc66 	bl	800add4 <vPortExitCritical>
}
 8009508:	bf00      	nop
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009518:	f001 fc2c 	bl	800ad74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009520:	2b00      	cmp	r3, #0
 8009522:	d102      	bne.n	800952a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009524:	2301      	movs	r3, #1
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	e001      	b.n	800952e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800952a:	2300      	movs	r3, #0
 800952c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800952e:	f001 fc51 	bl	800add4 <vPortExitCritical>

	return xReturn;
 8009532:	68fb      	ldr	r3, [r7, #12]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009544:	f001 fc16 	bl	800ad74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009550:	429a      	cmp	r2, r3
 8009552:	d102      	bne.n	800955a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	e001      	b.n	800955e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800955e:	f001 fc39 	bl	800add4 <vPortExitCritical>

	return xReturn;
 8009562:	68fb      	ldr	r3, [r7, #12]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009576:	2300      	movs	r3, #0
 8009578:	60fb      	str	r3, [r7, #12]
 800957a:	e014      	b.n	80095a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800957c:	4a0f      	ldr	r2, [pc, #60]	; (80095bc <vQueueAddToRegistry+0x50>)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10b      	bne.n	80095a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009588:	490c      	ldr	r1, [pc, #48]	; (80095bc <vQueueAddToRegistry+0x50>)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	683a      	ldr	r2, [r7, #0]
 800958e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009592:	4a0a      	ldr	r2, [pc, #40]	; (80095bc <vQueueAddToRegistry+0x50>)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	4413      	add	r3, r2
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800959e:	e006      	b.n	80095ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	3301      	adds	r3, #1
 80095a4:	60fb      	str	r3, [r7, #12]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b07      	cmp	r3, #7
 80095aa:	d9e7      	bls.n	800957c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	200009c4 	.word	0x200009c4

080095c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80095d0:	f001 fbd0 	bl	800ad74 <vPortEnterCritical>
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095da:	b25b      	sxtb	r3, r3
 80095dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e0:	d103      	bne.n	80095ea <vQueueWaitForMessageRestricted+0x2a>
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095f0:	b25b      	sxtb	r3, r3
 80095f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f6:	d103      	bne.n	8009600 <vQueueWaitForMessageRestricted+0x40>
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009600:	f001 fbe8 	bl	800add4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009608:	2b00      	cmp	r3, #0
 800960a:	d106      	bne.n	800961a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	3324      	adds	r3, #36	; 0x24
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	68b9      	ldr	r1, [r7, #8]
 8009614:	4618      	mov	r0, r3
 8009616:	f000 fc61 	bl	8009edc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800961a:	6978      	ldr	r0, [r7, #20]
 800961c:	f7ff ff26 	bl	800946c <prvUnlockQueue>
	}
 8009620:	bf00      	nop
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08e      	sub	sp, #56	; 0x38
 800962c:	af04      	add	r7, sp, #16
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
 8009634:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <xTaskCreateStatic+0x2a>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	623b      	str	r3, [r7, #32]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <xTaskCreateStatic+0x46>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	61fb      	str	r3, [r7, #28]
}
 800966a:	bf00      	nop
 800966c:	e7fe      	b.n	800966c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800966e:	23a8      	movs	r3, #168	; 0xa8
 8009670:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	2ba8      	cmp	r3, #168	; 0xa8
 8009676:	d00a      	beq.n	800968e <xTaskCreateStatic+0x66>
	__asm volatile
 8009678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	61bb      	str	r3, [r7, #24]
}
 800968a:	bf00      	nop
 800968c:	e7fe      	b.n	800968c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800968e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01e      	beq.n	80096d4 <xTaskCreateStatic+0xac>
 8009696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01b      	beq.n	80096d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800969c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80096a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a8:	2202      	movs	r2, #2
 80096aa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80096ae:	2300      	movs	r3, #0
 80096b0:	9303      	str	r3, [sp, #12]
 80096b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b4:	9302      	str	r3, [sp, #8]
 80096b6:	f107 0314 	add.w	r3, r7, #20
 80096ba:	9301      	str	r3, [sp, #4]
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	68b9      	ldr	r1, [r7, #8]
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 f850 	bl	800976c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80096ce:	f000 f8f3 	bl	80098b8 <prvAddNewTaskToReadyList>
 80096d2:	e001      	b.n	80096d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80096d4:	2300      	movs	r3, #0
 80096d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80096d8:	697b      	ldr	r3, [r7, #20]
	}
 80096da:	4618      	mov	r0, r3
 80096dc:	3728      	adds	r7, #40	; 0x28
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b08c      	sub	sp, #48	; 0x30
 80096e6:	af04      	add	r7, sp, #16
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	60b9      	str	r1, [r7, #8]
 80096ec:	603b      	str	r3, [r7, #0]
 80096ee:	4613      	mov	r3, r2
 80096f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80096f2:	88fb      	ldrh	r3, [r7, #6]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4618      	mov	r0, r3
 80096f8:	f001 fc5e 	bl	800afb8 <pvPortMalloc>
 80096fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00e      	beq.n	8009722 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009704:	20a8      	movs	r0, #168	; 0xa8
 8009706:	f001 fc57 	bl	800afb8 <pvPortMalloc>
 800970a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	631a      	str	r2, [r3, #48]	; 0x30
 8009718:	e005      	b.n	8009726 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800971a:	6978      	ldr	r0, [r7, #20]
 800971c:	f001 fd18 	bl	800b150 <vPortFree>
 8009720:	e001      	b.n	8009726 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009722:	2300      	movs	r3, #0
 8009724:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d017      	beq.n	800975c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009734:	88fa      	ldrh	r2, [r7, #6]
 8009736:	2300      	movs	r3, #0
 8009738:	9303      	str	r3, [sp, #12]
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	9302      	str	r3, [sp, #8]
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68b9      	ldr	r1, [r7, #8]
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f000 f80e 	bl	800976c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009750:	69f8      	ldr	r0, [r7, #28]
 8009752:	f000 f8b1 	bl	80098b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009756:	2301      	movs	r3, #1
 8009758:	61bb      	str	r3, [r7, #24]
 800975a:	e002      	b.n	8009762 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800975c:	f04f 33ff 	mov.w	r3, #4294967295
 8009760:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009762:	69bb      	ldr	r3, [r7, #24]
	}
 8009764:	4618      	mov	r0, r3
 8009766:	3720      	adds	r7, #32
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	461a      	mov	r2, r3
 8009784:	21a5      	movs	r1, #165	; 0xa5
 8009786:	f002 fd59 	bl	800c23c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009794:	3b01      	subs	r3, #1
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	f023 0307 	bic.w	r3, r3, #7
 80097a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00a      	beq.n	80097c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	617b      	str	r3, [r7, #20]
}
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d01f      	beq.n	800980a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097ca:	2300      	movs	r3, #0
 80097cc:	61fb      	str	r3, [r7, #28]
 80097ce:	e012      	b.n	80097f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	4413      	add	r3, r2
 80097d6:	7819      	ldrb	r1, [r3, #0]
 80097d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	4413      	add	r3, r2
 80097de:	3334      	adds	r3, #52	; 0x34
 80097e0:	460a      	mov	r2, r1
 80097e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	4413      	add	r3, r2
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d006      	beq.n	80097fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	3301      	adds	r3, #1
 80097f4:	61fb      	str	r3, [r7, #28]
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	2b0f      	cmp	r3, #15
 80097fa:	d9e9      	bls.n	80097d0 <prvInitialiseNewTask+0x64>
 80097fc:	e000      	b.n	8009800 <prvInitialiseNewTask+0x94>
			{
				break;
 80097fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009808:	e003      	b.n	8009812 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	2b37      	cmp	r3, #55	; 0x37
 8009816:	d901      	bls.n	800981c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009818:	2337      	movs	r3, #55	; 0x37
 800981a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800981c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009820:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009826:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982a:	2200      	movs	r2, #0
 800982c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009830:	3304      	adds	r3, #4
 8009832:	4618      	mov	r0, r3
 8009834:	f7ff f8be 	bl	80089b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	3318      	adds	r3, #24
 800983c:	4618      	mov	r0, r3
 800983e:	f7ff f8b9 	bl	80089b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009846:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009850:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009856:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985a:	2200      	movs	r2, #0
 800985c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009862:	2200      	movs	r2, #0
 8009864:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986a:	3354      	adds	r3, #84	; 0x54
 800986c:	224c      	movs	r2, #76	; 0x4c
 800986e:	2100      	movs	r1, #0
 8009870:	4618      	mov	r0, r3
 8009872:	f002 fce3 	bl	800c23c <memset>
 8009876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009878:	4a0c      	ldr	r2, [pc, #48]	; (80098ac <prvInitialiseNewTask+0x140>)
 800987a:	659a      	str	r2, [r3, #88]	; 0x58
 800987c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987e:	4a0c      	ldr	r2, [pc, #48]	; (80098b0 <prvInitialiseNewTask+0x144>)
 8009880:	65da      	str	r2, [r3, #92]	; 0x5c
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	4a0b      	ldr	r2, [pc, #44]	; (80098b4 <prvInitialiseNewTask+0x148>)
 8009886:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	68f9      	ldr	r1, [r7, #12]
 800988c:	69b8      	ldr	r0, [r7, #24]
 800988e:	f001 f941 	bl	800ab14 <pxPortInitialiseStack>
 8009892:	4602      	mov	r2, r0
 8009894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009896:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	2b00      	cmp	r3, #0
 800989c:	d002      	beq.n	80098a4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800989e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098a4:	bf00      	nop
 80098a6:	3720      	adds	r7, #32
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	20003820 	.word	0x20003820
 80098b0:	20003888 	.word	0x20003888
 80098b4:	200038f0 	.word	0x200038f0

080098b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80098c0:	f001 fa58 	bl	800ad74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80098c4:	4b2d      	ldr	r3, [pc, #180]	; (800997c <prvAddNewTaskToReadyList+0xc4>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3301      	adds	r3, #1
 80098ca:	4a2c      	ldr	r2, [pc, #176]	; (800997c <prvAddNewTaskToReadyList+0xc4>)
 80098cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80098ce:	4b2c      	ldr	r3, [pc, #176]	; (8009980 <prvAddNewTaskToReadyList+0xc8>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d109      	bne.n	80098ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80098d6:	4a2a      	ldr	r2, [pc, #168]	; (8009980 <prvAddNewTaskToReadyList+0xc8>)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80098dc:	4b27      	ldr	r3, [pc, #156]	; (800997c <prvAddNewTaskToReadyList+0xc4>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d110      	bne.n	8009906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80098e4:	f000 fc26 	bl	800a134 <prvInitialiseTaskLists>
 80098e8:	e00d      	b.n	8009906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80098ea:	4b26      	ldr	r3, [pc, #152]	; (8009984 <prvAddNewTaskToReadyList+0xcc>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d109      	bne.n	8009906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80098f2:	4b23      	ldr	r3, [pc, #140]	; (8009980 <prvAddNewTaskToReadyList+0xc8>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d802      	bhi.n	8009906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009900:	4a1f      	ldr	r2, [pc, #124]	; (8009980 <prvAddNewTaskToReadyList+0xc8>)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009906:	4b20      	ldr	r3, [pc, #128]	; (8009988 <prvAddNewTaskToReadyList+0xd0>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3301      	adds	r3, #1
 800990c:	4a1e      	ldr	r2, [pc, #120]	; (8009988 <prvAddNewTaskToReadyList+0xd0>)
 800990e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009910:	4b1d      	ldr	r3, [pc, #116]	; (8009988 <prvAddNewTaskToReadyList+0xd0>)
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800991c:	4b1b      	ldr	r3, [pc, #108]	; (800998c <prvAddNewTaskToReadyList+0xd4>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	429a      	cmp	r2, r3
 8009922:	d903      	bls.n	800992c <prvAddNewTaskToReadyList+0x74>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009928:	4a18      	ldr	r2, [pc, #96]	; (800998c <prvAddNewTaskToReadyList+0xd4>)
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009930:	4613      	mov	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	4a15      	ldr	r2, [pc, #84]	; (8009990 <prvAddNewTaskToReadyList+0xd8>)
 800993a:	441a      	add	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3304      	adds	r3, #4
 8009940:	4619      	mov	r1, r3
 8009942:	4610      	mov	r0, r2
 8009944:	f7ff f843 	bl	80089ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009948:	f001 fa44 	bl	800add4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800994c:	4b0d      	ldr	r3, [pc, #52]	; (8009984 <prvAddNewTaskToReadyList+0xcc>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00e      	beq.n	8009972 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009954:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <prvAddNewTaskToReadyList+0xc8>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995e:	429a      	cmp	r2, r3
 8009960:	d207      	bcs.n	8009972 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009962:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <prvAddNewTaskToReadyList+0xdc>)
 8009964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009972:	bf00      	nop
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	20000ed8 	.word	0x20000ed8
 8009980:	20000a04 	.word	0x20000a04
 8009984:	20000ee4 	.word	0x20000ee4
 8009988:	20000ef4 	.word	0x20000ef4
 800998c:	20000ee0 	.word	0x20000ee0
 8009990:	20000a08 	.word	0x20000a08
 8009994:	e000ed04 	.word	0xe000ed04

08009998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80099a0:	2300      	movs	r3, #0
 80099a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d017      	beq.n	80099da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80099aa:	4b13      	ldr	r3, [pc, #76]	; (80099f8 <vTaskDelay+0x60>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00a      	beq.n	80099c8 <vTaskDelay+0x30>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	60bb      	str	r3, [r7, #8]
}
 80099c4:	bf00      	nop
 80099c6:	e7fe      	b.n	80099c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80099c8:	f000 f88a 	bl	8009ae0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80099cc:	2100      	movs	r1, #0
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fcfe 	bl	800a3d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80099d4:	f000 f892 	bl	8009afc <xTaskResumeAll>
 80099d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d107      	bne.n	80099f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80099e0:	4b06      	ldr	r3, [pc, #24]	; (80099fc <vTaskDelay+0x64>)
 80099e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099e6:	601a      	str	r2, [r3, #0]
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099f0:	bf00      	nop
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	20000f00 	.word	0x20000f00
 80099fc:	e000ed04 	.word	0xe000ed04

08009a00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08a      	sub	sp, #40	; 0x28
 8009a04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a0e:	463a      	mov	r2, r7
 8009a10:	1d39      	adds	r1, r7, #4
 8009a12:	f107 0308 	add.w	r3, r7, #8
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe ff78 	bl	800890c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	9202      	str	r2, [sp, #8]
 8009a24:	9301      	str	r3, [sp, #4]
 8009a26:	2300      	movs	r3, #0
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	460a      	mov	r2, r1
 8009a2e:	4924      	ldr	r1, [pc, #144]	; (8009ac0 <vTaskStartScheduler+0xc0>)
 8009a30:	4824      	ldr	r0, [pc, #144]	; (8009ac4 <vTaskStartScheduler+0xc4>)
 8009a32:	f7ff fdf9 	bl	8009628 <xTaskCreateStatic>
 8009a36:	4603      	mov	r3, r0
 8009a38:	4a23      	ldr	r2, [pc, #140]	; (8009ac8 <vTaskStartScheduler+0xc8>)
 8009a3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a3c:	4b22      	ldr	r3, [pc, #136]	; (8009ac8 <vTaskStartScheduler+0xc8>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009a44:	2301      	movs	r3, #1
 8009a46:	617b      	str	r3, [r7, #20]
 8009a48:	e001      	b.n	8009a4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d102      	bne.n	8009a5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009a54:	f000 fd10 	bl	800a478 <xTimerCreateTimerTask>
 8009a58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d11b      	bne.n	8009a98 <vTaskStartScheduler+0x98>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	613b      	str	r3, [r7, #16]
}
 8009a72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a74:	4b15      	ldr	r3, [pc, #84]	; (8009acc <vTaskStartScheduler+0xcc>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3354      	adds	r3, #84	; 0x54
 8009a7a:	4a15      	ldr	r2, [pc, #84]	; (8009ad0 <vTaskStartScheduler+0xd0>)
 8009a7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a7e:	4b15      	ldr	r3, [pc, #84]	; (8009ad4 <vTaskStartScheduler+0xd4>)
 8009a80:	f04f 32ff 	mov.w	r2, #4294967295
 8009a84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a86:	4b14      	ldr	r3, [pc, #80]	; (8009ad8 <vTaskStartScheduler+0xd8>)
 8009a88:	2201      	movs	r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a8c:	4b13      	ldr	r3, [pc, #76]	; (8009adc <vTaskStartScheduler+0xdc>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a92:	f001 f8cd 	bl	800ac30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a96:	e00e      	b.n	8009ab6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9e:	d10a      	bne.n	8009ab6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	60fb      	str	r3, [r7, #12]
}
 8009ab2:	bf00      	nop
 8009ab4:	e7fe      	b.n	8009ab4 <vTaskStartScheduler+0xb4>
}
 8009ab6:	bf00      	nop
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	0800cb10 	.word	0x0800cb10
 8009ac4:	0800a105 	.word	0x0800a105
 8009ac8:	20000efc 	.word	0x20000efc
 8009acc:	20000a04 	.word	0x20000a04
 8009ad0:	2000015c 	.word	0x2000015c
 8009ad4:	20000ef8 	.word	0x20000ef8
 8009ad8:	20000ee4 	.word	0x20000ee4
 8009adc:	20000edc 	.word	0x20000edc

08009ae0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ae4:	4b04      	ldr	r3, [pc, #16]	; (8009af8 <vTaskSuspendAll+0x18>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	4a03      	ldr	r2, [pc, #12]	; (8009af8 <vTaskSuspendAll+0x18>)
 8009aec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009aee:	bf00      	nop
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	20000f00 	.word	0x20000f00

08009afc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b02:	2300      	movs	r3, #0
 8009b04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b06:	2300      	movs	r3, #0
 8009b08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b0a:	4b42      	ldr	r3, [pc, #264]	; (8009c14 <xTaskResumeAll+0x118>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10a      	bne.n	8009b28 <xTaskResumeAll+0x2c>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	603b      	str	r3, [r7, #0]
}
 8009b24:	bf00      	nop
 8009b26:	e7fe      	b.n	8009b26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b28:	f001 f924 	bl	800ad74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b2c:	4b39      	ldr	r3, [pc, #228]	; (8009c14 <xTaskResumeAll+0x118>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	4a38      	ldr	r2, [pc, #224]	; (8009c14 <xTaskResumeAll+0x118>)
 8009b34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b36:	4b37      	ldr	r3, [pc, #220]	; (8009c14 <xTaskResumeAll+0x118>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d162      	bne.n	8009c04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b3e:	4b36      	ldr	r3, [pc, #216]	; (8009c18 <xTaskResumeAll+0x11c>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d05e      	beq.n	8009c04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b46:	e02f      	b.n	8009ba8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b48:	4b34      	ldr	r3, [pc, #208]	; (8009c1c <xTaskResumeAll+0x120>)
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3318      	adds	r3, #24
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe ff97 	bl	8008a88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe ff92 	bl	8008a88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b68:	4b2d      	ldr	r3, [pc, #180]	; (8009c20 <xTaskResumeAll+0x124>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d903      	bls.n	8009b78 <xTaskResumeAll+0x7c>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b74:	4a2a      	ldr	r2, [pc, #168]	; (8009c20 <xTaskResumeAll+0x124>)
 8009b76:	6013      	str	r3, [r2, #0]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4a27      	ldr	r2, [pc, #156]	; (8009c24 <xTaskResumeAll+0x128>)
 8009b86:	441a      	add	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4610      	mov	r0, r2
 8009b90:	f7fe ff1d 	bl	80089ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b98:	4b23      	ldr	r3, [pc, #140]	; (8009c28 <xTaskResumeAll+0x12c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d302      	bcc.n	8009ba8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ba2:	4b22      	ldr	r3, [pc, #136]	; (8009c2c <xTaskResumeAll+0x130>)
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ba8:	4b1c      	ldr	r3, [pc, #112]	; (8009c1c <xTaskResumeAll+0x120>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1cb      	bne.n	8009b48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009bb6:	f000 fb5f 	bl	800a278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009bba:	4b1d      	ldr	r3, [pc, #116]	; (8009c30 <xTaskResumeAll+0x134>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d010      	beq.n	8009be8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009bc6:	f000 f847 	bl	8009c58 <xTaskIncrementTick>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009bd0:	4b16      	ldr	r3, [pc, #88]	; (8009c2c <xTaskResumeAll+0x130>)
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1f1      	bne.n	8009bc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009be2:	4b13      	ldr	r3, [pc, #76]	; (8009c30 <xTaskResumeAll+0x134>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009be8:	4b10      	ldr	r3, [pc, #64]	; (8009c2c <xTaskResumeAll+0x130>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d009      	beq.n	8009c04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009bf4:	4b0f      	ldr	r3, [pc, #60]	; (8009c34 <xTaskResumeAll+0x138>)
 8009bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c04:	f001 f8e6 	bl	800add4 <vPortExitCritical>

	return xAlreadyYielded;
 8009c08:	68bb      	ldr	r3, [r7, #8]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	20000f00 	.word	0x20000f00
 8009c18:	20000ed8 	.word	0x20000ed8
 8009c1c:	20000e98 	.word	0x20000e98
 8009c20:	20000ee0 	.word	0x20000ee0
 8009c24:	20000a08 	.word	0x20000a08
 8009c28:	20000a04 	.word	0x20000a04
 8009c2c:	20000eec 	.word	0x20000eec
 8009c30:	20000ee8 	.word	0x20000ee8
 8009c34:	e000ed04 	.word	0xe000ed04

08009c38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c3e:	4b05      	ldr	r3, [pc, #20]	; (8009c54 <xTaskGetTickCount+0x1c>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c44:	687b      	ldr	r3, [r7, #4]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	20000edc 	.word	0x20000edc

08009c58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c62:	4b4f      	ldr	r3, [pc, #316]	; (8009da0 <xTaskIncrementTick+0x148>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f040 808f 	bne.w	8009d8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c6c:	4b4d      	ldr	r3, [pc, #308]	; (8009da4 <xTaskIncrementTick+0x14c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3301      	adds	r3, #1
 8009c72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c74:	4a4b      	ldr	r2, [pc, #300]	; (8009da4 <xTaskIncrementTick+0x14c>)
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d120      	bne.n	8009cc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c80:	4b49      	ldr	r3, [pc, #292]	; (8009da8 <xTaskIncrementTick+0x150>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00a      	beq.n	8009ca0 <xTaskIncrementTick+0x48>
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	603b      	str	r3, [r7, #0]
}
 8009c9c:	bf00      	nop
 8009c9e:	e7fe      	b.n	8009c9e <xTaskIncrementTick+0x46>
 8009ca0:	4b41      	ldr	r3, [pc, #260]	; (8009da8 <xTaskIncrementTick+0x150>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	60fb      	str	r3, [r7, #12]
 8009ca6:	4b41      	ldr	r3, [pc, #260]	; (8009dac <xTaskIncrementTick+0x154>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a3f      	ldr	r2, [pc, #252]	; (8009da8 <xTaskIncrementTick+0x150>)
 8009cac:	6013      	str	r3, [r2, #0]
 8009cae:	4a3f      	ldr	r2, [pc, #252]	; (8009dac <xTaskIncrementTick+0x154>)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	4b3e      	ldr	r3, [pc, #248]	; (8009db0 <xTaskIncrementTick+0x158>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	4a3d      	ldr	r2, [pc, #244]	; (8009db0 <xTaskIncrementTick+0x158>)
 8009cbc:	6013      	str	r3, [r2, #0]
 8009cbe:	f000 fadb 	bl	800a278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009cc2:	4b3c      	ldr	r3, [pc, #240]	; (8009db4 <xTaskIncrementTick+0x15c>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	693a      	ldr	r2, [r7, #16]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d349      	bcc.n	8009d60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ccc:	4b36      	ldr	r3, [pc, #216]	; (8009da8 <xTaskIncrementTick+0x150>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d104      	bne.n	8009ce0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cd6:	4b37      	ldr	r3, [pc, #220]	; (8009db4 <xTaskIncrementTick+0x15c>)
 8009cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cdc:	601a      	str	r2, [r3, #0]
					break;
 8009cde:	e03f      	b.n	8009d60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ce0:	4b31      	ldr	r3, [pc, #196]	; (8009da8 <xTaskIncrementTick+0x150>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d203      	bcs.n	8009d00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009cf8:	4a2e      	ldr	r2, [pc, #184]	; (8009db4 <xTaskIncrementTick+0x15c>)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009cfe:	e02f      	b.n	8009d60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	3304      	adds	r3, #4
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7fe febf 	bl	8008a88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d004      	beq.n	8009d1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	3318      	adds	r3, #24
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe feb6 	bl	8008a88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d20:	4b25      	ldr	r3, [pc, #148]	; (8009db8 <xTaskIncrementTick+0x160>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d903      	bls.n	8009d30 <xTaskIncrementTick+0xd8>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2c:	4a22      	ldr	r2, [pc, #136]	; (8009db8 <xTaskIncrementTick+0x160>)
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d34:	4613      	mov	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4413      	add	r3, r2
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4a1f      	ldr	r2, [pc, #124]	; (8009dbc <xTaskIncrementTick+0x164>)
 8009d3e:	441a      	add	r2, r3
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	3304      	adds	r3, #4
 8009d44:	4619      	mov	r1, r3
 8009d46:	4610      	mov	r0, r2
 8009d48:	f7fe fe41 	bl	80089ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d50:	4b1b      	ldr	r3, [pc, #108]	; (8009dc0 <xTaskIncrementTick+0x168>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d3b8      	bcc.n	8009ccc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d5e:	e7b5      	b.n	8009ccc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d60:	4b17      	ldr	r3, [pc, #92]	; (8009dc0 <xTaskIncrementTick+0x168>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d66:	4915      	ldr	r1, [pc, #84]	; (8009dbc <xTaskIncrementTick+0x164>)
 8009d68:	4613      	mov	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	440b      	add	r3, r1
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d901      	bls.n	8009d7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009d7c:	4b11      	ldr	r3, [pc, #68]	; (8009dc4 <xTaskIncrementTick+0x16c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d007      	beq.n	8009d94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009d84:	2301      	movs	r3, #1
 8009d86:	617b      	str	r3, [r7, #20]
 8009d88:	e004      	b.n	8009d94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009d8a:	4b0f      	ldr	r3, [pc, #60]	; (8009dc8 <xTaskIncrementTick+0x170>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	4a0d      	ldr	r2, [pc, #52]	; (8009dc8 <xTaskIncrementTick+0x170>)
 8009d92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d94:	697b      	ldr	r3, [r7, #20]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	20000f00 	.word	0x20000f00
 8009da4:	20000edc 	.word	0x20000edc
 8009da8:	20000e90 	.word	0x20000e90
 8009dac:	20000e94 	.word	0x20000e94
 8009db0:	20000ef0 	.word	0x20000ef0
 8009db4:	20000ef8 	.word	0x20000ef8
 8009db8:	20000ee0 	.word	0x20000ee0
 8009dbc:	20000a08 	.word	0x20000a08
 8009dc0:	20000a04 	.word	0x20000a04
 8009dc4:	20000eec 	.word	0x20000eec
 8009dc8:	20000ee8 	.word	0x20000ee8

08009dcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009dd2:	4b2a      	ldr	r3, [pc, #168]	; (8009e7c <vTaskSwitchContext+0xb0>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009dda:	4b29      	ldr	r3, [pc, #164]	; (8009e80 <vTaskSwitchContext+0xb4>)
 8009ddc:	2201      	movs	r2, #1
 8009dde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009de0:	e046      	b.n	8009e70 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009de2:	4b27      	ldr	r3, [pc, #156]	; (8009e80 <vTaskSwitchContext+0xb4>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009de8:	4b26      	ldr	r3, [pc, #152]	; (8009e84 <vTaskSwitchContext+0xb8>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	60fb      	str	r3, [r7, #12]
 8009dee:	e010      	b.n	8009e12 <vTaskSwitchContext+0x46>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <vTaskSwitchContext+0x40>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	607b      	str	r3, [r7, #4]
}
 8009e08:	bf00      	nop
 8009e0a:	e7fe      	b.n	8009e0a <vTaskSwitchContext+0x3e>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	60fb      	str	r3, [r7, #12]
 8009e12:	491d      	ldr	r1, [pc, #116]	; (8009e88 <vTaskSwitchContext+0xbc>)
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	440b      	add	r3, r1
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0e4      	beq.n	8009df0 <vTaskSwitchContext+0x24>
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4a15      	ldr	r2, [pc, #84]	; (8009e88 <vTaskSwitchContext+0xbc>)
 8009e32:	4413      	add	r3, r2
 8009e34:	60bb      	str	r3, [r7, #8]
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	605a      	str	r2, [r3, #4]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	685a      	ldr	r2, [r3, #4]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	3308      	adds	r3, #8
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d104      	bne.n	8009e56 <vTaskSwitchContext+0x8a>
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	605a      	str	r2, [r3, #4]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	4a0b      	ldr	r2, [pc, #44]	; (8009e8c <vTaskSwitchContext+0xc0>)
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	4a08      	ldr	r2, [pc, #32]	; (8009e84 <vTaskSwitchContext+0xb8>)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e66:	4b09      	ldr	r3, [pc, #36]	; (8009e8c <vTaskSwitchContext+0xc0>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	3354      	adds	r3, #84	; 0x54
 8009e6c:	4a08      	ldr	r2, [pc, #32]	; (8009e90 <vTaskSwitchContext+0xc4>)
 8009e6e:	6013      	str	r3, [r2, #0]
}
 8009e70:	bf00      	nop
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	20000f00 	.word	0x20000f00
 8009e80:	20000eec 	.word	0x20000eec
 8009e84:	20000ee0 	.word	0x20000ee0
 8009e88:	20000a08 	.word	0x20000a08
 8009e8c:	20000a04 	.word	0x20000a04
 8009e90:	2000015c 	.word	0x2000015c

08009e94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10a      	bne.n	8009eba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	60fb      	str	r3, [r7, #12]
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009eba:	4b07      	ldr	r3, [pc, #28]	; (8009ed8 <vTaskPlaceOnEventList+0x44>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3318      	adds	r3, #24
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7fe fda7 	bl	8008a16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ec8:	2101      	movs	r1, #1
 8009eca:	6838      	ldr	r0, [r7, #0]
 8009ecc:	f000 fa80 	bl	800a3d0 <prvAddCurrentTaskToDelayedList>
}
 8009ed0:	bf00      	nop
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	20000a04 	.word	0x20000a04

08009edc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d10a      	bne.n	8009f04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	617b      	str	r3, [r7, #20]
}
 8009f00:	bf00      	nop
 8009f02:	e7fe      	b.n	8009f02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f04:	4b0a      	ldr	r3, [pc, #40]	; (8009f30 <vTaskPlaceOnEventListRestricted+0x54>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	3318      	adds	r3, #24
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	f7fe fd5e 	bl	80089ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d002      	beq.n	8009f1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009f18:	f04f 33ff 	mov.w	r3, #4294967295
 8009f1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	68b8      	ldr	r0, [r7, #8]
 8009f22:	f000 fa55 	bl	800a3d0 <prvAddCurrentTaskToDelayedList>
	}
 8009f26:	bf00      	nop
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20000a04 	.word	0x20000a04

08009f34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d10a      	bne.n	8009f60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	60fb      	str	r3, [r7, #12]
}
 8009f5c:	bf00      	nop
 8009f5e:	e7fe      	b.n	8009f5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	3318      	adds	r3, #24
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fe fd8f 	bl	8008a88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f6a:	4b1e      	ldr	r3, [pc, #120]	; (8009fe4 <xTaskRemoveFromEventList+0xb0>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d11d      	bne.n	8009fae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	3304      	adds	r3, #4
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe fd86 	bl	8008a88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f80:	4b19      	ldr	r3, [pc, #100]	; (8009fe8 <xTaskRemoveFromEventList+0xb4>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d903      	bls.n	8009f90 <xTaskRemoveFromEventList+0x5c>
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8c:	4a16      	ldr	r2, [pc, #88]	; (8009fe8 <xTaskRemoveFromEventList+0xb4>)
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f94:	4613      	mov	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4a13      	ldr	r2, [pc, #76]	; (8009fec <xTaskRemoveFromEventList+0xb8>)
 8009f9e:	441a      	add	r2, r3
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	f7fe fd11 	bl	80089ce <vListInsertEnd>
 8009fac:	e005      	b.n	8009fba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	3318      	adds	r3, #24
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	480e      	ldr	r0, [pc, #56]	; (8009ff0 <xTaskRemoveFromEventList+0xbc>)
 8009fb6:	f7fe fd0a 	bl	80089ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	; (8009ff4 <xTaskRemoveFromEventList+0xc0>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d905      	bls.n	8009fd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009fcc:	4b0a      	ldr	r3, [pc, #40]	; (8009ff8 <xTaskRemoveFromEventList+0xc4>)
 8009fce:	2201      	movs	r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	e001      	b.n	8009fd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009fd8:	697b      	ldr	r3, [r7, #20]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20000f00 	.word	0x20000f00
 8009fe8:	20000ee0 	.word	0x20000ee0
 8009fec:	20000a08 	.word	0x20000a08
 8009ff0:	20000e98 	.word	0x20000e98
 8009ff4:	20000a04 	.word	0x20000a04
 8009ff8:	20000eec 	.word	0x20000eec

08009ffc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a004:	4b06      	ldr	r3, [pc, #24]	; (800a020 <vTaskInternalSetTimeOutState+0x24>)
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a00c:	4b05      	ldr	r3, [pc, #20]	; (800a024 <vTaskInternalSetTimeOutState+0x28>)
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	605a      	str	r2, [r3, #4]
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	20000ef0 	.word	0x20000ef0
 800a024:	20000edc 	.word	0x20000edc

0800a028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b088      	sub	sp, #32
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10a      	bne.n	800a04e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	613b      	str	r3, [r7, #16]
}
 800a04a:	bf00      	nop
 800a04c:	e7fe      	b.n	800a04c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10a      	bne.n	800a06a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	60fb      	str	r3, [r7, #12]
}
 800a066:	bf00      	nop
 800a068:	e7fe      	b.n	800a068 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a06a:	f000 fe83 	bl	800ad74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a06e:	4b1d      	ldr	r3, [pc, #116]	; (800a0e4 <xTaskCheckForTimeOut+0xbc>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	69ba      	ldr	r2, [r7, #24]
 800a07a:	1ad3      	subs	r3, r2, r3
 800a07c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a086:	d102      	bne.n	800a08e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a088:	2300      	movs	r3, #0
 800a08a:	61fb      	str	r3, [r7, #28]
 800a08c:	e023      	b.n	800a0d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <xTaskCheckForTimeOut+0xc0>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	429a      	cmp	r2, r3
 800a098:	d007      	beq.n	800a0aa <xTaskCheckForTimeOut+0x82>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	69ba      	ldr	r2, [r7, #24]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d302      	bcc.n	800a0aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	61fb      	str	r3, [r7, #28]
 800a0a8:	e015      	b.n	800a0d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d20b      	bcs.n	800a0cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	1ad2      	subs	r2, r2, r3
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f7ff ff9b 	bl	8009ffc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	61fb      	str	r3, [r7, #28]
 800a0ca:	e004      	b.n	800a0d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0d6:	f000 fe7d 	bl	800add4 <vPortExitCritical>

	return xReturn;
 800a0da:	69fb      	ldr	r3, [r7, #28]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3720      	adds	r7, #32
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20000edc 	.word	0x20000edc
 800a0e8:	20000ef0 	.word	0x20000ef0

0800a0ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0f0:	4b03      	ldr	r3, [pc, #12]	; (800a100 <vTaskMissedYield+0x14>)
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]
}
 800a0f6:	bf00      	nop
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	20000eec 	.word	0x20000eec

0800a104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a10c:	f000 f852 	bl	800a1b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a110:	4b06      	ldr	r3, [pc, #24]	; (800a12c <prvIdleTask+0x28>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d9f9      	bls.n	800a10c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a118:	4b05      	ldr	r3, [pc, #20]	; (800a130 <prvIdleTask+0x2c>)
 800a11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a11e:	601a      	str	r2, [r3, #0]
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a128:	e7f0      	b.n	800a10c <prvIdleTask+0x8>
 800a12a:	bf00      	nop
 800a12c:	20000a08 	.word	0x20000a08
 800a130:	e000ed04 	.word	0xe000ed04

0800a134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a13a:	2300      	movs	r3, #0
 800a13c:	607b      	str	r3, [r7, #4]
 800a13e:	e00c      	b.n	800a15a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	4613      	mov	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4a12      	ldr	r2, [pc, #72]	; (800a194 <prvInitialiseTaskLists+0x60>)
 800a14c:	4413      	add	r3, r2
 800a14e:	4618      	mov	r0, r3
 800a150:	f7fe fc10 	bl	8008974 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3301      	adds	r3, #1
 800a158:	607b      	str	r3, [r7, #4]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b37      	cmp	r3, #55	; 0x37
 800a15e:	d9ef      	bls.n	800a140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a160:	480d      	ldr	r0, [pc, #52]	; (800a198 <prvInitialiseTaskLists+0x64>)
 800a162:	f7fe fc07 	bl	8008974 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a166:	480d      	ldr	r0, [pc, #52]	; (800a19c <prvInitialiseTaskLists+0x68>)
 800a168:	f7fe fc04 	bl	8008974 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a16c:	480c      	ldr	r0, [pc, #48]	; (800a1a0 <prvInitialiseTaskLists+0x6c>)
 800a16e:	f7fe fc01 	bl	8008974 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a172:	480c      	ldr	r0, [pc, #48]	; (800a1a4 <prvInitialiseTaskLists+0x70>)
 800a174:	f7fe fbfe 	bl	8008974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a178:	480b      	ldr	r0, [pc, #44]	; (800a1a8 <prvInitialiseTaskLists+0x74>)
 800a17a:	f7fe fbfb 	bl	8008974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a17e:	4b0b      	ldr	r3, [pc, #44]	; (800a1ac <prvInitialiseTaskLists+0x78>)
 800a180:	4a05      	ldr	r2, [pc, #20]	; (800a198 <prvInitialiseTaskLists+0x64>)
 800a182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a184:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <prvInitialiseTaskLists+0x7c>)
 800a186:	4a05      	ldr	r2, [pc, #20]	; (800a19c <prvInitialiseTaskLists+0x68>)
 800a188:	601a      	str	r2, [r3, #0]
}
 800a18a:	bf00      	nop
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	20000a08 	.word	0x20000a08
 800a198:	20000e68 	.word	0x20000e68
 800a19c:	20000e7c 	.word	0x20000e7c
 800a1a0:	20000e98 	.word	0x20000e98
 800a1a4:	20000eac 	.word	0x20000eac
 800a1a8:	20000ec4 	.word	0x20000ec4
 800a1ac:	20000e90 	.word	0x20000e90
 800a1b0:	20000e94 	.word	0x20000e94

0800a1b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1ba:	e019      	b.n	800a1f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a1bc:	f000 fdda 	bl	800ad74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1c0:	4b10      	ldr	r3, [pc, #64]	; (800a204 <prvCheckTasksWaitingTermination+0x50>)
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7fe fc5b 	bl	8008a88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1d2:	4b0d      	ldr	r3, [pc, #52]	; (800a208 <prvCheckTasksWaitingTermination+0x54>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	4a0b      	ldr	r2, [pc, #44]	; (800a208 <prvCheckTasksWaitingTermination+0x54>)
 800a1da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1dc:	4b0b      	ldr	r3, [pc, #44]	; (800a20c <prvCheckTasksWaitingTermination+0x58>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	4a0a      	ldr	r2, [pc, #40]	; (800a20c <prvCheckTasksWaitingTermination+0x58>)
 800a1e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1e6:	f000 fdf5 	bl	800add4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f810 	bl	800a210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1f0:	4b06      	ldr	r3, [pc, #24]	; (800a20c <prvCheckTasksWaitingTermination+0x58>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1e1      	bne.n	800a1bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1f8:	bf00      	nop
 800a1fa:	bf00      	nop
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20000eac 	.word	0x20000eac
 800a208:	20000ed8 	.word	0x20000ed8
 800a20c:	20000ec0 	.word	0x20000ec0

0800a210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	3354      	adds	r3, #84	; 0x54
 800a21c:	4618      	mov	r0, r3
 800a21e:	f002 f815 	bl	800c24c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d108      	bne.n	800a23e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a230:	4618      	mov	r0, r3
 800a232:	f000 ff8d 	bl	800b150 <vPortFree>
				vPortFree( pxTCB );
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 ff8a 	bl	800b150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a23c:	e018      	b.n	800a270 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a244:	2b01      	cmp	r3, #1
 800a246:	d103      	bne.n	800a250 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 ff81 	bl	800b150 <vPortFree>
	}
 800a24e:	e00f      	b.n	800a270 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a256:	2b02      	cmp	r3, #2
 800a258:	d00a      	beq.n	800a270 <prvDeleteTCB+0x60>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	60fb      	str	r3, [r7, #12]
}
 800a26c:	bf00      	nop
 800a26e:	e7fe      	b.n	800a26e <prvDeleteTCB+0x5e>
	}
 800a270:	bf00      	nop
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a27e:	4b0c      	ldr	r3, [pc, #48]	; (800a2b0 <prvResetNextTaskUnblockTime+0x38>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d104      	bne.n	800a292 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a288:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <prvResetNextTaskUnblockTime+0x3c>)
 800a28a:	f04f 32ff 	mov.w	r2, #4294967295
 800a28e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a290:	e008      	b.n	800a2a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a292:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <prvResetNextTaskUnblockTime+0x38>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	4a04      	ldr	r2, [pc, #16]	; (800a2b4 <prvResetNextTaskUnblockTime+0x3c>)
 800a2a2:	6013      	str	r3, [r2, #0]
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr
 800a2b0:	20000e90 	.word	0x20000e90
 800a2b4:	20000ef8 	.word	0x20000ef8

0800a2b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a2be:	4b0b      	ldr	r3, [pc, #44]	; (800a2ec <xTaskGetSchedulerState+0x34>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d102      	bne.n	800a2cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	607b      	str	r3, [r7, #4]
 800a2ca:	e008      	b.n	800a2de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2cc:	4b08      	ldr	r3, [pc, #32]	; (800a2f0 <xTaskGetSchedulerState+0x38>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d102      	bne.n	800a2da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	607b      	str	r3, [r7, #4]
 800a2d8:	e001      	b.n	800a2de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2de:	687b      	ldr	r3, [r7, #4]
	}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	20000ee4 	.word	0x20000ee4
 800a2f0:	20000f00 	.word	0x20000f00

0800a2f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a300:	2300      	movs	r3, #0
 800a302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d056      	beq.n	800a3b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a30a:	4b2e      	ldr	r3, [pc, #184]	; (800a3c4 <xTaskPriorityDisinherit+0xd0>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	693a      	ldr	r2, [r7, #16]
 800a310:	429a      	cmp	r2, r3
 800a312:	d00a      	beq.n	800a32a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	60fb      	str	r3, [r7, #12]
}
 800a326:	bf00      	nop
 800a328:	e7fe      	b.n	800a328 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10a      	bne.n	800a348 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	60bb      	str	r3, [r7, #8]
}
 800a344:	bf00      	nop
 800a346:	e7fe      	b.n	800a346 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a34c:	1e5a      	subs	r2, r3, #1
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d02c      	beq.n	800a3b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a362:	2b00      	cmp	r3, #0
 800a364:	d128      	bne.n	800a3b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	3304      	adds	r3, #4
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fe fb8c 	bl	8008a88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a388:	4b0f      	ldr	r3, [pc, #60]	; (800a3c8 <xTaskPriorityDisinherit+0xd4>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d903      	bls.n	800a398 <xTaskPriorityDisinherit+0xa4>
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	4a0c      	ldr	r2, [pc, #48]	; (800a3c8 <xTaskPriorityDisinherit+0xd4>)
 800a396:	6013      	str	r3, [r2, #0]
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39c:	4613      	mov	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4a09      	ldr	r2, [pc, #36]	; (800a3cc <xTaskPriorityDisinherit+0xd8>)
 800a3a6:	441a      	add	r2, r3
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	f7fe fb0d 	bl	80089ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3b8:	697b      	ldr	r3, [r7, #20]
	}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3718      	adds	r7, #24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	20000a04 	.word	0x20000a04
 800a3c8:	20000ee0 	.word	0x20000ee0
 800a3cc:	20000a08 	.word	0x20000a08

0800a3d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a3da:	4b21      	ldr	r3, [pc, #132]	; (800a460 <prvAddCurrentTaskToDelayedList+0x90>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3e0:	4b20      	ldr	r3, [pc, #128]	; (800a464 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fe fb4e 	bl	8008a88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f2:	d10a      	bne.n	800a40a <prvAddCurrentTaskToDelayedList+0x3a>
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d007      	beq.n	800a40a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3fa:	4b1a      	ldr	r3, [pc, #104]	; (800a464 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3304      	adds	r3, #4
 800a400:	4619      	mov	r1, r3
 800a402:	4819      	ldr	r0, [pc, #100]	; (800a468 <prvAddCurrentTaskToDelayedList+0x98>)
 800a404:	f7fe fae3 	bl	80089ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a408:	e026      	b.n	800a458 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4413      	add	r3, r2
 800a410:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a412:	4b14      	ldr	r3, [pc, #80]	; (800a464 <prvAddCurrentTaskToDelayedList+0x94>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d209      	bcs.n	800a436 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a422:	4b12      	ldr	r3, [pc, #72]	; (800a46c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	4b0f      	ldr	r3, [pc, #60]	; (800a464 <prvAddCurrentTaskToDelayedList+0x94>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3304      	adds	r3, #4
 800a42c:	4619      	mov	r1, r3
 800a42e:	4610      	mov	r0, r2
 800a430:	f7fe faf1 	bl	8008a16 <vListInsert>
}
 800a434:	e010      	b.n	800a458 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a436:	4b0e      	ldr	r3, [pc, #56]	; (800a470 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	4b0a      	ldr	r3, [pc, #40]	; (800a464 <prvAddCurrentTaskToDelayedList+0x94>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	3304      	adds	r3, #4
 800a440:	4619      	mov	r1, r3
 800a442:	4610      	mov	r0, r2
 800a444:	f7fe fae7 	bl	8008a16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a448:	4b0a      	ldr	r3, [pc, #40]	; (800a474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d202      	bcs.n	800a458 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a452:	4a08      	ldr	r2, [pc, #32]	; (800a474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	6013      	str	r3, [r2, #0]
}
 800a458:	bf00      	nop
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	20000edc 	.word	0x20000edc
 800a464:	20000a04 	.word	0x20000a04
 800a468:	20000ec4 	.word	0x20000ec4
 800a46c:	20000e94 	.word	0x20000e94
 800a470:	20000e90 	.word	0x20000e90
 800a474:	20000ef8 	.word	0x20000ef8

0800a478 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08a      	sub	sp, #40	; 0x28
 800a47c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a47e:	2300      	movs	r3, #0
 800a480:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a482:	f000 fb07 	bl	800aa94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a486:	4b1c      	ldr	r3, [pc, #112]	; (800a4f8 <xTimerCreateTimerTask+0x80>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d021      	beq.n	800a4d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a48e:	2300      	movs	r3, #0
 800a490:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a492:	2300      	movs	r3, #0
 800a494:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a496:	1d3a      	adds	r2, r7, #4
 800a498:	f107 0108 	add.w	r1, r7, #8
 800a49c:	f107 030c 	add.w	r3, r7, #12
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fe fa4d 	bl	8008940 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a4a6:	6879      	ldr	r1, [r7, #4]
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	9202      	str	r2, [sp, #8]
 800a4ae:	9301      	str	r3, [sp, #4]
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	460a      	mov	r2, r1
 800a4b8:	4910      	ldr	r1, [pc, #64]	; (800a4fc <xTimerCreateTimerTask+0x84>)
 800a4ba:	4811      	ldr	r0, [pc, #68]	; (800a500 <xTimerCreateTimerTask+0x88>)
 800a4bc:	f7ff f8b4 	bl	8009628 <xTaskCreateStatic>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	4a10      	ldr	r2, [pc, #64]	; (800a504 <xTimerCreateTimerTask+0x8c>)
 800a4c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a4c6:	4b0f      	ldr	r3, [pc, #60]	; (800a504 <xTimerCreateTimerTask+0x8c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10a      	bne.n	800a4ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4dc:	f383 8811 	msr	BASEPRI, r3
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	613b      	str	r3, [r7, #16]
}
 800a4ea:	bf00      	nop
 800a4ec:	e7fe      	b.n	800a4ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a4ee:	697b      	ldr	r3, [r7, #20]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3718      	adds	r7, #24
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	20000f34 	.word	0x20000f34
 800a4fc:	0800cb18 	.word	0x0800cb18
 800a500:	0800a63d 	.word	0x0800a63d
 800a504:	20000f38 	.word	0x20000f38

0800a508 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08a      	sub	sp, #40	; 0x28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
 800a514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a516:	2300      	movs	r3, #0
 800a518:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10a      	bne.n	800a536 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	623b      	str	r3, [r7, #32]
}
 800a532:	bf00      	nop
 800a534:	e7fe      	b.n	800a534 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a536:	4b1a      	ldr	r3, [pc, #104]	; (800a5a0 <xTimerGenericCommand+0x98>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d02a      	beq.n	800a594 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	2b05      	cmp	r3, #5
 800a54e:	dc18      	bgt.n	800a582 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a550:	f7ff feb2 	bl	800a2b8 <xTaskGetSchedulerState>
 800a554:	4603      	mov	r3, r0
 800a556:	2b02      	cmp	r3, #2
 800a558:	d109      	bne.n	800a56e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a55a:	4b11      	ldr	r3, [pc, #68]	; (800a5a0 <xTimerGenericCommand+0x98>)
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	f107 0110 	add.w	r1, r7, #16
 800a562:	2300      	movs	r3, #0
 800a564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a566:	f7fe fbf7 	bl	8008d58 <xQueueGenericSend>
 800a56a:	6278      	str	r0, [r7, #36]	; 0x24
 800a56c:	e012      	b.n	800a594 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a56e:	4b0c      	ldr	r3, [pc, #48]	; (800a5a0 <xTimerGenericCommand+0x98>)
 800a570:	6818      	ldr	r0, [r3, #0]
 800a572:	f107 0110 	add.w	r1, r7, #16
 800a576:	2300      	movs	r3, #0
 800a578:	2200      	movs	r2, #0
 800a57a:	f7fe fbed 	bl	8008d58 <xQueueGenericSend>
 800a57e:	6278      	str	r0, [r7, #36]	; 0x24
 800a580:	e008      	b.n	800a594 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a582:	4b07      	ldr	r3, [pc, #28]	; (800a5a0 <xTimerGenericCommand+0x98>)
 800a584:	6818      	ldr	r0, [r3, #0]
 800a586:	f107 0110 	add.w	r1, r7, #16
 800a58a:	2300      	movs	r3, #0
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	f7fe fce1 	bl	8008f54 <xQueueGenericSendFromISR>
 800a592:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a596:	4618      	mov	r0, r3
 800a598:	3728      	adds	r7, #40	; 0x28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20000f34 	.word	0x20000f34

0800a5a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af02      	add	r7, sp, #8
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ae:	4b22      	ldr	r3, [pc, #136]	; (800a638 <prvProcessExpiredTimer+0x94>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe fa63 	bl	8008a88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5c8:	f003 0304 	and.w	r3, r3, #4
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d022      	beq.n	800a616 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	699a      	ldr	r2, [r3, #24]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	18d1      	adds	r1, r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	683a      	ldr	r2, [r7, #0]
 800a5dc:	6978      	ldr	r0, [r7, #20]
 800a5de:	f000 f8d1 	bl	800a784 <prvInsertTimerInActiveList>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d01f      	beq.n	800a628 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	6978      	ldr	r0, [r7, #20]
 800a5f4:	f7ff ff88 	bl	800a508 <xTimerGenericCommand>
 800a5f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d113      	bne.n	800a628 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	60fb      	str	r3, [r7, #12]
}
 800a612:	bf00      	nop
 800a614:	e7fe      	b.n	800a614 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a61c:	f023 0301 	bic.w	r3, r3, #1
 800a620:	b2da      	uxtb	r2, r3
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	6978      	ldr	r0, [r7, #20]
 800a62e:	4798      	blx	r3
}
 800a630:	bf00      	nop
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	20000f2c 	.word	0x20000f2c

0800a63c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a644:	f107 0308 	add.w	r3, r7, #8
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 f857 	bl	800a6fc <prvGetNextExpireTime>
 800a64e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	4619      	mov	r1, r3
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 f803 	bl	800a660 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a65a:	f000 f8d5 	bl	800a808 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a65e:	e7f1      	b.n	800a644 <prvTimerTask+0x8>

0800a660 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a66a:	f7ff fa39 	bl	8009ae0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a66e:	f107 0308 	add.w	r3, r7, #8
 800a672:	4618      	mov	r0, r3
 800a674:	f000 f866 	bl	800a744 <prvSampleTimeNow>
 800a678:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d130      	bne.n	800a6e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10a      	bne.n	800a69c <prvProcessTimerOrBlockTask+0x3c>
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d806      	bhi.n	800a69c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a68e:	f7ff fa35 	bl	8009afc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a692:	68f9      	ldr	r1, [r7, #12]
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7ff ff85 	bl	800a5a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a69a:	e024      	b.n	800a6e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d008      	beq.n	800a6b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a6a2:	4b13      	ldr	r3, [pc, #76]	; (800a6f0 <prvProcessTimerOrBlockTask+0x90>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d101      	bne.n	800a6b0 <prvProcessTimerOrBlockTask+0x50>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e000      	b.n	800a6b2 <prvProcessTimerOrBlockTask+0x52>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a6b4:	4b0f      	ldr	r3, [pc, #60]	; (800a6f4 <prvProcessTimerOrBlockTask+0x94>)
 800a6b6:	6818      	ldr	r0, [r3, #0]
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	f7fe ff7d 	bl	80095c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a6c6:	f7ff fa19 	bl	8009afc <xTaskResumeAll>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10a      	bne.n	800a6e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a6d0:	4b09      	ldr	r3, [pc, #36]	; (800a6f8 <prvProcessTimerOrBlockTask+0x98>)
 800a6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6d6:	601a      	str	r2, [r3, #0]
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	f3bf 8f6f 	isb	sy
}
 800a6e0:	e001      	b.n	800a6e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a6e2:	f7ff fa0b 	bl	8009afc <xTaskResumeAll>
}
 800a6e6:	bf00      	nop
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20000f30 	.word	0x20000f30
 800a6f4:	20000f34 	.word	0x20000f34
 800a6f8:	e000ed04 	.word	0xe000ed04

0800a6fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a704:	4b0e      	ldr	r3, [pc, #56]	; (800a740 <prvGetNextExpireTime+0x44>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <prvGetNextExpireTime+0x16>
 800a70e:	2201      	movs	r2, #1
 800a710:	e000      	b.n	800a714 <prvGetNextExpireTime+0x18>
 800a712:	2200      	movs	r2, #0
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d105      	bne.n	800a72c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a720:	4b07      	ldr	r3, [pc, #28]	; (800a740 <prvGetNextExpireTime+0x44>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	60fb      	str	r3, [r7, #12]
 800a72a:	e001      	b.n	800a730 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a72c:	2300      	movs	r3, #0
 800a72e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a730:	68fb      	ldr	r3, [r7, #12]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	20000f2c 	.word	0x20000f2c

0800a744 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a74c:	f7ff fa74 	bl	8009c38 <xTaskGetTickCount>
 800a750:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a752:	4b0b      	ldr	r3, [pc, #44]	; (800a780 <prvSampleTimeNow+0x3c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d205      	bcs.n	800a768 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a75c:	f000 f936 	bl	800a9cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	601a      	str	r2, [r3, #0]
 800a766:	e002      	b.n	800a76e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a76e:	4a04      	ldr	r2, [pc, #16]	; (800a780 <prvSampleTimeNow+0x3c>)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a774:	68fb      	ldr	r3, [r7, #12]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	20000f3c 	.word	0x20000f3c

0800a784 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
 800a790:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a792:	2300      	movs	r3, #0
 800a794:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d812      	bhi.n	800a7d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	1ad2      	subs	r2, r2, r3
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d302      	bcc.n	800a7be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	617b      	str	r3, [r7, #20]
 800a7bc:	e01b      	b.n	800a7f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a7be:	4b10      	ldr	r3, [pc, #64]	; (800a800 <prvInsertTimerInActiveList+0x7c>)
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	f7fe f924 	bl	8008a16 <vListInsert>
 800a7ce:	e012      	b.n	800a7f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d206      	bcs.n	800a7e6 <prvInsertTimerInActiveList+0x62>
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d302      	bcc.n	800a7e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	617b      	str	r3, [r7, #20]
 800a7e4:	e007      	b.n	800a7f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7e6:	4b07      	ldr	r3, [pc, #28]	; (800a804 <prvInsertTimerInActiveList+0x80>)
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3304      	adds	r3, #4
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	f7fe f910 	bl	8008a16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a7f6:	697b      	ldr	r3, [r7, #20]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3718      	adds	r7, #24
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	20000f30 	.word	0x20000f30
 800a804:	20000f2c 	.word	0x20000f2c

0800a808 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b08e      	sub	sp, #56	; 0x38
 800a80c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a80e:	e0ca      	b.n	800a9a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	da18      	bge.n	800a848 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a816:	1d3b      	adds	r3, r7, #4
 800a818:	3304      	adds	r3, #4
 800a81a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10a      	bne.n	800a838 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	61fb      	str	r3, [r7, #28]
}
 800a834:	bf00      	nop
 800a836:	e7fe      	b.n	800a836 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a83e:	6850      	ldr	r0, [r2, #4]
 800a840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a842:	6892      	ldr	r2, [r2, #8]
 800a844:	4611      	mov	r1, r2
 800a846:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f2c0 80ab 	blt.w	800a9a6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	695b      	ldr	r3, [r3, #20]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d004      	beq.n	800a866 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85e:	3304      	adds	r3, #4
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe f911 	bl	8008a88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a866:	463b      	mov	r3, r7
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff ff6b 	bl	800a744 <prvSampleTimeNow>
 800a86e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b09      	cmp	r3, #9
 800a874:	f200 8096 	bhi.w	800a9a4 <prvProcessReceivedCommands+0x19c>
 800a878:	a201      	add	r2, pc, #4	; (adr r2, 800a880 <prvProcessReceivedCommands+0x78>)
 800a87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87e:	bf00      	nop
 800a880:	0800a8a9 	.word	0x0800a8a9
 800a884:	0800a8a9 	.word	0x0800a8a9
 800a888:	0800a8a9 	.word	0x0800a8a9
 800a88c:	0800a91d 	.word	0x0800a91d
 800a890:	0800a931 	.word	0x0800a931
 800a894:	0800a97b 	.word	0x0800a97b
 800a898:	0800a8a9 	.word	0x0800a8a9
 800a89c:	0800a8a9 	.word	0x0800a8a9
 800a8a0:	0800a91d 	.word	0x0800a91d
 800a8a4:	0800a931 	.word	0x0800a931
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8ae:	f043 0301 	orr.w	r3, r3, #1
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	18d1      	adds	r1, r2, r3
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8c8:	f7ff ff5c 	bl	800a784 <prvInsertTimerInActiveList>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d069      	beq.n	800a9a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8e0:	f003 0304 	and.w	r3, r3, #4
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d05e      	beq.n	800a9a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	441a      	add	r2, r3
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8fa:	f7ff fe05 	bl	800a508 <xTimerGenericCommand>
 800a8fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d14f      	bne.n	800a9a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	61bb      	str	r3, [r7, #24]
}
 800a918:	bf00      	nop
 800a91a:	e7fe      	b.n	800a91a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a922:	f023 0301 	bic.w	r3, r3, #1
 800a926:	b2da      	uxtb	r2, r3
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a92e:	e03a      	b.n	800a9a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a936:	f043 0301 	orr.w	r3, r3, #1
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a946:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10a      	bne.n	800a966 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	617b      	str	r3, [r7, #20]
}
 800a962:	bf00      	nop
 800a964:	e7fe      	b.n	800a964 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a968:	699a      	ldr	r2, [r3, #24]
 800a96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96c:	18d1      	adds	r1, r2, r3
 800a96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a974:	f7ff ff06 	bl	800a784 <prvInsertTimerInActiveList>
					break;
 800a978:	e015      	b.n	800a9a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a980:	f003 0302 	and.w	r3, r3, #2
 800a984:	2b00      	cmp	r3, #0
 800a986:	d103      	bne.n	800a990 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a98a:	f000 fbe1 	bl	800b150 <vPortFree>
 800a98e:	e00a      	b.n	800a9a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a996:	f023 0301 	bic.w	r3, r3, #1
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a9a2:	e000      	b.n	800a9a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a9a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9a6:	4b08      	ldr	r3, [pc, #32]	; (800a9c8 <prvProcessReceivedCommands+0x1c0>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	1d39      	adds	r1, r7, #4
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fe fb6c 	bl	800908c <xQueueReceive>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f47f af2a 	bne.w	800a810 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a9bc:	bf00      	nop
 800a9be:	bf00      	nop
 800a9c0:	3730      	adds	r7, #48	; 0x30
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20000f34 	.word	0x20000f34

0800a9cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b088      	sub	sp, #32
 800a9d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9d2:	e048      	b.n	800aa66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a9d4:	4b2d      	ldr	r3, [pc, #180]	; (800aa8c <prvSwitchTimerLists+0xc0>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9de:	4b2b      	ldr	r3, [pc, #172]	; (800aa8c <prvSwitchTimerLists+0xc0>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe f84b 	bl	8008a88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa00:	f003 0304 	and.w	r3, r3, #4
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d02e      	beq.n	800aa66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	4413      	add	r3, r2
 800aa10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d90e      	bls.n	800aa38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa26:	4b19      	ldr	r3, [pc, #100]	; (800aa8c <prvSwitchTimerLists+0xc0>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	3304      	adds	r3, #4
 800aa2e:	4619      	mov	r1, r3
 800aa30:	4610      	mov	r0, r2
 800aa32:	f7fd fff0 	bl	8008a16 <vListInsert>
 800aa36:	e016      	b.n	800aa66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa38:	2300      	movs	r3, #0
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	2100      	movs	r1, #0
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f7ff fd60 	bl	800a508 <xTimerGenericCommand>
 800aa48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10a      	bne.n	800aa66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	603b      	str	r3, [r7, #0]
}
 800aa62:	bf00      	nop
 800aa64:	e7fe      	b.n	800aa64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa66:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <prvSwitchTimerLists+0xc0>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1b1      	bne.n	800a9d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa70:	4b06      	ldr	r3, [pc, #24]	; (800aa8c <prvSwitchTimerLists+0xc0>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa76:	4b06      	ldr	r3, [pc, #24]	; (800aa90 <prvSwitchTimerLists+0xc4>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a04      	ldr	r2, [pc, #16]	; (800aa8c <prvSwitchTimerLists+0xc0>)
 800aa7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa7e:	4a04      	ldr	r2, [pc, #16]	; (800aa90 <prvSwitchTimerLists+0xc4>)
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	6013      	str	r3, [r2, #0]
}
 800aa84:	bf00      	nop
 800aa86:	3718      	adds	r7, #24
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	20000f2c 	.word	0x20000f2c
 800aa90:	20000f30 	.word	0x20000f30

0800aa94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa9a:	f000 f96b 	bl	800ad74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa9e:	4b15      	ldr	r3, [pc, #84]	; (800aaf4 <prvCheckForValidListAndQueue+0x60>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d120      	bne.n	800aae8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aaa6:	4814      	ldr	r0, [pc, #80]	; (800aaf8 <prvCheckForValidListAndQueue+0x64>)
 800aaa8:	f7fd ff64 	bl	8008974 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aaac:	4813      	ldr	r0, [pc, #76]	; (800aafc <prvCheckForValidListAndQueue+0x68>)
 800aaae:	f7fd ff61 	bl	8008974 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aab2:	4b13      	ldr	r3, [pc, #76]	; (800ab00 <prvCheckForValidListAndQueue+0x6c>)
 800aab4:	4a10      	ldr	r2, [pc, #64]	; (800aaf8 <prvCheckForValidListAndQueue+0x64>)
 800aab6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aab8:	4b12      	ldr	r3, [pc, #72]	; (800ab04 <prvCheckForValidListAndQueue+0x70>)
 800aaba:	4a10      	ldr	r2, [pc, #64]	; (800aafc <prvCheckForValidListAndQueue+0x68>)
 800aabc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aabe:	2300      	movs	r3, #0
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	4b11      	ldr	r3, [pc, #68]	; (800ab08 <prvCheckForValidListAndQueue+0x74>)
 800aac4:	4a11      	ldr	r2, [pc, #68]	; (800ab0c <prvCheckForValidListAndQueue+0x78>)
 800aac6:	2110      	movs	r1, #16
 800aac8:	200a      	movs	r0, #10
 800aaca:	f7fe f86f 	bl	8008bac <xQueueGenericCreateStatic>
 800aace:	4603      	mov	r3, r0
 800aad0:	4a08      	ldr	r2, [pc, #32]	; (800aaf4 <prvCheckForValidListAndQueue+0x60>)
 800aad2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aad4:	4b07      	ldr	r3, [pc, #28]	; (800aaf4 <prvCheckForValidListAndQueue+0x60>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d005      	beq.n	800aae8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aadc:	4b05      	ldr	r3, [pc, #20]	; (800aaf4 <prvCheckForValidListAndQueue+0x60>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	490b      	ldr	r1, [pc, #44]	; (800ab10 <prvCheckForValidListAndQueue+0x7c>)
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fd42 	bl	800956c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aae8:	f000 f974 	bl	800add4 <vPortExitCritical>
}
 800aaec:	bf00      	nop
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20000f34 	.word	0x20000f34
 800aaf8:	20000f04 	.word	0x20000f04
 800aafc:	20000f18 	.word	0x20000f18
 800ab00:	20000f2c 	.word	0x20000f2c
 800ab04:	20000f30 	.word	0x20000f30
 800ab08:	20000fe0 	.word	0x20000fe0
 800ab0c:	20000f40 	.word	0x20000f40
 800ab10:	0800cb20 	.word	0x0800cb20

0800ab14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3b04      	subs	r3, #4
 800ab24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3b04      	subs	r3, #4
 800ab32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	f023 0201 	bic.w	r2, r3, #1
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	3b04      	subs	r3, #4
 800ab42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab44:	4a0c      	ldr	r2, [pc, #48]	; (800ab78 <pxPortInitialiseStack+0x64>)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	3b14      	subs	r3, #20
 800ab4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	3b04      	subs	r3, #4
 800ab5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f06f 0202 	mvn.w	r2, #2
 800ab62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	3b20      	subs	r3, #32
 800ab68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr
 800ab78:	0800ab7d 	.word	0x0800ab7d

0800ab7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab82:	2300      	movs	r3, #0
 800ab84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab86:	4b12      	ldr	r3, [pc, #72]	; (800abd0 <prvTaskExitError+0x54>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8e:	d00a      	beq.n	800aba6 <prvTaskExitError+0x2a>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	60fb      	str	r3, [r7, #12]
}
 800aba2:	bf00      	nop
 800aba4:	e7fe      	b.n	800aba4 <prvTaskExitError+0x28>
	__asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	60bb      	str	r3, [r7, #8]
}
 800abb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800abba:	bf00      	nop
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d0fc      	beq.n	800abbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800abc2:	bf00      	nop
 800abc4:	bf00      	nop
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	20000098 	.word	0x20000098
	...

0800abe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800abe0:	4b07      	ldr	r3, [pc, #28]	; (800ac00 <pxCurrentTCBConst2>)
 800abe2:	6819      	ldr	r1, [r3, #0]
 800abe4:	6808      	ldr	r0, [r1, #0]
 800abe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abea:	f380 8809 	msr	PSP, r0
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f04f 0000 	mov.w	r0, #0
 800abf6:	f380 8811 	msr	BASEPRI, r0
 800abfa:	4770      	bx	lr
 800abfc:	f3af 8000 	nop.w

0800ac00 <pxCurrentTCBConst2>:
 800ac00:	20000a04 	.word	0x20000a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac04:	bf00      	nop
 800ac06:	bf00      	nop

0800ac08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac08:	4808      	ldr	r0, [pc, #32]	; (800ac2c <prvPortStartFirstTask+0x24>)
 800ac0a:	6800      	ldr	r0, [r0, #0]
 800ac0c:	6800      	ldr	r0, [r0, #0]
 800ac0e:	f380 8808 	msr	MSP, r0
 800ac12:	f04f 0000 	mov.w	r0, #0
 800ac16:	f380 8814 	msr	CONTROL, r0
 800ac1a:	b662      	cpsie	i
 800ac1c:	b661      	cpsie	f
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	df00      	svc	0
 800ac28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac2a:	bf00      	nop
 800ac2c:	e000ed08 	.word	0xe000ed08

0800ac30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac36:	4b46      	ldr	r3, [pc, #280]	; (800ad50 <xPortStartScheduler+0x120>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a46      	ldr	r2, [pc, #280]	; (800ad54 <xPortStartScheduler+0x124>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d10a      	bne.n	800ac56 <xPortStartScheduler+0x26>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	613b      	str	r3, [r7, #16]
}
 800ac52:	bf00      	nop
 800ac54:	e7fe      	b.n	800ac54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac56:	4b3e      	ldr	r3, [pc, #248]	; (800ad50 <xPortStartScheduler+0x120>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a3f      	ldr	r2, [pc, #252]	; (800ad58 <xPortStartScheduler+0x128>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d10a      	bne.n	800ac76 <xPortStartScheduler+0x46>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	60fb      	str	r3, [r7, #12]
}
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac76:	4b39      	ldr	r3, [pc, #228]	; (800ad5c <xPortStartScheduler+0x12c>)
 800ac78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	22ff      	movs	r2, #255	; 0xff
 800ac86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac90:	78fb      	ldrb	r3, [r7, #3]
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac98:	b2da      	uxtb	r2, r3
 800ac9a:	4b31      	ldr	r3, [pc, #196]	; (800ad60 <xPortStartScheduler+0x130>)
 800ac9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac9e:	4b31      	ldr	r3, [pc, #196]	; (800ad64 <xPortStartScheduler+0x134>)
 800aca0:	2207      	movs	r2, #7
 800aca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aca4:	e009      	b.n	800acba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aca6:	4b2f      	ldr	r3, [pc, #188]	; (800ad64 <xPortStartScheduler+0x134>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3b01      	subs	r3, #1
 800acac:	4a2d      	ldr	r2, [pc, #180]	; (800ad64 <xPortStartScheduler+0x134>)
 800acae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800acb0:	78fb      	ldrb	r3, [r7, #3]
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	005b      	lsls	r3, r3, #1
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acba:	78fb      	ldrb	r3, [r7, #3]
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc2:	2b80      	cmp	r3, #128	; 0x80
 800acc4:	d0ef      	beq.n	800aca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800acc6:	4b27      	ldr	r3, [pc, #156]	; (800ad64 <xPortStartScheduler+0x134>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f1c3 0307 	rsb	r3, r3, #7
 800acce:	2b04      	cmp	r3, #4
 800acd0:	d00a      	beq.n	800ace8 <xPortStartScheduler+0xb8>
	__asm volatile
 800acd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	60bb      	str	r3, [r7, #8]
}
 800ace4:	bf00      	nop
 800ace6:	e7fe      	b.n	800ace6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ace8:	4b1e      	ldr	r3, [pc, #120]	; (800ad64 <xPortStartScheduler+0x134>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	021b      	lsls	r3, r3, #8
 800acee:	4a1d      	ldr	r2, [pc, #116]	; (800ad64 <xPortStartScheduler+0x134>)
 800acf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800acf2:	4b1c      	ldr	r3, [pc, #112]	; (800ad64 <xPortStartScheduler+0x134>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800acfa:	4a1a      	ldr	r2, [pc, #104]	; (800ad64 <xPortStartScheduler+0x134>)
 800acfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	b2da      	uxtb	r2, r3
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad06:	4b18      	ldr	r3, [pc, #96]	; (800ad68 <xPortStartScheduler+0x138>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a17      	ldr	r2, [pc, #92]	; (800ad68 <xPortStartScheduler+0x138>)
 800ad0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad12:	4b15      	ldr	r3, [pc, #84]	; (800ad68 <xPortStartScheduler+0x138>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a14      	ldr	r2, [pc, #80]	; (800ad68 <xPortStartScheduler+0x138>)
 800ad18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad1e:	f000 f8dd 	bl	800aedc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad22:	4b12      	ldr	r3, [pc, #72]	; (800ad6c <xPortStartScheduler+0x13c>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad28:	f000 f8fc 	bl	800af24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad2c:	4b10      	ldr	r3, [pc, #64]	; (800ad70 <xPortStartScheduler+0x140>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a0f      	ldr	r2, [pc, #60]	; (800ad70 <xPortStartScheduler+0x140>)
 800ad32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ad36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad38:	f7ff ff66 	bl	800ac08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad3c:	f7ff f846 	bl	8009dcc <vTaskSwitchContext>
	prvTaskExitError();
 800ad40:	f7ff ff1c 	bl	800ab7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	e000ed00 	.word	0xe000ed00
 800ad54:	410fc271 	.word	0x410fc271
 800ad58:	410fc270 	.word	0x410fc270
 800ad5c:	e000e400 	.word	0xe000e400
 800ad60:	20001030 	.word	0x20001030
 800ad64:	20001034 	.word	0x20001034
 800ad68:	e000ed20 	.word	0xe000ed20
 800ad6c:	20000098 	.word	0x20000098
 800ad70:	e000ef34 	.word	0xe000ef34

0800ad74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	607b      	str	r3, [r7, #4]
}
 800ad8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad8e:	4b0f      	ldr	r3, [pc, #60]	; (800adcc <vPortEnterCritical+0x58>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3301      	adds	r3, #1
 800ad94:	4a0d      	ldr	r2, [pc, #52]	; (800adcc <vPortEnterCritical+0x58>)
 800ad96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad98:	4b0c      	ldr	r3, [pc, #48]	; (800adcc <vPortEnterCritical+0x58>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d10f      	bne.n	800adc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ada0:	4b0b      	ldr	r3, [pc, #44]	; (800add0 <vPortEnterCritical+0x5c>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00a      	beq.n	800adc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800adaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	603b      	str	r3, [r7, #0]
}
 800adbc:	bf00      	nop
 800adbe:	e7fe      	b.n	800adbe <vPortEnterCritical+0x4a>
	}
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	20000098 	.word	0x20000098
 800add0:	e000ed04 	.word	0xe000ed04

0800add4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800adda:	4b12      	ldr	r3, [pc, #72]	; (800ae24 <vPortExitCritical+0x50>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10a      	bne.n	800adf8 <vPortExitCritical+0x24>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	607b      	str	r3, [r7, #4]
}
 800adf4:	bf00      	nop
 800adf6:	e7fe      	b.n	800adf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800adf8:	4b0a      	ldr	r3, [pc, #40]	; (800ae24 <vPortExitCritical+0x50>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	3b01      	subs	r3, #1
 800adfe:	4a09      	ldr	r2, [pc, #36]	; (800ae24 <vPortExitCritical+0x50>)
 800ae00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae02:	4b08      	ldr	r3, [pc, #32]	; (800ae24 <vPortExitCritical+0x50>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d105      	bne.n	800ae16 <vPortExitCritical+0x42>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	f383 8811 	msr	BASEPRI, r3
}
 800ae14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae16:	bf00      	nop
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	20000098 	.word	0x20000098
	...

0800ae30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae30:	f3ef 8009 	mrs	r0, PSP
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	4b15      	ldr	r3, [pc, #84]	; (800ae90 <pxCurrentTCBConst>)
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	f01e 0f10 	tst.w	lr, #16
 800ae40:	bf08      	it	eq
 800ae42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4a:	6010      	str	r0, [r2, #0]
 800ae4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae54:	f380 8811 	msr	BASEPRI, r0
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f7fe ffb4 	bl	8009dcc <vTaskSwitchContext>
 800ae64:	f04f 0000 	mov.w	r0, #0
 800ae68:	f380 8811 	msr	BASEPRI, r0
 800ae6c:	bc09      	pop	{r0, r3}
 800ae6e:	6819      	ldr	r1, [r3, #0]
 800ae70:	6808      	ldr	r0, [r1, #0]
 800ae72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae76:	f01e 0f10 	tst.w	lr, #16
 800ae7a:	bf08      	it	eq
 800ae7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae80:	f380 8809 	msr	PSP, r0
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	f3af 8000 	nop.w

0800ae90 <pxCurrentTCBConst>:
 800ae90:	20000a04 	.word	0x20000a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae94:	bf00      	nop
 800ae96:	bf00      	nop

0800ae98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	607b      	str	r3, [r7, #4]
}
 800aeb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aeb2:	f7fe fed1 	bl	8009c58 <xTaskIncrementTick>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d003      	beq.n	800aec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aebc:	4b06      	ldr	r3, [pc, #24]	; (800aed8 <xPortSysTickHandler+0x40>)
 800aebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	2300      	movs	r3, #0
 800aec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	f383 8811 	msr	BASEPRI, r3
}
 800aece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aed0:	bf00      	nop
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	e000ed04 	.word	0xe000ed04

0800aedc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aedc:	b480      	push	{r7}
 800aede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aee0:	4b0b      	ldr	r3, [pc, #44]	; (800af10 <vPortSetupTimerInterrupt+0x34>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aee6:	4b0b      	ldr	r3, [pc, #44]	; (800af14 <vPortSetupTimerInterrupt+0x38>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aeec:	4b0a      	ldr	r3, [pc, #40]	; (800af18 <vPortSetupTimerInterrupt+0x3c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a0a      	ldr	r2, [pc, #40]	; (800af1c <vPortSetupTimerInterrupt+0x40>)
 800aef2:	fba2 2303 	umull	r2, r3, r2, r3
 800aef6:	099b      	lsrs	r3, r3, #6
 800aef8:	4a09      	ldr	r2, [pc, #36]	; (800af20 <vPortSetupTimerInterrupt+0x44>)
 800aefa:	3b01      	subs	r3, #1
 800aefc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aefe:	4b04      	ldr	r3, [pc, #16]	; (800af10 <vPortSetupTimerInterrupt+0x34>)
 800af00:	2207      	movs	r2, #7
 800af02:	601a      	str	r2, [r3, #0]
}
 800af04:	bf00      	nop
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	e000e010 	.word	0xe000e010
 800af14:	e000e018 	.word	0xe000e018
 800af18:	20000000 	.word	0x20000000
 800af1c:	10624dd3 	.word	0x10624dd3
 800af20:	e000e014 	.word	0xe000e014

0800af24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800af34 <vPortEnableVFP+0x10>
 800af28:	6801      	ldr	r1, [r0, #0]
 800af2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af2e:	6001      	str	r1, [r0, #0]
 800af30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af32:	bf00      	nop
 800af34:	e000ed88 	.word	0xe000ed88

0800af38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af3e:	f3ef 8305 	mrs	r3, IPSR
 800af42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b0f      	cmp	r3, #15
 800af48:	d914      	bls.n	800af74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af4a:	4a17      	ldr	r2, [pc, #92]	; (800afa8 <vPortValidateInterruptPriority+0x70>)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	4413      	add	r3, r2
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af54:	4b15      	ldr	r3, [pc, #84]	; (800afac <vPortValidateInterruptPriority+0x74>)
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	7afa      	ldrb	r2, [r7, #11]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d20a      	bcs.n	800af74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800af5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af62:	f383 8811 	msr	BASEPRI, r3
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	607b      	str	r3, [r7, #4]
}
 800af70:	bf00      	nop
 800af72:	e7fe      	b.n	800af72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af74:	4b0e      	ldr	r3, [pc, #56]	; (800afb0 <vPortValidateInterruptPriority+0x78>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af7c:	4b0d      	ldr	r3, [pc, #52]	; (800afb4 <vPortValidateInterruptPriority+0x7c>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	429a      	cmp	r2, r3
 800af82:	d90a      	bls.n	800af9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800af84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	603b      	str	r3, [r7, #0]
}
 800af96:	bf00      	nop
 800af98:	e7fe      	b.n	800af98 <vPortValidateInterruptPriority+0x60>
	}
 800af9a:	bf00      	nop
 800af9c:	3714      	adds	r7, #20
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	e000e3f0 	.word	0xe000e3f0
 800afac:	20001030 	.word	0x20001030
 800afb0:	e000ed0c 	.word	0xe000ed0c
 800afb4:	20001034 	.word	0x20001034

0800afb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b08a      	sub	sp, #40	; 0x28
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800afc0:	2300      	movs	r3, #0
 800afc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800afc4:	f7fe fd8c 	bl	8009ae0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800afc8:	4b5b      	ldr	r3, [pc, #364]	; (800b138 <pvPortMalloc+0x180>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d101      	bne.n	800afd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800afd0:	f000 f920 	bl	800b214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800afd4:	4b59      	ldr	r3, [pc, #356]	; (800b13c <pvPortMalloc+0x184>)
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4013      	ands	r3, r2
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f040 8093 	bne.w	800b108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d01d      	beq.n	800b024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800afe8:	2208      	movs	r2, #8
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4413      	add	r3, r2
 800afee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f003 0307 	and.w	r3, r3, #7
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d014      	beq.n	800b024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f023 0307 	bic.w	r3, r3, #7
 800b000:	3308      	adds	r3, #8
 800b002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f003 0307 	and.w	r3, r3, #7
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00a      	beq.n	800b024 <pvPortMalloc+0x6c>
	__asm volatile
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	617b      	str	r3, [r7, #20]
}
 800b020:	bf00      	nop
 800b022:	e7fe      	b.n	800b022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d06e      	beq.n	800b108 <pvPortMalloc+0x150>
 800b02a:	4b45      	ldr	r3, [pc, #276]	; (800b140 <pvPortMalloc+0x188>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	429a      	cmp	r2, r3
 800b032:	d869      	bhi.n	800b108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b034:	4b43      	ldr	r3, [pc, #268]	; (800b144 <pvPortMalloc+0x18c>)
 800b036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b038:	4b42      	ldr	r3, [pc, #264]	; (800b144 <pvPortMalloc+0x18c>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b03e:	e004      	b.n	800b04a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	429a      	cmp	r2, r3
 800b052:	d903      	bls.n	800b05c <pvPortMalloc+0xa4>
 800b054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1f1      	bne.n	800b040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b05c:	4b36      	ldr	r3, [pc, #216]	; (800b138 <pvPortMalloc+0x180>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b062:	429a      	cmp	r2, r3
 800b064:	d050      	beq.n	800b108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2208      	movs	r2, #8
 800b06c:	4413      	add	r3, r2
 800b06e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	6a3b      	ldr	r3, [r7, #32]
 800b076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	685a      	ldr	r2, [r3, #4]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	1ad2      	subs	r2, r2, r3
 800b080:	2308      	movs	r3, #8
 800b082:	005b      	lsls	r3, r3, #1
 800b084:	429a      	cmp	r2, r3
 800b086:	d91f      	bls.n	800b0c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4413      	add	r3, r2
 800b08e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	f003 0307 	and.w	r3, r3, #7
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00a      	beq.n	800b0b0 <pvPortMalloc+0xf8>
	__asm volatile
 800b09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	613b      	str	r3, [r7, #16]
}
 800b0ac:	bf00      	nop
 800b0ae:	e7fe      	b.n	800b0ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b2:	685a      	ldr	r2, [r3, #4]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	1ad2      	subs	r2, r2, r3
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b0c2:	69b8      	ldr	r0, [r7, #24]
 800b0c4:	f000 f908 	bl	800b2d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b0c8:	4b1d      	ldr	r3, [pc, #116]	; (800b140 <pvPortMalloc+0x188>)
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	1ad3      	subs	r3, r2, r3
 800b0d2:	4a1b      	ldr	r2, [pc, #108]	; (800b140 <pvPortMalloc+0x188>)
 800b0d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b0d6:	4b1a      	ldr	r3, [pc, #104]	; (800b140 <pvPortMalloc+0x188>)
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	4b1b      	ldr	r3, [pc, #108]	; (800b148 <pvPortMalloc+0x190>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d203      	bcs.n	800b0ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b0e2:	4b17      	ldr	r3, [pc, #92]	; (800b140 <pvPortMalloc+0x188>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a18      	ldr	r2, [pc, #96]	; (800b148 <pvPortMalloc+0x190>)
 800b0e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	685a      	ldr	r2, [r3, #4]
 800b0ee:	4b13      	ldr	r3, [pc, #76]	; (800b13c <pvPortMalloc+0x184>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	431a      	orrs	r2, r3
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b0fe:	4b13      	ldr	r3, [pc, #76]	; (800b14c <pvPortMalloc+0x194>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3301      	adds	r3, #1
 800b104:	4a11      	ldr	r2, [pc, #68]	; (800b14c <pvPortMalloc+0x194>)
 800b106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b108:	f7fe fcf8 	bl	8009afc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	f003 0307 	and.w	r3, r3, #7
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00a      	beq.n	800b12c <pvPortMalloc+0x174>
	__asm volatile
 800b116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	60fb      	str	r3, [r7, #12]
}
 800b128:	bf00      	nop
 800b12a:	e7fe      	b.n	800b12a <pvPortMalloc+0x172>
	return pvReturn;
 800b12c:	69fb      	ldr	r3, [r7, #28]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3728      	adds	r7, #40	; 0x28
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20001bf8 	.word	0x20001bf8
 800b13c:	20001c0c 	.word	0x20001c0c
 800b140:	20001bfc 	.word	0x20001bfc
 800b144:	20001bf0 	.word	0x20001bf0
 800b148:	20001c00 	.word	0x20001c00
 800b14c:	20001c04 	.word	0x20001c04

0800b150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d04d      	beq.n	800b1fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b162:	2308      	movs	r3, #8
 800b164:	425b      	negs	r3, r3
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	4413      	add	r3, r2
 800b16a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	685a      	ldr	r2, [r3, #4]
 800b174:	4b24      	ldr	r3, [pc, #144]	; (800b208 <vPortFree+0xb8>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4013      	ands	r3, r2
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10a      	bne.n	800b194 <vPortFree+0x44>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	60fb      	str	r3, [r7, #12]
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00a      	beq.n	800b1b2 <vPortFree+0x62>
	__asm volatile
 800b19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a0:	f383 8811 	msr	BASEPRI, r3
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	60bb      	str	r3, [r7, #8]
}
 800b1ae:	bf00      	nop
 800b1b0:	e7fe      	b.n	800b1b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	4b14      	ldr	r3, [pc, #80]	; (800b208 <vPortFree+0xb8>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d01e      	beq.n	800b1fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d11a      	bne.n	800b1fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	685a      	ldr	r2, [r3, #4]
 800b1cc:	4b0e      	ldr	r3, [pc, #56]	; (800b208 <vPortFree+0xb8>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	43db      	mvns	r3, r3
 800b1d2:	401a      	ands	r2, r3
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b1d8:	f7fe fc82 	bl	8009ae0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	685a      	ldr	r2, [r3, #4]
 800b1e0:	4b0a      	ldr	r3, [pc, #40]	; (800b20c <vPortFree+0xbc>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	4a09      	ldr	r2, [pc, #36]	; (800b20c <vPortFree+0xbc>)
 800b1e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b1ea:	6938      	ldr	r0, [r7, #16]
 800b1ec:	f000 f874 	bl	800b2d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b1f0:	4b07      	ldr	r3, [pc, #28]	; (800b210 <vPortFree+0xc0>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	4a06      	ldr	r2, [pc, #24]	; (800b210 <vPortFree+0xc0>)
 800b1f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b1fa:	f7fe fc7f 	bl	8009afc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b1fe:	bf00      	nop
 800b200:	3718      	adds	r7, #24
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20001c0c 	.word	0x20001c0c
 800b20c:	20001bfc 	.word	0x20001bfc
 800b210:	20001c08 	.word	0x20001c08

0800b214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b21a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b21e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b220:	4b27      	ldr	r3, [pc, #156]	; (800b2c0 <prvHeapInit+0xac>)
 800b222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f003 0307 	and.w	r3, r3, #7
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00c      	beq.n	800b248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	3307      	adds	r3, #7
 800b232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f023 0307 	bic.w	r3, r3, #7
 800b23a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	4a1f      	ldr	r2, [pc, #124]	; (800b2c0 <prvHeapInit+0xac>)
 800b244:	4413      	add	r3, r2
 800b246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b24c:	4a1d      	ldr	r2, [pc, #116]	; (800b2c4 <prvHeapInit+0xb0>)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b252:	4b1c      	ldr	r3, [pc, #112]	; (800b2c4 <prvHeapInit+0xb0>)
 800b254:	2200      	movs	r2, #0
 800b256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	4413      	add	r3, r2
 800b25e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b260:	2208      	movs	r2, #8
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	1a9b      	subs	r3, r3, r2
 800b266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f023 0307 	bic.w	r3, r3, #7
 800b26e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	4a15      	ldr	r2, [pc, #84]	; (800b2c8 <prvHeapInit+0xb4>)
 800b274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b276:	4b14      	ldr	r3, [pc, #80]	; (800b2c8 <prvHeapInit+0xb4>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2200      	movs	r2, #0
 800b27c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b27e:	4b12      	ldr	r3, [pc, #72]	; (800b2c8 <prvHeapInit+0xb4>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2200      	movs	r2, #0
 800b284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	1ad2      	subs	r2, r2, r3
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b294:	4b0c      	ldr	r3, [pc, #48]	; (800b2c8 <prvHeapInit+0xb4>)
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	4a0a      	ldr	r2, [pc, #40]	; (800b2cc <prvHeapInit+0xb8>)
 800b2a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	4a09      	ldr	r2, [pc, #36]	; (800b2d0 <prvHeapInit+0xbc>)
 800b2aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b2ac:	4b09      	ldr	r3, [pc, #36]	; (800b2d4 <prvHeapInit+0xc0>)
 800b2ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b2b2:	601a      	str	r2, [r3, #0]
}
 800b2b4:	bf00      	nop
 800b2b6:	3714      	adds	r7, #20
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	20001038 	.word	0x20001038
 800b2c4:	20001bf0 	.word	0x20001bf0
 800b2c8:	20001bf8 	.word	0x20001bf8
 800b2cc:	20001c00 	.word	0x20001c00
 800b2d0:	20001bfc 	.word	0x20001bfc
 800b2d4:	20001c0c 	.word	0x20001c0c

0800b2d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b2e0:	4b28      	ldr	r3, [pc, #160]	; (800b384 <prvInsertBlockIntoFreeList+0xac>)
 800b2e2:	60fb      	str	r3, [r7, #12]
 800b2e4:	e002      	b.n	800b2ec <prvInsertBlockIntoFreeList+0x14>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	60fb      	str	r3, [r7, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d8f7      	bhi.n	800b2e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	4413      	add	r3, r2
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	429a      	cmp	r2, r3
 800b306:	d108      	bne.n	800b31a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	685a      	ldr	r2, [r3, #4]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	441a      	add	r2, r3
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	441a      	add	r2, r3
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d118      	bne.n	800b360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	4b15      	ldr	r3, [pc, #84]	; (800b388 <prvInsertBlockIntoFreeList+0xb0>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	429a      	cmp	r2, r3
 800b338:	d00d      	beq.n	800b356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	685a      	ldr	r2, [r3, #4]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	441a      	add	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	601a      	str	r2, [r3, #0]
 800b354:	e008      	b.n	800b368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b356:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <prvInsertBlockIntoFreeList+0xb0>)
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	e003      	b.n	800b368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d002      	beq.n	800b376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b376:	bf00      	nop
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	20001bf0 	.word	0x20001bf0
 800b388:	20001bf8 	.word	0x20001bf8

0800b38c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b390:	2200      	movs	r2, #0
 800b392:	4912      	ldr	r1, [pc, #72]	; (800b3dc <MX_USB_DEVICE_Init+0x50>)
 800b394:	4812      	ldr	r0, [pc, #72]	; (800b3e0 <MX_USB_DEVICE_Init+0x54>)
 800b396:	f7fb fd2b 	bl	8006df0 <USBD_Init>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b3a0:	f7f5 fb9a 	bl	8000ad8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b3a4:	490f      	ldr	r1, [pc, #60]	; (800b3e4 <MX_USB_DEVICE_Init+0x58>)
 800b3a6:	480e      	ldr	r0, [pc, #56]	; (800b3e0 <MX_USB_DEVICE_Init+0x54>)
 800b3a8:	f7fb fd52 	bl	8006e50 <USBD_RegisterClass>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b3b2:	f7f5 fb91 	bl	8000ad8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b3b6:	490c      	ldr	r1, [pc, #48]	; (800b3e8 <MX_USB_DEVICE_Init+0x5c>)
 800b3b8:	4809      	ldr	r0, [pc, #36]	; (800b3e0 <MX_USB_DEVICE_Init+0x54>)
 800b3ba:	f7fb fc49 	bl	8006c50 <USBD_CDC_RegisterInterface>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d001      	beq.n	800b3c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b3c4:	f7f5 fb88 	bl	8000ad8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b3c8:	4805      	ldr	r0, [pc, #20]	; (800b3e0 <MX_USB_DEVICE_Init+0x54>)
 800b3ca:	f7fb fd77 	bl	8006ebc <USBD_Start>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d001      	beq.n	800b3d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b3d4:	f7f5 fb80 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b3d8:	bf00      	nop
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	200000b0 	.word	0x200000b0
 800b3e0:	20001c10 	.word	0x20001c10
 800b3e4:	20000018 	.word	0x20000018
 800b3e8:	2000009c 	.word	0x2000009c

0800b3ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	4905      	ldr	r1, [pc, #20]	; (800b408 <CDC_Init_FS+0x1c>)
 800b3f4:	4805      	ldr	r0, [pc, #20]	; (800b40c <CDC_Init_FS+0x20>)
 800b3f6:	f7fb fc45 	bl	8006c84 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b3fa:	4905      	ldr	r1, [pc, #20]	; (800b410 <CDC_Init_FS+0x24>)
 800b3fc:	4803      	ldr	r0, [pc, #12]	; (800b40c <CDC_Init_FS+0x20>)
 800b3fe:	f7fb fc63 	bl	8006cc8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b402:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b404:	4618      	mov	r0, r3
 800b406:	bd80      	pop	{r7, pc}
 800b408:	200026ec 	.word	0x200026ec
 800b40c:	20001c10 	.word	0x20001c10
 800b410:	20001eec 	.word	0x20001eec

0800b414 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b414:	b480      	push	{r7}
 800b416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b418:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	4603      	mov	r3, r0
 800b42c:	6039      	str	r1, [r7, #0]
 800b42e:	71fb      	strb	r3, [r7, #7]
 800b430:	4613      	mov	r3, r2
 800b432:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b434:	79fb      	ldrb	r3, [r7, #7]
 800b436:	2b23      	cmp	r3, #35	; 0x23
 800b438:	d84a      	bhi.n	800b4d0 <CDC_Control_FS+0xac>
 800b43a:	a201      	add	r2, pc, #4	; (adr r2, 800b440 <CDC_Control_FS+0x1c>)
 800b43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b440:	0800b4d1 	.word	0x0800b4d1
 800b444:	0800b4d1 	.word	0x0800b4d1
 800b448:	0800b4d1 	.word	0x0800b4d1
 800b44c:	0800b4d1 	.word	0x0800b4d1
 800b450:	0800b4d1 	.word	0x0800b4d1
 800b454:	0800b4d1 	.word	0x0800b4d1
 800b458:	0800b4d1 	.word	0x0800b4d1
 800b45c:	0800b4d1 	.word	0x0800b4d1
 800b460:	0800b4d1 	.word	0x0800b4d1
 800b464:	0800b4d1 	.word	0x0800b4d1
 800b468:	0800b4d1 	.word	0x0800b4d1
 800b46c:	0800b4d1 	.word	0x0800b4d1
 800b470:	0800b4d1 	.word	0x0800b4d1
 800b474:	0800b4d1 	.word	0x0800b4d1
 800b478:	0800b4d1 	.word	0x0800b4d1
 800b47c:	0800b4d1 	.word	0x0800b4d1
 800b480:	0800b4d1 	.word	0x0800b4d1
 800b484:	0800b4d1 	.word	0x0800b4d1
 800b488:	0800b4d1 	.word	0x0800b4d1
 800b48c:	0800b4d1 	.word	0x0800b4d1
 800b490:	0800b4d1 	.word	0x0800b4d1
 800b494:	0800b4d1 	.word	0x0800b4d1
 800b498:	0800b4d1 	.word	0x0800b4d1
 800b49c:	0800b4d1 	.word	0x0800b4d1
 800b4a0:	0800b4d1 	.word	0x0800b4d1
 800b4a4:	0800b4d1 	.word	0x0800b4d1
 800b4a8:	0800b4d1 	.word	0x0800b4d1
 800b4ac:	0800b4d1 	.word	0x0800b4d1
 800b4b0:	0800b4d1 	.word	0x0800b4d1
 800b4b4:	0800b4d1 	.word	0x0800b4d1
 800b4b8:	0800b4d1 	.word	0x0800b4d1
 800b4bc:	0800b4d1 	.word	0x0800b4d1
 800b4c0:	0800b4d1 	.word	0x0800b4d1
 800b4c4:	0800b4d1 	.word	0x0800b4d1
 800b4c8:	0800b4d1 	.word	0x0800b4d1
 800b4cc:	0800b4d1 	.word	0x0800b4d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b4d0:	bf00      	nop
  }

  return (USBD_OK);
 800b4d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b4ea:	6879      	ldr	r1, [r7, #4]
 800b4ec:	4805      	ldr	r0, [pc, #20]	; (800b504 <CDC_Receive_FS+0x24>)
 800b4ee:	f7fb fbeb 	bl	8006cc8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b4f2:	4804      	ldr	r0, [pc, #16]	; (800b504 <CDC_Receive_FS+0x24>)
 800b4f4:	f7fb fc46 	bl	8006d84 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b4f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	20001c10 	.word	0x20001c10

0800b508 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	460b      	mov	r3, r1
 800b512:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b518:	4b0d      	ldr	r3, [pc, #52]	; (800b550 <CDC_Transmit_FS+0x48>)
 800b51a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b51e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b526:	2b00      	cmp	r3, #0
 800b528:	d001      	beq.n	800b52e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e00b      	b.n	800b546 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b52e:	887b      	ldrh	r3, [r7, #2]
 800b530:	461a      	mov	r2, r3
 800b532:	6879      	ldr	r1, [r7, #4]
 800b534:	4806      	ldr	r0, [pc, #24]	; (800b550 <CDC_Transmit_FS+0x48>)
 800b536:	f7fb fba5 	bl	8006c84 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b53a:	4805      	ldr	r0, [pc, #20]	; (800b550 <CDC_Transmit_FS+0x48>)
 800b53c:	f7fb fbe2 	bl	8006d04 <USBD_CDC_TransmitPacket>
 800b540:	4603      	mov	r3, r0
 800b542:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b544:	7bfb      	ldrb	r3, [r7, #15]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	20001c10 	.word	0x20001c10

0800b554 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b554:	b480      	push	{r7}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	4613      	mov	r3, r2
 800b560:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b566:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	371c      	adds	r7, #28
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
	...

0800b578 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	4603      	mov	r3, r0
 800b580:	6039      	str	r1, [r7, #0]
 800b582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2212      	movs	r2, #18
 800b588:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b58a:	4b03      	ldr	r3, [pc, #12]	; (800b598 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	200000d0 	.word	0x200000d0

0800b59c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	6039      	str	r1, [r7, #0]
 800b5a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2204      	movs	r2, #4
 800b5ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5ae:	4b03      	ldr	r3, [pc, #12]	; (800b5bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	200000f0 	.word	0x200000f0

0800b5c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	6039      	str	r1, [r7, #0]
 800b5ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5cc:	79fb      	ldrb	r3, [r7, #7]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d105      	bne.n	800b5de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	4907      	ldr	r1, [pc, #28]	; (800b5f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5d6:	4808      	ldr	r0, [pc, #32]	; (800b5f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5d8:	f7fc fe4c 	bl	8008274 <USBD_GetString>
 800b5dc:	e004      	b.n	800b5e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	4904      	ldr	r1, [pc, #16]	; (800b5f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5e2:	4805      	ldr	r0, [pc, #20]	; (800b5f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5e4:	f7fc fe46 	bl	8008274 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5e8:	4b02      	ldr	r3, [pc, #8]	; (800b5f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20002eec 	.word	0x20002eec
 800b5f8:	0800cb28 	.word	0x0800cb28

0800b5fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	4603      	mov	r3, r0
 800b604:	6039      	str	r1, [r7, #0]
 800b606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b608:	683a      	ldr	r2, [r7, #0]
 800b60a:	4904      	ldr	r1, [pc, #16]	; (800b61c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b60c:	4804      	ldr	r0, [pc, #16]	; (800b620 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b60e:	f7fc fe31 	bl	8008274 <USBD_GetString>
  return USBD_StrDesc;
 800b612:	4b02      	ldr	r3, [pc, #8]	; (800b61c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b614:	4618      	mov	r0, r3
 800b616:	3708      	adds	r7, #8
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	20002eec 	.word	0x20002eec
 800b620:	0800cb40 	.word	0x0800cb40

0800b624 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	4603      	mov	r3, r0
 800b62c:	6039      	str	r1, [r7, #0]
 800b62e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	221a      	movs	r2, #26
 800b634:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b636:	f000 f855 	bl	800b6e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b63a:	4b02      	ldr	r3, [pc, #8]	; (800b644 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	200000f4 	.word	0x200000f4

0800b648 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	6039      	str	r1, [r7, #0]
 800b652:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b654:	79fb      	ldrb	r3, [r7, #7]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d105      	bne.n	800b666 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b65a:	683a      	ldr	r2, [r7, #0]
 800b65c:	4907      	ldr	r1, [pc, #28]	; (800b67c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b65e:	4808      	ldr	r0, [pc, #32]	; (800b680 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b660:	f7fc fe08 	bl	8008274 <USBD_GetString>
 800b664:	e004      	b.n	800b670 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	4904      	ldr	r1, [pc, #16]	; (800b67c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b66a:	4805      	ldr	r0, [pc, #20]	; (800b680 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b66c:	f7fc fe02 	bl	8008274 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b670:	4b02      	ldr	r3, [pc, #8]	; (800b67c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20002eec 	.word	0x20002eec
 800b680:	0800cb54 	.word	0x0800cb54

0800b684 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	4603      	mov	r3, r0
 800b68c:	6039      	str	r1, [r7, #0]
 800b68e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b690:	79fb      	ldrb	r3, [r7, #7]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d105      	bne.n	800b6a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	4907      	ldr	r1, [pc, #28]	; (800b6b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b69a:	4808      	ldr	r0, [pc, #32]	; (800b6bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b69c:	f7fc fdea 	bl	8008274 <USBD_GetString>
 800b6a0:	e004      	b.n	800b6ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	4904      	ldr	r1, [pc, #16]	; (800b6b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6a6:	4805      	ldr	r0, [pc, #20]	; (800b6bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6a8:	f7fc fde4 	bl	8008274 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6ac:	4b02      	ldr	r3, [pc, #8]	; (800b6b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20002eec 	.word	0x20002eec
 800b6bc:	0800cb60 	.word	0x0800cb60

0800b6c0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	6039      	str	r1, [r7, #0]
 800b6ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	220c      	movs	r2, #12
 800b6d0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b6d2:	4b03      	ldr	r3, [pc, #12]	; (800b6e0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr
 800b6e0:	200000e4 	.word	0x200000e4

0800b6e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b6ea:	4b0f      	ldr	r3, [pc, #60]	; (800b728 <Get_SerialNum+0x44>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b6f0:	4b0e      	ldr	r3, [pc, #56]	; (800b72c <Get_SerialNum+0x48>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b6f6:	4b0e      	ldr	r3, [pc, #56]	; (800b730 <Get_SerialNum+0x4c>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4413      	add	r3, r2
 800b702:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d009      	beq.n	800b71e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b70a:	2208      	movs	r2, #8
 800b70c:	4909      	ldr	r1, [pc, #36]	; (800b734 <Get_SerialNum+0x50>)
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f000 f814 	bl	800b73c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b714:	2204      	movs	r2, #4
 800b716:	4908      	ldr	r1, [pc, #32]	; (800b738 <Get_SerialNum+0x54>)
 800b718:	68b8      	ldr	r0, [r7, #8]
 800b71a:	f000 f80f 	bl	800b73c <IntToUnicode>
  }
}
 800b71e:	bf00      	nop
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	1fff7590 	.word	0x1fff7590
 800b72c:	1fff7594 	.word	0x1fff7594
 800b730:	1fff7598 	.word	0x1fff7598
 800b734:	200000f6 	.word	0x200000f6
 800b738:	20000106 	.word	0x20000106

0800b73c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b087      	sub	sp, #28
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	4613      	mov	r3, r2
 800b748:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b74a:	2300      	movs	r3, #0
 800b74c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b74e:	2300      	movs	r3, #0
 800b750:	75fb      	strb	r3, [r7, #23]
 800b752:	e027      	b.n	800b7a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	0f1b      	lsrs	r3, r3, #28
 800b758:	2b09      	cmp	r3, #9
 800b75a:	d80b      	bhi.n	800b774 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	0f1b      	lsrs	r3, r3, #28
 800b760:	b2da      	uxtb	r2, r3
 800b762:	7dfb      	ldrb	r3, [r7, #23]
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	4619      	mov	r1, r3
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	440b      	add	r3, r1
 800b76c:	3230      	adds	r2, #48	; 0x30
 800b76e:	b2d2      	uxtb	r2, r2
 800b770:	701a      	strb	r2, [r3, #0]
 800b772:	e00a      	b.n	800b78a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	0f1b      	lsrs	r3, r3, #28
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	7dfb      	ldrb	r3, [r7, #23]
 800b77c:	005b      	lsls	r3, r3, #1
 800b77e:	4619      	mov	r1, r3
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	440b      	add	r3, r1
 800b784:	3237      	adds	r2, #55	; 0x37
 800b786:	b2d2      	uxtb	r2, r2
 800b788:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	011b      	lsls	r3, r3, #4
 800b78e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b790:	7dfb      	ldrb	r3, [r7, #23]
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	3301      	adds	r3, #1
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	4413      	add	r3, r2
 800b79a:	2200      	movs	r2, #0
 800b79c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b79e:	7dfb      	ldrb	r3, [r7, #23]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	75fb      	strb	r3, [r7, #23]
 800b7a4:	7dfa      	ldrb	r2, [r7, #23]
 800b7a6:	79fb      	ldrb	r3, [r7, #7]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d3d3      	bcc.n	800b754 <IntToUnicode+0x18>
  }
}
 800b7ac:	bf00      	nop
 800b7ae:	bf00      	nop
 800b7b0:	371c      	adds	r7, #28
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
	...

0800b7bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b0ae      	sub	sp, #184	; 0xb8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	605a      	str	r2, [r3, #4]
 800b7ce:	609a      	str	r2, [r3, #8]
 800b7d0:	60da      	str	r2, [r3, #12]
 800b7d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b7d4:	f107 0318 	add.w	r3, r7, #24
 800b7d8:	228c      	movs	r2, #140	; 0x8c
 800b7da:	2100      	movs	r1, #0
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 fd2d 	bl	800c23c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7ea:	d163      	bne.n	800b8b4 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b7ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b7f8:	f107 0318 	add.w	r3, r7, #24
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7f7 fea1 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b808:	f7f5 f966 	bl	8000ad8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b80c:	4b2b      	ldr	r3, [pc, #172]	; (800b8bc <HAL_PCD_MspInit+0x100>)
 800b80e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b810:	4a2a      	ldr	r2, [pc, #168]	; (800b8bc <HAL_PCD_MspInit+0x100>)
 800b812:	f043 0301 	orr.w	r3, r3, #1
 800b816:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b818:	4b28      	ldr	r3, [pc, #160]	; (800b8bc <HAL_PCD_MspInit+0x100>)
 800b81a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	617b      	str	r3, [r7, #20]
 800b822:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b824:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800b828:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b82c:	2302      	movs	r3, #2
 800b82e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b832:	2300      	movs	r3, #0
 800b834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b838:	2303      	movs	r3, #3
 800b83a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b83e:	230a      	movs	r3, #10
 800b840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b844:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b848:	4619      	mov	r1, r3
 800b84a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b84e:	f7f5 fc19 	bl	8001084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b852:	4b1a      	ldr	r3, [pc, #104]	; (800b8bc <HAL_PCD_MspInit+0x100>)
 800b854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b856:	4a19      	ldr	r2, [pc, #100]	; (800b8bc <HAL_PCD_MspInit+0x100>)
 800b858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b85c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b85e:	4b17      	ldr	r3, [pc, #92]	; (800b8bc <HAL_PCD_MspInit+0x100>)
 800b860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b866:	613b      	str	r3, [r7, #16]
 800b868:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b86a:	4b14      	ldr	r3, [pc, #80]	; (800b8bc <HAL_PCD_MspInit+0x100>)
 800b86c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b86e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b872:	2b00      	cmp	r3, #0
 800b874:	d114      	bne.n	800b8a0 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b876:	4b11      	ldr	r3, [pc, #68]	; (800b8bc <HAL_PCD_MspInit+0x100>)
 800b878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b87a:	4a10      	ldr	r2, [pc, #64]	; (800b8bc <HAL_PCD_MspInit+0x100>)
 800b87c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b880:	6593      	str	r3, [r2, #88]	; 0x58
 800b882:	4b0e      	ldr	r3, [pc, #56]	; (800b8bc <HAL_PCD_MspInit+0x100>)
 800b884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800b88e:	f7f6 ffc9 	bl	8002824 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b892:	4b0a      	ldr	r3, [pc, #40]	; (800b8bc <HAL_PCD_MspInit+0x100>)
 800b894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b896:	4a09      	ldr	r2, [pc, #36]	; (800b8bc <HAL_PCD_MspInit+0x100>)
 800b898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b89c:	6593      	str	r3, [r2, #88]	; 0x58
 800b89e:	e001      	b.n	800b8a4 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b8a0:	f7f6 ffc0 	bl	8002824 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	2105      	movs	r1, #5
 800b8a8:	2043      	movs	r0, #67	; 0x43
 800b8aa:	f7f5 fbc1 	bl	8001030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b8ae:	2043      	movs	r0, #67	; 0x43
 800b8b0:	f7f5 fbda 	bl	8001068 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b8b4:	bf00      	nop
 800b8b6:	37b8      	adds	r7, #184	; 0xb8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	40021000 	.word	0x40021000

0800b8c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	f7fb fb3d 	bl	8006f56 <USBD_LL_SetupStage>
}
 800b8dc:	bf00      	nop
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b8f6:	78fa      	ldrb	r2, [r7, #3]
 800b8f8:	6879      	ldr	r1, [r7, #4]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	00db      	lsls	r3, r3, #3
 800b8fe:	4413      	add	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	440b      	add	r3, r1
 800b904:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	78fb      	ldrb	r3, [r7, #3]
 800b90c:	4619      	mov	r1, r3
 800b90e:	f7fb fb77 	bl	8007000 <USBD_LL_DataOutStage>
}
 800b912:	bf00      	nop
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b082      	sub	sp, #8
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
 800b922:	460b      	mov	r3, r1
 800b924:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b92c:	78fa      	ldrb	r2, [r7, #3]
 800b92e:	6879      	ldr	r1, [r7, #4]
 800b930:	4613      	mov	r3, r2
 800b932:	00db      	lsls	r3, r3, #3
 800b934:	4413      	add	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	440b      	add	r3, r1
 800b93a:	3348      	adds	r3, #72	; 0x48
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	78fb      	ldrb	r3, [r7, #3]
 800b940:	4619      	mov	r1, r3
 800b942:	f7fb fc10 	bl	8007166 <USBD_LL_DataInStage>
}
 800b946:	bf00      	nop
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b082      	sub	sp, #8
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fb fd4a 	bl	80073f6 <USBD_LL_SOF>
}
 800b962:	bf00      	nop
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b084      	sub	sp, #16
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b972:	2301      	movs	r3, #1
 800b974:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	691b      	ldr	r3, [r3, #16]
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d001      	beq.n	800b982 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b97e:	f7f5 f8ab 	bl	8000ad8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b988:	7bfa      	ldrb	r2, [r7, #15]
 800b98a:	4611      	mov	r1, r2
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7fb fcee 	bl	800736e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fb fc96 	bl	80072ca <USBD_LL_Reset>
}
 800b99e:	bf00      	nop
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
	...

0800b9a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	6812      	ldr	r2, [r2, #0]
 800b9be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9c2:	f043 0301 	orr.w	r3, r3, #1
 800b9c6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fb fcdd 	bl	800738e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a1b      	ldr	r3, [r3, #32]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d005      	beq.n	800b9e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9dc:	4b04      	ldr	r3, [pc, #16]	; (800b9f0 <HAL_PCD_SuspendCallback+0x48>)
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	4a03      	ldr	r2, [pc, #12]	; (800b9f0 <HAL_PCD_SuspendCallback+0x48>)
 800b9e2:	f043 0306 	orr.w	r3, r3, #6
 800b9e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b9e8:	bf00      	nop
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	e000ed00 	.word	0xe000ed00

0800b9f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	6812      	ldr	r2, [r2, #0]
 800ba0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba0e:	f023 0301 	bic.w	r3, r3, #1
 800ba12:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a1b      	ldr	r3, [r3, #32]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d007      	beq.n	800ba2c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba1c:	4b08      	ldr	r3, [pc, #32]	; (800ba40 <HAL_PCD_ResumeCallback+0x4c>)
 800ba1e:	691b      	ldr	r3, [r3, #16]
 800ba20:	4a07      	ldr	r2, [pc, #28]	; (800ba40 <HAL_PCD_ResumeCallback+0x4c>)
 800ba22:	f023 0306 	bic.w	r3, r3, #6
 800ba26:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ba28:	f000 faf6 	bl	800c018 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fb fcc7 	bl	80073c6 <USBD_LL_Resume>
}
 800ba38:	bf00      	nop
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	e000ed00 	.word	0xe000ed00

0800ba44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba56:	78fa      	ldrb	r2, [r7, #3]
 800ba58:	4611      	mov	r1, r2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fb fd1d 	bl	800749a <USBD_LL_IsoOUTIncomplete>
}
 800ba60:	bf00      	nop
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	460b      	mov	r3, r1
 800ba72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba7a:	78fa      	ldrb	r2, [r7, #3]
 800ba7c:	4611      	mov	r1, r2
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7fb fcd9 	bl	8007436 <USBD_LL_IsoINIncomplete>
}
 800ba84:	bf00      	nop
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fb fd2f 	bl	80074fe <USBD_LL_DevConnected>
}
 800baa0:	bf00      	nop
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7fb fd2c 	bl	8007514 <USBD_LL_DevDisconnected>
}
 800babc:	bf00      	nop
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d13c      	bne.n	800bb4e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bad4:	4a20      	ldr	r2, [pc, #128]	; (800bb58 <USBD_LL_Init+0x94>)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a1e      	ldr	r2, [pc, #120]	; (800bb58 <USBD_LL_Init+0x94>)
 800bae0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bae4:	4b1c      	ldr	r3, [pc, #112]	; (800bb58 <USBD_LL_Init+0x94>)
 800bae6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800baea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800baec:	4b1a      	ldr	r3, [pc, #104]	; (800bb58 <USBD_LL_Init+0x94>)
 800baee:	2206      	movs	r2, #6
 800baf0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800baf2:	4b19      	ldr	r3, [pc, #100]	; (800bb58 <USBD_LL_Init+0x94>)
 800baf4:	2202      	movs	r2, #2
 800baf6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800baf8:	4b17      	ldr	r3, [pc, #92]	; (800bb58 <USBD_LL_Init+0x94>)
 800bafa:	2202      	movs	r2, #2
 800bafc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bafe:	4b16      	ldr	r3, [pc, #88]	; (800bb58 <USBD_LL_Init+0x94>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bb04:	4b14      	ldr	r3, [pc, #80]	; (800bb58 <USBD_LL_Init+0x94>)
 800bb06:	2200      	movs	r2, #0
 800bb08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bb0a:	4b13      	ldr	r3, [pc, #76]	; (800bb58 <USBD_LL_Init+0x94>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800bb10:	4b11      	ldr	r3, [pc, #68]	; (800bb58 <USBD_LL_Init+0x94>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bb16:	4b10      	ldr	r3, [pc, #64]	; (800bb58 <USBD_LL_Init+0x94>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bb1c:	4b0e      	ldr	r3, [pc, #56]	; (800bb58 <USBD_LL_Init+0x94>)
 800bb1e:	2200      	movs	r2, #0
 800bb20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bb22:	480d      	ldr	r0, [pc, #52]	; (800bb58 <USBD_LL_Init+0x94>)
 800bb24:	f7f5 fc72 	bl	800140c <HAL_PCD_Init>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d001      	beq.n	800bb32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bb2e:	f7f4 ffd3 	bl	8000ad8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bb32:	2180      	movs	r1, #128	; 0x80
 800bb34:	4808      	ldr	r0, [pc, #32]	; (800bb58 <USBD_LL_Init+0x94>)
 800bb36:	f7f6 fddc 	bl	80026f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bb3a:	2240      	movs	r2, #64	; 0x40
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	4806      	ldr	r0, [pc, #24]	; (800bb58 <USBD_LL_Init+0x94>)
 800bb40:	f7f6 fd90 	bl	8002664 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bb44:	2280      	movs	r2, #128	; 0x80
 800bb46:	2101      	movs	r1, #1
 800bb48:	4803      	ldr	r0, [pc, #12]	; (800bb58 <USBD_LL_Init+0x94>)
 800bb4a:	f7f6 fd8b 	bl	8002664 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3708      	adds	r7, #8
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	200030ec 	.word	0x200030ec

0800bb5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7f5 fd6e 	bl	8001654 <HAL_PCD_Start>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bb7c:	7bbb      	ldrb	r3, [r7, #14]
 800bb7e:	2b03      	cmp	r3, #3
 800bb80:	d816      	bhi.n	800bbb0 <USBD_LL_Start+0x54>
 800bb82:	a201      	add	r2, pc, #4	; (adr r2, 800bb88 <USBD_LL_Start+0x2c>)
 800bb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb88:	0800bb99 	.word	0x0800bb99
 800bb8c:	0800bb9f 	.word	0x0800bb9f
 800bb90:	0800bba5 	.word	0x0800bba5
 800bb94:	0800bbab 	.word	0x0800bbab
    case HAL_OK :
      usb_status = USBD_OK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb9c:	e00b      	b.n	800bbb6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	73fb      	strb	r3, [r7, #15]
    break;
 800bba2:	e008      	b.n	800bbb6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bba4:	2301      	movs	r3, #1
 800bba6:	73fb      	strb	r3, [r7, #15]
    break;
 800bba8:	e005      	b.n	800bbb6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	73fb      	strb	r3, [r7, #15]
    break;
 800bbae:	e002      	b.n	800bbb6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbb4:	bf00      	nop
  }
  return usb_status;
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	4608      	mov	r0, r1
 800bbca:	4611      	mov	r1, r2
 800bbcc:	461a      	mov	r2, r3
 800bbce:	4603      	mov	r3, r0
 800bbd0:	70fb      	strb	r3, [r7, #3]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70bb      	strb	r3, [r7, #2]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bbe8:	78bb      	ldrb	r3, [r7, #2]
 800bbea:	883a      	ldrh	r2, [r7, #0]
 800bbec:	78f9      	ldrb	r1, [r7, #3]
 800bbee:	f7f6 fa18 	bl	8002022 <HAL_PCD_EP_Open>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bbf6:	7bbb      	ldrb	r3, [r7, #14]
 800bbf8:	2b03      	cmp	r3, #3
 800bbfa:	d817      	bhi.n	800bc2c <USBD_LL_OpenEP+0x6c>
 800bbfc:	a201      	add	r2, pc, #4	; (adr r2, 800bc04 <USBD_LL_OpenEP+0x44>)
 800bbfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc02:	bf00      	nop
 800bc04:	0800bc15 	.word	0x0800bc15
 800bc08:	0800bc1b 	.word	0x0800bc1b
 800bc0c:	0800bc21 	.word	0x0800bc21
 800bc10:	0800bc27 	.word	0x0800bc27
    case HAL_OK :
      usb_status = USBD_OK;
 800bc14:	2300      	movs	r3, #0
 800bc16:	73fb      	strb	r3, [r7, #15]
    break;
 800bc18:	e00b      	b.n	800bc32 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc1e:	e008      	b.n	800bc32 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc20:	2301      	movs	r3, #1
 800bc22:	73fb      	strb	r3, [r7, #15]
    break;
 800bc24:	e005      	b.n	800bc32 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc26:	2303      	movs	r3, #3
 800bc28:	73fb      	strb	r3, [r7, #15]
    break;
 800bc2a:	e002      	b.n	800bc32 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc30:	bf00      	nop
  }
  return usb_status;
 800bc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	460b      	mov	r3, r1
 800bc46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc56:	78fa      	ldrb	r2, [r7, #3]
 800bc58:	4611      	mov	r1, r2
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7f6 fa49 	bl	80020f2 <HAL_PCD_EP_Close>
 800bc60:	4603      	mov	r3, r0
 800bc62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc64:	7bbb      	ldrb	r3, [r7, #14]
 800bc66:	2b03      	cmp	r3, #3
 800bc68:	d816      	bhi.n	800bc98 <USBD_LL_CloseEP+0x5c>
 800bc6a:	a201      	add	r2, pc, #4	; (adr r2, 800bc70 <USBD_LL_CloseEP+0x34>)
 800bc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc70:	0800bc81 	.word	0x0800bc81
 800bc74:	0800bc87 	.word	0x0800bc87
 800bc78:	0800bc8d 	.word	0x0800bc8d
 800bc7c:	0800bc93 	.word	0x0800bc93
    case HAL_OK :
      usb_status = USBD_OK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	73fb      	strb	r3, [r7, #15]
    break;
 800bc84:	e00b      	b.n	800bc9e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc86:	2303      	movs	r3, #3
 800bc88:	73fb      	strb	r3, [r7, #15]
    break;
 800bc8a:	e008      	b.n	800bc9e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc90:	e005      	b.n	800bc9e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc92:	2303      	movs	r3, #3
 800bc94:	73fb      	strb	r3, [r7, #15]
    break;
 800bc96:	e002      	b.n	800bc9e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bc98:	2303      	movs	r3, #3
 800bc9a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc9c:	bf00      	nop
  }
  return usb_status;
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcc2:	78fa      	ldrb	r2, [r7, #3]
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7f6 fad8 	bl	800227c <HAL_PCD_EP_SetStall>
 800bccc:	4603      	mov	r3, r0
 800bcce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	2b03      	cmp	r3, #3
 800bcd4:	d816      	bhi.n	800bd04 <USBD_LL_StallEP+0x5c>
 800bcd6:	a201      	add	r2, pc, #4	; (adr r2, 800bcdc <USBD_LL_StallEP+0x34>)
 800bcd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcdc:	0800bced 	.word	0x0800bced
 800bce0:	0800bcf3 	.word	0x0800bcf3
 800bce4:	0800bcf9 	.word	0x0800bcf9
 800bce8:	0800bcff 	.word	0x0800bcff
    case HAL_OK :
      usb_status = USBD_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf0:	e00b      	b.n	800bd0a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf6:	e008      	b.n	800bd0a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	73fb      	strb	r3, [r7, #15]
    break;
 800bcfc:	e005      	b.n	800bd0a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcfe:	2303      	movs	r3, #3
 800bd00:	73fb      	strb	r3, [r7, #15]
    break;
 800bd02:	e002      	b.n	800bd0a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bd04:	2303      	movs	r3, #3
 800bd06:	73fb      	strb	r3, [r7, #15]
    break;
 800bd08:	bf00      	nop
  }
  return usb_status;
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd2e:	78fa      	ldrb	r2, [r7, #3]
 800bd30:	4611      	mov	r1, r2
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7f6 fb04 	bl	8002340 <HAL_PCD_EP_ClrStall>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd3c:	7bbb      	ldrb	r3, [r7, #14]
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	d816      	bhi.n	800bd70 <USBD_LL_ClearStallEP+0x5c>
 800bd42:	a201      	add	r2, pc, #4	; (adr r2, 800bd48 <USBD_LL_ClearStallEP+0x34>)
 800bd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd48:	0800bd59 	.word	0x0800bd59
 800bd4c:	0800bd5f 	.word	0x0800bd5f
 800bd50:	0800bd65 	.word	0x0800bd65
 800bd54:	0800bd6b 	.word	0x0800bd6b
    case HAL_OK :
      usb_status = USBD_OK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd5c:	e00b      	b.n	800bd76 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	73fb      	strb	r3, [r7, #15]
    break;
 800bd62:	e008      	b.n	800bd76 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd64:	2301      	movs	r3, #1
 800bd66:	73fb      	strb	r3, [r7, #15]
    break;
 800bd68:	e005      	b.n	800bd76 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd6a:	2303      	movs	r3, #3
 800bd6c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd6e:	e002      	b.n	800bd76 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bd70:	2303      	movs	r3, #3
 800bd72:	73fb      	strb	r3, [r7, #15]
    break;
 800bd74:	bf00      	nop
  }
  return usb_status;
 800bd76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bd94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	da0b      	bge.n	800bdb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd9c:	78fb      	ldrb	r3, [r7, #3]
 800bd9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bda2:	68f9      	ldr	r1, [r7, #12]
 800bda4:	4613      	mov	r3, r2
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	4413      	add	r3, r2
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	440b      	add	r3, r1
 800bdae:	333e      	adds	r3, #62	; 0x3e
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	e00b      	b.n	800bdcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bdb4:	78fb      	ldrb	r3, [r7, #3]
 800bdb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdba:	68f9      	ldr	r1, [r7, #12]
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	00db      	lsls	r3, r3, #3
 800bdc0:	4413      	add	r3, r2
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	440b      	add	r3, r1
 800bdc6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bdca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3714      	adds	r7, #20
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	460b      	mov	r3, r1
 800bde2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bde8:	2300      	movs	r3, #0
 800bdea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdf2:	78fa      	ldrb	r2, [r7, #3]
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7f6 f8ee 	bl	8001fd8 <HAL_PCD_SetAddress>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800be00:	7bbb      	ldrb	r3, [r7, #14]
 800be02:	2b03      	cmp	r3, #3
 800be04:	d816      	bhi.n	800be34 <USBD_LL_SetUSBAddress+0x5c>
 800be06:	a201      	add	r2, pc, #4	; (adr r2, 800be0c <USBD_LL_SetUSBAddress+0x34>)
 800be08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be0c:	0800be1d 	.word	0x0800be1d
 800be10:	0800be23 	.word	0x0800be23
 800be14:	0800be29 	.word	0x0800be29
 800be18:	0800be2f 	.word	0x0800be2f
    case HAL_OK :
      usb_status = USBD_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73fb      	strb	r3, [r7, #15]
    break;
 800be20:	e00b      	b.n	800be3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be22:	2303      	movs	r3, #3
 800be24:	73fb      	strb	r3, [r7, #15]
    break;
 800be26:	e008      	b.n	800be3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be28:	2301      	movs	r3, #1
 800be2a:	73fb      	strb	r3, [r7, #15]
    break;
 800be2c:	e005      	b.n	800be3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be2e:	2303      	movs	r3, #3
 800be30:	73fb      	strb	r3, [r7, #15]
    break;
 800be32:	e002      	b.n	800be3a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800be34:	2303      	movs	r3, #3
 800be36:	73fb      	strb	r3, [r7, #15]
    break;
 800be38:	bf00      	nop
  }
  return usb_status;
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b086      	sub	sp, #24
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	607a      	str	r2, [r7, #4]
 800be4e:	603b      	str	r3, [r7, #0]
 800be50:	460b      	mov	r3, r1
 800be52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800be62:	7af9      	ldrb	r1, [r7, #11]
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	f7f6 f9d7 	bl	800221a <HAL_PCD_EP_Transmit>
 800be6c:	4603      	mov	r3, r0
 800be6e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800be70:	7dbb      	ldrb	r3, [r7, #22]
 800be72:	2b03      	cmp	r3, #3
 800be74:	d816      	bhi.n	800bea4 <USBD_LL_Transmit+0x60>
 800be76:	a201      	add	r2, pc, #4	; (adr r2, 800be7c <USBD_LL_Transmit+0x38>)
 800be78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7c:	0800be8d 	.word	0x0800be8d
 800be80:	0800be93 	.word	0x0800be93
 800be84:	0800be99 	.word	0x0800be99
 800be88:	0800be9f 	.word	0x0800be9f
    case HAL_OK :
      usb_status = USBD_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	75fb      	strb	r3, [r7, #23]
    break;
 800be90:	e00b      	b.n	800beaa <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be92:	2303      	movs	r3, #3
 800be94:	75fb      	strb	r3, [r7, #23]
    break;
 800be96:	e008      	b.n	800beaa <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be98:	2301      	movs	r3, #1
 800be9a:	75fb      	strb	r3, [r7, #23]
    break;
 800be9c:	e005      	b.n	800beaa <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be9e:	2303      	movs	r3, #3
 800bea0:	75fb      	strb	r3, [r7, #23]
    break;
 800bea2:	e002      	b.n	800beaa <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bea4:	2303      	movs	r3, #3
 800bea6:	75fb      	strb	r3, [r7, #23]
    break;
 800bea8:	bf00      	nop
  }
  return usb_status;
 800beaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b086      	sub	sp, #24
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	607a      	str	r2, [r7, #4]
 800bebe:	603b      	str	r3, [r7, #0]
 800bec0:	460b      	mov	r3, r1
 800bec2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bec8:	2300      	movs	r3, #0
 800beca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bed2:	7af9      	ldrb	r1, [r7, #11]
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	f7f6 f955 	bl	8002186 <HAL_PCD_EP_Receive>
 800bedc:	4603      	mov	r3, r0
 800bede:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bee0:	7dbb      	ldrb	r3, [r7, #22]
 800bee2:	2b03      	cmp	r3, #3
 800bee4:	d816      	bhi.n	800bf14 <USBD_LL_PrepareReceive+0x60>
 800bee6:	a201      	add	r2, pc, #4	; (adr r2, 800beec <USBD_LL_PrepareReceive+0x38>)
 800bee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beec:	0800befd 	.word	0x0800befd
 800bef0:	0800bf03 	.word	0x0800bf03
 800bef4:	0800bf09 	.word	0x0800bf09
 800bef8:	0800bf0f 	.word	0x0800bf0f
    case HAL_OK :
      usb_status = USBD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	75fb      	strb	r3, [r7, #23]
    break;
 800bf00:	e00b      	b.n	800bf1a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf02:	2303      	movs	r3, #3
 800bf04:	75fb      	strb	r3, [r7, #23]
    break;
 800bf06:	e008      	b.n	800bf1a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	75fb      	strb	r3, [r7, #23]
    break;
 800bf0c:	e005      	b.n	800bf1a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	75fb      	strb	r3, [r7, #23]
    break;
 800bf12:	e002      	b.n	800bf1a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bf14:	2303      	movs	r3, #3
 800bf16:	75fb      	strb	r3, [r7, #23]
    break;
 800bf18:	bf00      	nop
  }
  return usb_status;
 800bf1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3718      	adds	r7, #24
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf36:	78fa      	ldrb	r2, [r7, #3]
 800bf38:	4611      	mov	r1, r2
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7f6 f955 	bl	80021ea <HAL_PCD_EP_GetRxCount>
 800bf40:	4603      	mov	r3, r0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
	...

0800bf4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	460b      	mov	r3, r1
 800bf56:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bf58:	78fb      	ldrb	r3, [r7, #3]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d002      	beq.n	800bf64 <HAL_PCDEx_LPM_Callback+0x18>
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d01f      	beq.n	800bfa2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bf62:	e03b      	b.n	800bfdc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a1b      	ldr	r3, [r3, #32]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d007      	beq.n	800bf7c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bf6c:	f000 f854 	bl	800c018 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf70:	4b1c      	ldr	r3, [pc, #112]	; (800bfe4 <HAL_PCDEx_LPM_Callback+0x98>)
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	4a1b      	ldr	r2, [pc, #108]	; (800bfe4 <HAL_PCDEx_LPM_Callback+0x98>)
 800bf76:	f023 0306 	bic.w	r3, r3, #6
 800bf7a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	6812      	ldr	r2, [r2, #0]
 800bf8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf8e:	f023 0301 	bic.w	r3, r3, #1
 800bf92:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fb fa13 	bl	80073c6 <USBD_LL_Resume>
    break;
 800bfa0:	e01c      	b.n	800bfdc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	6812      	ldr	r2, [r2, #0]
 800bfb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bfb4:	f043 0301 	orr.w	r3, r3, #1
 800bfb8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fb f9e4 	bl	800738e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d005      	beq.n	800bfda <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfce:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <HAL_PCDEx_LPM_Callback+0x98>)
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	4a04      	ldr	r2, [pc, #16]	; (800bfe4 <HAL_PCDEx_LPM_Callback+0x98>)
 800bfd4:	f043 0306 	orr.w	r3, r3, #6
 800bfd8:	6113      	str	r3, [r2, #16]
    break;
 800bfda:	bf00      	nop
}
 800bfdc:	bf00      	nop
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	e000ed00 	.word	0xe000ed00

0800bfe8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bff0:	4b03      	ldr	r3, [pc, #12]	; (800c000 <USBD_static_malloc+0x18>)
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	200035f8 	.word	0x200035f8

0800c004 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]

}
 800c00c:	bf00      	nop
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c01c:	f7f4 fbfe 	bl	800081c <SystemClock_Config>
}
 800c020:	bf00      	nop
 800c022:	bd80      	pop	{r7, pc}

0800c024 <calloc>:
 800c024:	4b02      	ldr	r3, [pc, #8]	; (800c030 <calloc+0xc>)
 800c026:	460a      	mov	r2, r1
 800c028:	4601      	mov	r1, r0
 800c02a:	6818      	ldr	r0, [r3, #0]
 800c02c:	f000 b802 	b.w	800c034 <_calloc_r>
 800c030:	2000015c 	.word	0x2000015c

0800c034 <_calloc_r>:
 800c034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c036:	fba1 2402 	umull	r2, r4, r1, r2
 800c03a:	b94c      	cbnz	r4, 800c050 <_calloc_r+0x1c>
 800c03c:	4611      	mov	r1, r2
 800c03e:	9201      	str	r2, [sp, #4]
 800c040:	f000 f836 	bl	800c0b0 <_malloc_r>
 800c044:	9a01      	ldr	r2, [sp, #4]
 800c046:	4605      	mov	r5, r0
 800c048:	b930      	cbnz	r0, 800c058 <_calloc_r+0x24>
 800c04a:	4628      	mov	r0, r5
 800c04c:	b003      	add	sp, #12
 800c04e:	bd30      	pop	{r4, r5, pc}
 800c050:	220c      	movs	r2, #12
 800c052:	6002      	str	r2, [r0, #0]
 800c054:	2500      	movs	r5, #0
 800c056:	e7f8      	b.n	800c04a <_calloc_r+0x16>
 800c058:	4621      	mov	r1, r4
 800c05a:	f000 f8ef 	bl	800c23c <memset>
 800c05e:	e7f4      	b.n	800c04a <_calloc_r+0x16>

0800c060 <free>:
 800c060:	4b02      	ldr	r3, [pc, #8]	; (800c06c <free+0xc>)
 800c062:	4601      	mov	r1, r0
 800c064:	6818      	ldr	r0, [r3, #0]
 800c066:	f000 b991 	b.w	800c38c <_free_r>
 800c06a:	bf00      	nop
 800c06c:	2000015c 	.word	0x2000015c

0800c070 <sbrk_aligned>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	4e0e      	ldr	r6, [pc, #56]	; (800c0ac <sbrk_aligned+0x3c>)
 800c074:	460c      	mov	r4, r1
 800c076:	6831      	ldr	r1, [r6, #0]
 800c078:	4605      	mov	r5, r0
 800c07a:	b911      	cbnz	r1, 800c082 <sbrk_aligned+0x12>
 800c07c:	f000 f93c 	bl	800c2f8 <_sbrk_r>
 800c080:	6030      	str	r0, [r6, #0]
 800c082:	4621      	mov	r1, r4
 800c084:	4628      	mov	r0, r5
 800c086:	f000 f937 	bl	800c2f8 <_sbrk_r>
 800c08a:	1c43      	adds	r3, r0, #1
 800c08c:	d00a      	beq.n	800c0a4 <sbrk_aligned+0x34>
 800c08e:	1cc4      	adds	r4, r0, #3
 800c090:	f024 0403 	bic.w	r4, r4, #3
 800c094:	42a0      	cmp	r0, r4
 800c096:	d007      	beq.n	800c0a8 <sbrk_aligned+0x38>
 800c098:	1a21      	subs	r1, r4, r0
 800c09a:	4628      	mov	r0, r5
 800c09c:	f000 f92c 	bl	800c2f8 <_sbrk_r>
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	d101      	bne.n	800c0a8 <sbrk_aligned+0x38>
 800c0a4:	f04f 34ff 	mov.w	r4, #4294967295
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	bd70      	pop	{r4, r5, r6, pc}
 800c0ac:	2000381c 	.word	0x2000381c

0800c0b0 <_malloc_r>:
 800c0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0b4:	1ccd      	adds	r5, r1, #3
 800c0b6:	f025 0503 	bic.w	r5, r5, #3
 800c0ba:	3508      	adds	r5, #8
 800c0bc:	2d0c      	cmp	r5, #12
 800c0be:	bf38      	it	cc
 800c0c0:	250c      	movcc	r5, #12
 800c0c2:	2d00      	cmp	r5, #0
 800c0c4:	4607      	mov	r7, r0
 800c0c6:	db01      	blt.n	800c0cc <_malloc_r+0x1c>
 800c0c8:	42a9      	cmp	r1, r5
 800c0ca:	d905      	bls.n	800c0d8 <_malloc_r+0x28>
 800c0cc:	230c      	movs	r3, #12
 800c0ce:	603b      	str	r3, [r7, #0]
 800c0d0:	2600      	movs	r6, #0
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c1ac <_malloc_r+0xfc>
 800c0dc:	f000 f868 	bl	800c1b0 <__malloc_lock>
 800c0e0:	f8d8 3000 	ldr.w	r3, [r8]
 800c0e4:	461c      	mov	r4, r3
 800c0e6:	bb5c      	cbnz	r4, 800c140 <_malloc_r+0x90>
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	4638      	mov	r0, r7
 800c0ec:	f7ff ffc0 	bl	800c070 <sbrk_aligned>
 800c0f0:	1c43      	adds	r3, r0, #1
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	d155      	bne.n	800c1a2 <_malloc_r+0xf2>
 800c0f6:	f8d8 4000 	ldr.w	r4, [r8]
 800c0fa:	4626      	mov	r6, r4
 800c0fc:	2e00      	cmp	r6, #0
 800c0fe:	d145      	bne.n	800c18c <_malloc_r+0xdc>
 800c100:	2c00      	cmp	r4, #0
 800c102:	d048      	beq.n	800c196 <_malloc_r+0xe6>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	4631      	mov	r1, r6
 800c108:	4638      	mov	r0, r7
 800c10a:	eb04 0903 	add.w	r9, r4, r3
 800c10e:	f000 f8f3 	bl	800c2f8 <_sbrk_r>
 800c112:	4581      	cmp	r9, r0
 800c114:	d13f      	bne.n	800c196 <_malloc_r+0xe6>
 800c116:	6821      	ldr	r1, [r4, #0]
 800c118:	1a6d      	subs	r5, r5, r1
 800c11a:	4629      	mov	r1, r5
 800c11c:	4638      	mov	r0, r7
 800c11e:	f7ff ffa7 	bl	800c070 <sbrk_aligned>
 800c122:	3001      	adds	r0, #1
 800c124:	d037      	beq.n	800c196 <_malloc_r+0xe6>
 800c126:	6823      	ldr	r3, [r4, #0]
 800c128:	442b      	add	r3, r5
 800c12a:	6023      	str	r3, [r4, #0]
 800c12c:	f8d8 3000 	ldr.w	r3, [r8]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d038      	beq.n	800c1a6 <_malloc_r+0xf6>
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	42a2      	cmp	r2, r4
 800c138:	d12b      	bne.n	800c192 <_malloc_r+0xe2>
 800c13a:	2200      	movs	r2, #0
 800c13c:	605a      	str	r2, [r3, #4]
 800c13e:	e00f      	b.n	800c160 <_malloc_r+0xb0>
 800c140:	6822      	ldr	r2, [r4, #0]
 800c142:	1b52      	subs	r2, r2, r5
 800c144:	d41f      	bmi.n	800c186 <_malloc_r+0xd6>
 800c146:	2a0b      	cmp	r2, #11
 800c148:	d917      	bls.n	800c17a <_malloc_r+0xca>
 800c14a:	1961      	adds	r1, r4, r5
 800c14c:	42a3      	cmp	r3, r4
 800c14e:	6025      	str	r5, [r4, #0]
 800c150:	bf18      	it	ne
 800c152:	6059      	strne	r1, [r3, #4]
 800c154:	6863      	ldr	r3, [r4, #4]
 800c156:	bf08      	it	eq
 800c158:	f8c8 1000 	streq.w	r1, [r8]
 800c15c:	5162      	str	r2, [r4, r5]
 800c15e:	604b      	str	r3, [r1, #4]
 800c160:	4638      	mov	r0, r7
 800c162:	f104 060b 	add.w	r6, r4, #11
 800c166:	f000 f829 	bl	800c1bc <__malloc_unlock>
 800c16a:	f026 0607 	bic.w	r6, r6, #7
 800c16e:	1d23      	adds	r3, r4, #4
 800c170:	1af2      	subs	r2, r6, r3
 800c172:	d0ae      	beq.n	800c0d2 <_malloc_r+0x22>
 800c174:	1b9b      	subs	r3, r3, r6
 800c176:	50a3      	str	r3, [r4, r2]
 800c178:	e7ab      	b.n	800c0d2 <_malloc_r+0x22>
 800c17a:	42a3      	cmp	r3, r4
 800c17c:	6862      	ldr	r2, [r4, #4]
 800c17e:	d1dd      	bne.n	800c13c <_malloc_r+0x8c>
 800c180:	f8c8 2000 	str.w	r2, [r8]
 800c184:	e7ec      	b.n	800c160 <_malloc_r+0xb0>
 800c186:	4623      	mov	r3, r4
 800c188:	6864      	ldr	r4, [r4, #4]
 800c18a:	e7ac      	b.n	800c0e6 <_malloc_r+0x36>
 800c18c:	4634      	mov	r4, r6
 800c18e:	6876      	ldr	r6, [r6, #4]
 800c190:	e7b4      	b.n	800c0fc <_malloc_r+0x4c>
 800c192:	4613      	mov	r3, r2
 800c194:	e7cc      	b.n	800c130 <_malloc_r+0x80>
 800c196:	230c      	movs	r3, #12
 800c198:	603b      	str	r3, [r7, #0]
 800c19a:	4638      	mov	r0, r7
 800c19c:	f000 f80e 	bl	800c1bc <__malloc_unlock>
 800c1a0:	e797      	b.n	800c0d2 <_malloc_r+0x22>
 800c1a2:	6025      	str	r5, [r4, #0]
 800c1a4:	e7dc      	b.n	800c160 <_malloc_r+0xb0>
 800c1a6:	605b      	str	r3, [r3, #4]
 800c1a8:	deff      	udf	#255	; 0xff
 800c1aa:	bf00      	nop
 800c1ac:	20003818 	.word	0x20003818

0800c1b0 <__malloc_lock>:
 800c1b0:	4801      	ldr	r0, [pc, #4]	; (800c1b8 <__malloc_lock+0x8>)
 800c1b2:	f000 b8db 	b.w	800c36c <__retarget_lock_acquire_recursive>
 800c1b6:	bf00      	nop
 800c1b8:	2000395c 	.word	0x2000395c

0800c1bc <__malloc_unlock>:
 800c1bc:	4801      	ldr	r0, [pc, #4]	; (800c1c4 <__malloc_unlock+0x8>)
 800c1be:	f000 b8d6 	b.w	800c36e <__retarget_lock_release_recursive>
 800c1c2:	bf00      	nop
 800c1c4:	2000395c 	.word	0x2000395c

0800c1c8 <_vsniprintf_r>:
 800c1c8:	b530      	push	{r4, r5, lr}
 800c1ca:	4614      	mov	r4, r2
 800c1cc:	2c00      	cmp	r4, #0
 800c1ce:	b09b      	sub	sp, #108	; 0x6c
 800c1d0:	4605      	mov	r5, r0
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	da05      	bge.n	800c1e2 <_vsniprintf_r+0x1a>
 800c1d6:	238b      	movs	r3, #139	; 0x8b
 800c1d8:	6003      	str	r3, [r0, #0]
 800c1da:	f04f 30ff 	mov.w	r0, #4294967295
 800c1de:	b01b      	add	sp, #108	; 0x6c
 800c1e0:	bd30      	pop	{r4, r5, pc}
 800c1e2:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c1e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c1ea:	bf14      	ite	ne
 800c1ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c1f0:	4623      	moveq	r3, r4
 800c1f2:	9302      	str	r3, [sp, #8]
 800c1f4:	9305      	str	r3, [sp, #20]
 800c1f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1fa:	9100      	str	r1, [sp, #0]
 800c1fc:	9104      	str	r1, [sp, #16]
 800c1fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c202:	4669      	mov	r1, sp
 800c204:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c206:	f000 f967 	bl	800c4d8 <_svfiprintf_r>
 800c20a:	1c43      	adds	r3, r0, #1
 800c20c:	bfbc      	itt	lt
 800c20e:	238b      	movlt	r3, #139	; 0x8b
 800c210:	602b      	strlt	r3, [r5, #0]
 800c212:	2c00      	cmp	r4, #0
 800c214:	d0e3      	beq.n	800c1de <_vsniprintf_r+0x16>
 800c216:	9b00      	ldr	r3, [sp, #0]
 800c218:	2200      	movs	r2, #0
 800c21a:	701a      	strb	r2, [r3, #0]
 800c21c:	e7df      	b.n	800c1de <_vsniprintf_r+0x16>
	...

0800c220 <vsniprintf>:
 800c220:	b507      	push	{r0, r1, r2, lr}
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	4613      	mov	r3, r2
 800c226:	460a      	mov	r2, r1
 800c228:	4601      	mov	r1, r0
 800c22a:	4803      	ldr	r0, [pc, #12]	; (800c238 <vsniprintf+0x18>)
 800c22c:	6800      	ldr	r0, [r0, #0]
 800c22e:	f7ff ffcb 	bl	800c1c8 <_vsniprintf_r>
 800c232:	b003      	add	sp, #12
 800c234:	f85d fb04 	ldr.w	pc, [sp], #4
 800c238:	2000015c 	.word	0x2000015c

0800c23c <memset>:
 800c23c:	4402      	add	r2, r0
 800c23e:	4603      	mov	r3, r0
 800c240:	4293      	cmp	r3, r2
 800c242:	d100      	bne.n	800c246 <memset+0xa>
 800c244:	4770      	bx	lr
 800c246:	f803 1b01 	strb.w	r1, [r3], #1
 800c24a:	e7f9      	b.n	800c240 <memset+0x4>

0800c24c <_reclaim_reent>:
 800c24c:	4b29      	ldr	r3, [pc, #164]	; (800c2f4 <_reclaim_reent+0xa8>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4283      	cmp	r3, r0
 800c252:	b570      	push	{r4, r5, r6, lr}
 800c254:	4604      	mov	r4, r0
 800c256:	d04b      	beq.n	800c2f0 <_reclaim_reent+0xa4>
 800c258:	69c3      	ldr	r3, [r0, #28]
 800c25a:	b143      	cbz	r3, 800c26e <_reclaim_reent+0x22>
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d144      	bne.n	800c2ec <_reclaim_reent+0xa0>
 800c262:	69e3      	ldr	r3, [r4, #28]
 800c264:	6819      	ldr	r1, [r3, #0]
 800c266:	b111      	cbz	r1, 800c26e <_reclaim_reent+0x22>
 800c268:	4620      	mov	r0, r4
 800c26a:	f000 f88f 	bl	800c38c <_free_r>
 800c26e:	6961      	ldr	r1, [r4, #20]
 800c270:	b111      	cbz	r1, 800c278 <_reclaim_reent+0x2c>
 800c272:	4620      	mov	r0, r4
 800c274:	f000 f88a 	bl	800c38c <_free_r>
 800c278:	69e1      	ldr	r1, [r4, #28]
 800c27a:	b111      	cbz	r1, 800c282 <_reclaim_reent+0x36>
 800c27c:	4620      	mov	r0, r4
 800c27e:	f000 f885 	bl	800c38c <_free_r>
 800c282:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c284:	b111      	cbz	r1, 800c28c <_reclaim_reent+0x40>
 800c286:	4620      	mov	r0, r4
 800c288:	f000 f880 	bl	800c38c <_free_r>
 800c28c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c28e:	b111      	cbz	r1, 800c296 <_reclaim_reent+0x4a>
 800c290:	4620      	mov	r0, r4
 800c292:	f000 f87b 	bl	800c38c <_free_r>
 800c296:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c298:	b111      	cbz	r1, 800c2a0 <_reclaim_reent+0x54>
 800c29a:	4620      	mov	r0, r4
 800c29c:	f000 f876 	bl	800c38c <_free_r>
 800c2a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c2a2:	b111      	cbz	r1, 800c2aa <_reclaim_reent+0x5e>
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f000 f871 	bl	800c38c <_free_r>
 800c2aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c2ac:	b111      	cbz	r1, 800c2b4 <_reclaim_reent+0x68>
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f000 f86c 	bl	800c38c <_free_r>
 800c2b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c2b6:	b111      	cbz	r1, 800c2be <_reclaim_reent+0x72>
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f000 f867 	bl	800c38c <_free_r>
 800c2be:	6a23      	ldr	r3, [r4, #32]
 800c2c0:	b1b3      	cbz	r3, 800c2f0 <_reclaim_reent+0xa4>
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c2c8:	4718      	bx	r3
 800c2ca:	5949      	ldr	r1, [r1, r5]
 800c2cc:	b941      	cbnz	r1, 800c2e0 <_reclaim_reent+0x94>
 800c2ce:	3504      	adds	r5, #4
 800c2d0:	69e3      	ldr	r3, [r4, #28]
 800c2d2:	2d80      	cmp	r5, #128	; 0x80
 800c2d4:	68d9      	ldr	r1, [r3, #12]
 800c2d6:	d1f8      	bne.n	800c2ca <_reclaim_reent+0x7e>
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f000 f857 	bl	800c38c <_free_r>
 800c2de:	e7c0      	b.n	800c262 <_reclaim_reent+0x16>
 800c2e0:	680e      	ldr	r6, [r1, #0]
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f000 f852 	bl	800c38c <_free_r>
 800c2e8:	4631      	mov	r1, r6
 800c2ea:	e7ef      	b.n	800c2cc <_reclaim_reent+0x80>
 800c2ec:	2500      	movs	r5, #0
 800c2ee:	e7ef      	b.n	800c2d0 <_reclaim_reent+0x84>
 800c2f0:	bd70      	pop	{r4, r5, r6, pc}
 800c2f2:	bf00      	nop
 800c2f4:	2000015c 	.word	0x2000015c

0800c2f8 <_sbrk_r>:
 800c2f8:	b538      	push	{r3, r4, r5, lr}
 800c2fa:	4d06      	ldr	r5, [pc, #24]	; (800c314 <_sbrk_r+0x1c>)
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	4604      	mov	r4, r0
 800c300:	4608      	mov	r0, r1
 800c302:	602b      	str	r3, [r5, #0]
 800c304:	f7f4 fd0e 	bl	8000d24 <_sbrk>
 800c308:	1c43      	adds	r3, r0, #1
 800c30a:	d102      	bne.n	800c312 <_sbrk_r+0x1a>
 800c30c:	682b      	ldr	r3, [r5, #0]
 800c30e:	b103      	cbz	r3, 800c312 <_sbrk_r+0x1a>
 800c310:	6023      	str	r3, [r4, #0]
 800c312:	bd38      	pop	{r3, r4, r5, pc}
 800c314:	20003958 	.word	0x20003958

0800c318 <__errno>:
 800c318:	4b01      	ldr	r3, [pc, #4]	; (800c320 <__errno+0x8>)
 800c31a:	6818      	ldr	r0, [r3, #0]
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	2000015c 	.word	0x2000015c

0800c324 <__libc_init_array>:
 800c324:	b570      	push	{r4, r5, r6, lr}
 800c326:	4d0d      	ldr	r5, [pc, #52]	; (800c35c <__libc_init_array+0x38>)
 800c328:	4c0d      	ldr	r4, [pc, #52]	; (800c360 <__libc_init_array+0x3c>)
 800c32a:	1b64      	subs	r4, r4, r5
 800c32c:	10a4      	asrs	r4, r4, #2
 800c32e:	2600      	movs	r6, #0
 800c330:	42a6      	cmp	r6, r4
 800c332:	d109      	bne.n	800c348 <__libc_init_array+0x24>
 800c334:	4d0b      	ldr	r5, [pc, #44]	; (800c364 <__libc_init_array+0x40>)
 800c336:	4c0c      	ldr	r4, [pc, #48]	; (800c368 <__libc_init_array+0x44>)
 800c338:	f000 fbae 	bl	800ca98 <_init>
 800c33c:	1b64      	subs	r4, r4, r5
 800c33e:	10a4      	asrs	r4, r4, #2
 800c340:	2600      	movs	r6, #0
 800c342:	42a6      	cmp	r6, r4
 800c344:	d105      	bne.n	800c352 <__libc_init_array+0x2e>
 800c346:	bd70      	pop	{r4, r5, r6, pc}
 800c348:	f855 3b04 	ldr.w	r3, [r5], #4
 800c34c:	4798      	blx	r3
 800c34e:	3601      	adds	r6, #1
 800c350:	e7ee      	b.n	800c330 <__libc_init_array+0xc>
 800c352:	f855 3b04 	ldr.w	r3, [r5], #4
 800c356:	4798      	blx	r3
 800c358:	3601      	adds	r6, #1
 800c35a:	e7f2      	b.n	800c342 <__libc_init_array+0x1e>
 800c35c:	0800cc90 	.word	0x0800cc90
 800c360:	0800cc90 	.word	0x0800cc90
 800c364:	0800cc90 	.word	0x0800cc90
 800c368:	0800cc94 	.word	0x0800cc94

0800c36c <__retarget_lock_acquire_recursive>:
 800c36c:	4770      	bx	lr

0800c36e <__retarget_lock_release_recursive>:
 800c36e:	4770      	bx	lr

0800c370 <memcpy>:
 800c370:	440a      	add	r2, r1
 800c372:	4291      	cmp	r1, r2
 800c374:	f100 33ff 	add.w	r3, r0, #4294967295
 800c378:	d100      	bne.n	800c37c <memcpy+0xc>
 800c37a:	4770      	bx	lr
 800c37c:	b510      	push	{r4, lr}
 800c37e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c382:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c386:	4291      	cmp	r1, r2
 800c388:	d1f9      	bne.n	800c37e <memcpy+0xe>
 800c38a:	bd10      	pop	{r4, pc}

0800c38c <_free_r>:
 800c38c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c38e:	2900      	cmp	r1, #0
 800c390:	d044      	beq.n	800c41c <_free_r+0x90>
 800c392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c396:	9001      	str	r0, [sp, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f1a1 0404 	sub.w	r4, r1, #4
 800c39e:	bfb8      	it	lt
 800c3a0:	18e4      	addlt	r4, r4, r3
 800c3a2:	f7ff ff05 	bl	800c1b0 <__malloc_lock>
 800c3a6:	4a1e      	ldr	r2, [pc, #120]	; (800c420 <_free_r+0x94>)
 800c3a8:	9801      	ldr	r0, [sp, #4]
 800c3aa:	6813      	ldr	r3, [r2, #0]
 800c3ac:	b933      	cbnz	r3, 800c3bc <_free_r+0x30>
 800c3ae:	6063      	str	r3, [r4, #4]
 800c3b0:	6014      	str	r4, [r2, #0]
 800c3b2:	b003      	add	sp, #12
 800c3b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3b8:	f7ff bf00 	b.w	800c1bc <__malloc_unlock>
 800c3bc:	42a3      	cmp	r3, r4
 800c3be:	d908      	bls.n	800c3d2 <_free_r+0x46>
 800c3c0:	6825      	ldr	r5, [r4, #0]
 800c3c2:	1961      	adds	r1, r4, r5
 800c3c4:	428b      	cmp	r3, r1
 800c3c6:	bf01      	itttt	eq
 800c3c8:	6819      	ldreq	r1, [r3, #0]
 800c3ca:	685b      	ldreq	r3, [r3, #4]
 800c3cc:	1949      	addeq	r1, r1, r5
 800c3ce:	6021      	streq	r1, [r4, #0]
 800c3d0:	e7ed      	b.n	800c3ae <_free_r+0x22>
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	b10b      	cbz	r3, 800c3dc <_free_r+0x50>
 800c3d8:	42a3      	cmp	r3, r4
 800c3da:	d9fa      	bls.n	800c3d2 <_free_r+0x46>
 800c3dc:	6811      	ldr	r1, [r2, #0]
 800c3de:	1855      	adds	r5, r2, r1
 800c3e0:	42a5      	cmp	r5, r4
 800c3e2:	d10b      	bne.n	800c3fc <_free_r+0x70>
 800c3e4:	6824      	ldr	r4, [r4, #0]
 800c3e6:	4421      	add	r1, r4
 800c3e8:	1854      	adds	r4, r2, r1
 800c3ea:	42a3      	cmp	r3, r4
 800c3ec:	6011      	str	r1, [r2, #0]
 800c3ee:	d1e0      	bne.n	800c3b2 <_free_r+0x26>
 800c3f0:	681c      	ldr	r4, [r3, #0]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	6053      	str	r3, [r2, #4]
 800c3f6:	440c      	add	r4, r1
 800c3f8:	6014      	str	r4, [r2, #0]
 800c3fa:	e7da      	b.n	800c3b2 <_free_r+0x26>
 800c3fc:	d902      	bls.n	800c404 <_free_r+0x78>
 800c3fe:	230c      	movs	r3, #12
 800c400:	6003      	str	r3, [r0, #0]
 800c402:	e7d6      	b.n	800c3b2 <_free_r+0x26>
 800c404:	6825      	ldr	r5, [r4, #0]
 800c406:	1961      	adds	r1, r4, r5
 800c408:	428b      	cmp	r3, r1
 800c40a:	bf04      	itt	eq
 800c40c:	6819      	ldreq	r1, [r3, #0]
 800c40e:	685b      	ldreq	r3, [r3, #4]
 800c410:	6063      	str	r3, [r4, #4]
 800c412:	bf04      	itt	eq
 800c414:	1949      	addeq	r1, r1, r5
 800c416:	6021      	streq	r1, [r4, #0]
 800c418:	6054      	str	r4, [r2, #4]
 800c41a:	e7ca      	b.n	800c3b2 <_free_r+0x26>
 800c41c:	b003      	add	sp, #12
 800c41e:	bd30      	pop	{r4, r5, pc}
 800c420:	20003818 	.word	0x20003818

0800c424 <__ssputs_r>:
 800c424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c428:	688e      	ldr	r6, [r1, #8]
 800c42a:	461f      	mov	r7, r3
 800c42c:	42be      	cmp	r6, r7
 800c42e:	680b      	ldr	r3, [r1, #0]
 800c430:	4682      	mov	sl, r0
 800c432:	460c      	mov	r4, r1
 800c434:	4690      	mov	r8, r2
 800c436:	d82c      	bhi.n	800c492 <__ssputs_r+0x6e>
 800c438:	898a      	ldrh	r2, [r1, #12]
 800c43a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c43e:	d026      	beq.n	800c48e <__ssputs_r+0x6a>
 800c440:	6965      	ldr	r5, [r4, #20]
 800c442:	6909      	ldr	r1, [r1, #16]
 800c444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c448:	eba3 0901 	sub.w	r9, r3, r1
 800c44c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c450:	1c7b      	adds	r3, r7, #1
 800c452:	444b      	add	r3, r9
 800c454:	106d      	asrs	r5, r5, #1
 800c456:	429d      	cmp	r5, r3
 800c458:	bf38      	it	cc
 800c45a:	461d      	movcc	r5, r3
 800c45c:	0553      	lsls	r3, r2, #21
 800c45e:	d527      	bpl.n	800c4b0 <__ssputs_r+0x8c>
 800c460:	4629      	mov	r1, r5
 800c462:	f7ff fe25 	bl	800c0b0 <_malloc_r>
 800c466:	4606      	mov	r6, r0
 800c468:	b360      	cbz	r0, 800c4c4 <__ssputs_r+0xa0>
 800c46a:	6921      	ldr	r1, [r4, #16]
 800c46c:	464a      	mov	r2, r9
 800c46e:	f7ff ff7f 	bl	800c370 <memcpy>
 800c472:	89a3      	ldrh	r3, [r4, #12]
 800c474:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c47c:	81a3      	strh	r3, [r4, #12]
 800c47e:	6126      	str	r6, [r4, #16]
 800c480:	6165      	str	r5, [r4, #20]
 800c482:	444e      	add	r6, r9
 800c484:	eba5 0509 	sub.w	r5, r5, r9
 800c488:	6026      	str	r6, [r4, #0]
 800c48a:	60a5      	str	r5, [r4, #8]
 800c48c:	463e      	mov	r6, r7
 800c48e:	42be      	cmp	r6, r7
 800c490:	d900      	bls.n	800c494 <__ssputs_r+0x70>
 800c492:	463e      	mov	r6, r7
 800c494:	6820      	ldr	r0, [r4, #0]
 800c496:	4632      	mov	r2, r6
 800c498:	4641      	mov	r1, r8
 800c49a:	f000 faab 	bl	800c9f4 <memmove>
 800c49e:	68a3      	ldr	r3, [r4, #8]
 800c4a0:	1b9b      	subs	r3, r3, r6
 800c4a2:	60a3      	str	r3, [r4, #8]
 800c4a4:	6823      	ldr	r3, [r4, #0]
 800c4a6:	4433      	add	r3, r6
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4b0:	462a      	mov	r2, r5
 800c4b2:	f000 fab9 	bl	800ca28 <_realloc_r>
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d1e0      	bne.n	800c47e <__ssputs_r+0x5a>
 800c4bc:	6921      	ldr	r1, [r4, #16]
 800c4be:	4650      	mov	r0, sl
 800c4c0:	f7ff ff64 	bl	800c38c <_free_r>
 800c4c4:	230c      	movs	r3, #12
 800c4c6:	f8ca 3000 	str.w	r3, [sl]
 800c4ca:	89a3      	ldrh	r3, [r4, #12]
 800c4cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4d0:	81a3      	strh	r3, [r4, #12]
 800c4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d6:	e7e9      	b.n	800c4ac <__ssputs_r+0x88>

0800c4d8 <_svfiprintf_r>:
 800c4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4dc:	4698      	mov	r8, r3
 800c4de:	898b      	ldrh	r3, [r1, #12]
 800c4e0:	061b      	lsls	r3, r3, #24
 800c4e2:	b09d      	sub	sp, #116	; 0x74
 800c4e4:	4607      	mov	r7, r0
 800c4e6:	460d      	mov	r5, r1
 800c4e8:	4614      	mov	r4, r2
 800c4ea:	d50e      	bpl.n	800c50a <_svfiprintf_r+0x32>
 800c4ec:	690b      	ldr	r3, [r1, #16]
 800c4ee:	b963      	cbnz	r3, 800c50a <_svfiprintf_r+0x32>
 800c4f0:	2140      	movs	r1, #64	; 0x40
 800c4f2:	f7ff fddd 	bl	800c0b0 <_malloc_r>
 800c4f6:	6028      	str	r0, [r5, #0]
 800c4f8:	6128      	str	r0, [r5, #16]
 800c4fa:	b920      	cbnz	r0, 800c506 <_svfiprintf_r+0x2e>
 800c4fc:	230c      	movs	r3, #12
 800c4fe:	603b      	str	r3, [r7, #0]
 800c500:	f04f 30ff 	mov.w	r0, #4294967295
 800c504:	e0d0      	b.n	800c6a8 <_svfiprintf_r+0x1d0>
 800c506:	2340      	movs	r3, #64	; 0x40
 800c508:	616b      	str	r3, [r5, #20]
 800c50a:	2300      	movs	r3, #0
 800c50c:	9309      	str	r3, [sp, #36]	; 0x24
 800c50e:	2320      	movs	r3, #32
 800c510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c514:	f8cd 800c 	str.w	r8, [sp, #12]
 800c518:	2330      	movs	r3, #48	; 0x30
 800c51a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c6c0 <_svfiprintf_r+0x1e8>
 800c51e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c522:	f04f 0901 	mov.w	r9, #1
 800c526:	4623      	mov	r3, r4
 800c528:	469a      	mov	sl, r3
 800c52a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c52e:	b10a      	cbz	r2, 800c534 <_svfiprintf_r+0x5c>
 800c530:	2a25      	cmp	r2, #37	; 0x25
 800c532:	d1f9      	bne.n	800c528 <_svfiprintf_r+0x50>
 800c534:	ebba 0b04 	subs.w	fp, sl, r4
 800c538:	d00b      	beq.n	800c552 <_svfiprintf_r+0x7a>
 800c53a:	465b      	mov	r3, fp
 800c53c:	4622      	mov	r2, r4
 800c53e:	4629      	mov	r1, r5
 800c540:	4638      	mov	r0, r7
 800c542:	f7ff ff6f 	bl	800c424 <__ssputs_r>
 800c546:	3001      	adds	r0, #1
 800c548:	f000 80a9 	beq.w	800c69e <_svfiprintf_r+0x1c6>
 800c54c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c54e:	445a      	add	r2, fp
 800c550:	9209      	str	r2, [sp, #36]	; 0x24
 800c552:	f89a 3000 	ldrb.w	r3, [sl]
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 80a1 	beq.w	800c69e <_svfiprintf_r+0x1c6>
 800c55c:	2300      	movs	r3, #0
 800c55e:	f04f 32ff 	mov.w	r2, #4294967295
 800c562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c566:	f10a 0a01 	add.w	sl, sl, #1
 800c56a:	9304      	str	r3, [sp, #16]
 800c56c:	9307      	str	r3, [sp, #28]
 800c56e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c572:	931a      	str	r3, [sp, #104]	; 0x68
 800c574:	4654      	mov	r4, sl
 800c576:	2205      	movs	r2, #5
 800c578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c57c:	4850      	ldr	r0, [pc, #320]	; (800c6c0 <_svfiprintf_r+0x1e8>)
 800c57e:	f7f3 fe3f 	bl	8000200 <memchr>
 800c582:	9a04      	ldr	r2, [sp, #16]
 800c584:	b9d8      	cbnz	r0, 800c5be <_svfiprintf_r+0xe6>
 800c586:	06d0      	lsls	r0, r2, #27
 800c588:	bf44      	itt	mi
 800c58a:	2320      	movmi	r3, #32
 800c58c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c590:	0711      	lsls	r1, r2, #28
 800c592:	bf44      	itt	mi
 800c594:	232b      	movmi	r3, #43	; 0x2b
 800c596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c59a:	f89a 3000 	ldrb.w	r3, [sl]
 800c59e:	2b2a      	cmp	r3, #42	; 0x2a
 800c5a0:	d015      	beq.n	800c5ce <_svfiprintf_r+0xf6>
 800c5a2:	9a07      	ldr	r2, [sp, #28]
 800c5a4:	4654      	mov	r4, sl
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	f04f 0c0a 	mov.w	ip, #10
 800c5ac:	4621      	mov	r1, r4
 800c5ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5b2:	3b30      	subs	r3, #48	; 0x30
 800c5b4:	2b09      	cmp	r3, #9
 800c5b6:	d94d      	bls.n	800c654 <_svfiprintf_r+0x17c>
 800c5b8:	b1b0      	cbz	r0, 800c5e8 <_svfiprintf_r+0x110>
 800c5ba:	9207      	str	r2, [sp, #28]
 800c5bc:	e014      	b.n	800c5e8 <_svfiprintf_r+0x110>
 800c5be:	eba0 0308 	sub.w	r3, r0, r8
 800c5c2:	fa09 f303 	lsl.w	r3, r9, r3
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	9304      	str	r3, [sp, #16]
 800c5ca:	46a2      	mov	sl, r4
 800c5cc:	e7d2      	b.n	800c574 <_svfiprintf_r+0x9c>
 800c5ce:	9b03      	ldr	r3, [sp, #12]
 800c5d0:	1d19      	adds	r1, r3, #4
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	9103      	str	r1, [sp, #12]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	bfbb      	ittet	lt
 800c5da:	425b      	neglt	r3, r3
 800c5dc:	f042 0202 	orrlt.w	r2, r2, #2
 800c5e0:	9307      	strge	r3, [sp, #28]
 800c5e2:	9307      	strlt	r3, [sp, #28]
 800c5e4:	bfb8      	it	lt
 800c5e6:	9204      	strlt	r2, [sp, #16]
 800c5e8:	7823      	ldrb	r3, [r4, #0]
 800c5ea:	2b2e      	cmp	r3, #46	; 0x2e
 800c5ec:	d10c      	bne.n	800c608 <_svfiprintf_r+0x130>
 800c5ee:	7863      	ldrb	r3, [r4, #1]
 800c5f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c5f2:	d134      	bne.n	800c65e <_svfiprintf_r+0x186>
 800c5f4:	9b03      	ldr	r3, [sp, #12]
 800c5f6:	1d1a      	adds	r2, r3, #4
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	9203      	str	r2, [sp, #12]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	bfb8      	it	lt
 800c600:	f04f 33ff 	movlt.w	r3, #4294967295
 800c604:	3402      	adds	r4, #2
 800c606:	9305      	str	r3, [sp, #20]
 800c608:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c6d0 <_svfiprintf_r+0x1f8>
 800c60c:	7821      	ldrb	r1, [r4, #0]
 800c60e:	2203      	movs	r2, #3
 800c610:	4650      	mov	r0, sl
 800c612:	f7f3 fdf5 	bl	8000200 <memchr>
 800c616:	b138      	cbz	r0, 800c628 <_svfiprintf_r+0x150>
 800c618:	9b04      	ldr	r3, [sp, #16]
 800c61a:	eba0 000a 	sub.w	r0, r0, sl
 800c61e:	2240      	movs	r2, #64	; 0x40
 800c620:	4082      	lsls	r2, r0
 800c622:	4313      	orrs	r3, r2
 800c624:	3401      	adds	r4, #1
 800c626:	9304      	str	r3, [sp, #16]
 800c628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c62c:	4825      	ldr	r0, [pc, #148]	; (800c6c4 <_svfiprintf_r+0x1ec>)
 800c62e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c632:	2206      	movs	r2, #6
 800c634:	f7f3 fde4 	bl	8000200 <memchr>
 800c638:	2800      	cmp	r0, #0
 800c63a:	d038      	beq.n	800c6ae <_svfiprintf_r+0x1d6>
 800c63c:	4b22      	ldr	r3, [pc, #136]	; (800c6c8 <_svfiprintf_r+0x1f0>)
 800c63e:	bb1b      	cbnz	r3, 800c688 <_svfiprintf_r+0x1b0>
 800c640:	9b03      	ldr	r3, [sp, #12]
 800c642:	3307      	adds	r3, #7
 800c644:	f023 0307 	bic.w	r3, r3, #7
 800c648:	3308      	adds	r3, #8
 800c64a:	9303      	str	r3, [sp, #12]
 800c64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c64e:	4433      	add	r3, r6
 800c650:	9309      	str	r3, [sp, #36]	; 0x24
 800c652:	e768      	b.n	800c526 <_svfiprintf_r+0x4e>
 800c654:	fb0c 3202 	mla	r2, ip, r2, r3
 800c658:	460c      	mov	r4, r1
 800c65a:	2001      	movs	r0, #1
 800c65c:	e7a6      	b.n	800c5ac <_svfiprintf_r+0xd4>
 800c65e:	2300      	movs	r3, #0
 800c660:	3401      	adds	r4, #1
 800c662:	9305      	str	r3, [sp, #20]
 800c664:	4619      	mov	r1, r3
 800c666:	f04f 0c0a 	mov.w	ip, #10
 800c66a:	4620      	mov	r0, r4
 800c66c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c670:	3a30      	subs	r2, #48	; 0x30
 800c672:	2a09      	cmp	r2, #9
 800c674:	d903      	bls.n	800c67e <_svfiprintf_r+0x1a6>
 800c676:	2b00      	cmp	r3, #0
 800c678:	d0c6      	beq.n	800c608 <_svfiprintf_r+0x130>
 800c67a:	9105      	str	r1, [sp, #20]
 800c67c:	e7c4      	b.n	800c608 <_svfiprintf_r+0x130>
 800c67e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c682:	4604      	mov	r4, r0
 800c684:	2301      	movs	r3, #1
 800c686:	e7f0      	b.n	800c66a <_svfiprintf_r+0x192>
 800c688:	ab03      	add	r3, sp, #12
 800c68a:	9300      	str	r3, [sp, #0]
 800c68c:	462a      	mov	r2, r5
 800c68e:	4b0f      	ldr	r3, [pc, #60]	; (800c6cc <_svfiprintf_r+0x1f4>)
 800c690:	a904      	add	r1, sp, #16
 800c692:	4638      	mov	r0, r7
 800c694:	f3af 8000 	nop.w
 800c698:	1c42      	adds	r2, r0, #1
 800c69a:	4606      	mov	r6, r0
 800c69c:	d1d6      	bne.n	800c64c <_svfiprintf_r+0x174>
 800c69e:	89ab      	ldrh	r3, [r5, #12]
 800c6a0:	065b      	lsls	r3, r3, #25
 800c6a2:	f53f af2d 	bmi.w	800c500 <_svfiprintf_r+0x28>
 800c6a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6a8:	b01d      	add	sp, #116	; 0x74
 800c6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ae:	ab03      	add	r3, sp, #12
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	462a      	mov	r2, r5
 800c6b4:	4b05      	ldr	r3, [pc, #20]	; (800c6cc <_svfiprintf_r+0x1f4>)
 800c6b6:	a904      	add	r1, sp, #16
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	f000 f879 	bl	800c7b0 <_printf_i>
 800c6be:	e7eb      	b.n	800c698 <_svfiprintf_r+0x1c0>
 800c6c0:	0800cc54 	.word	0x0800cc54
 800c6c4:	0800cc5e 	.word	0x0800cc5e
 800c6c8:	00000000 	.word	0x00000000
 800c6cc:	0800c425 	.word	0x0800c425
 800c6d0:	0800cc5a 	.word	0x0800cc5a

0800c6d4 <_printf_common>:
 800c6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d8:	4616      	mov	r6, r2
 800c6da:	4699      	mov	r9, r3
 800c6dc:	688a      	ldr	r2, [r1, #8]
 800c6de:	690b      	ldr	r3, [r1, #16]
 800c6e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	bfb8      	it	lt
 800c6e8:	4613      	movlt	r3, r2
 800c6ea:	6033      	str	r3, [r6, #0]
 800c6ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c6f0:	4607      	mov	r7, r0
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	b10a      	cbz	r2, 800c6fa <_printf_common+0x26>
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	6033      	str	r3, [r6, #0]
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	0699      	lsls	r1, r3, #26
 800c6fe:	bf42      	ittt	mi
 800c700:	6833      	ldrmi	r3, [r6, #0]
 800c702:	3302      	addmi	r3, #2
 800c704:	6033      	strmi	r3, [r6, #0]
 800c706:	6825      	ldr	r5, [r4, #0]
 800c708:	f015 0506 	ands.w	r5, r5, #6
 800c70c:	d106      	bne.n	800c71c <_printf_common+0x48>
 800c70e:	f104 0a19 	add.w	sl, r4, #25
 800c712:	68e3      	ldr	r3, [r4, #12]
 800c714:	6832      	ldr	r2, [r6, #0]
 800c716:	1a9b      	subs	r3, r3, r2
 800c718:	42ab      	cmp	r3, r5
 800c71a:	dc26      	bgt.n	800c76a <_printf_common+0x96>
 800c71c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c720:	1e13      	subs	r3, r2, #0
 800c722:	6822      	ldr	r2, [r4, #0]
 800c724:	bf18      	it	ne
 800c726:	2301      	movne	r3, #1
 800c728:	0692      	lsls	r2, r2, #26
 800c72a:	d42b      	bmi.n	800c784 <_printf_common+0xb0>
 800c72c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c730:	4649      	mov	r1, r9
 800c732:	4638      	mov	r0, r7
 800c734:	47c0      	blx	r8
 800c736:	3001      	adds	r0, #1
 800c738:	d01e      	beq.n	800c778 <_printf_common+0xa4>
 800c73a:	6823      	ldr	r3, [r4, #0]
 800c73c:	6922      	ldr	r2, [r4, #16]
 800c73e:	f003 0306 	and.w	r3, r3, #6
 800c742:	2b04      	cmp	r3, #4
 800c744:	bf02      	ittt	eq
 800c746:	68e5      	ldreq	r5, [r4, #12]
 800c748:	6833      	ldreq	r3, [r6, #0]
 800c74a:	1aed      	subeq	r5, r5, r3
 800c74c:	68a3      	ldr	r3, [r4, #8]
 800c74e:	bf0c      	ite	eq
 800c750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c754:	2500      	movne	r5, #0
 800c756:	4293      	cmp	r3, r2
 800c758:	bfc4      	itt	gt
 800c75a:	1a9b      	subgt	r3, r3, r2
 800c75c:	18ed      	addgt	r5, r5, r3
 800c75e:	2600      	movs	r6, #0
 800c760:	341a      	adds	r4, #26
 800c762:	42b5      	cmp	r5, r6
 800c764:	d11a      	bne.n	800c79c <_printf_common+0xc8>
 800c766:	2000      	movs	r0, #0
 800c768:	e008      	b.n	800c77c <_printf_common+0xa8>
 800c76a:	2301      	movs	r3, #1
 800c76c:	4652      	mov	r2, sl
 800c76e:	4649      	mov	r1, r9
 800c770:	4638      	mov	r0, r7
 800c772:	47c0      	blx	r8
 800c774:	3001      	adds	r0, #1
 800c776:	d103      	bne.n	800c780 <_printf_common+0xac>
 800c778:	f04f 30ff 	mov.w	r0, #4294967295
 800c77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c780:	3501      	adds	r5, #1
 800c782:	e7c6      	b.n	800c712 <_printf_common+0x3e>
 800c784:	18e1      	adds	r1, r4, r3
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	2030      	movs	r0, #48	; 0x30
 800c78a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c78e:	4422      	add	r2, r4
 800c790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c798:	3302      	adds	r3, #2
 800c79a:	e7c7      	b.n	800c72c <_printf_common+0x58>
 800c79c:	2301      	movs	r3, #1
 800c79e:	4622      	mov	r2, r4
 800c7a0:	4649      	mov	r1, r9
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	47c0      	blx	r8
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	d0e6      	beq.n	800c778 <_printf_common+0xa4>
 800c7aa:	3601      	adds	r6, #1
 800c7ac:	e7d9      	b.n	800c762 <_printf_common+0x8e>
	...

0800c7b0 <_printf_i>:
 800c7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7b4:	7e0f      	ldrb	r7, [r1, #24]
 800c7b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c7b8:	2f78      	cmp	r7, #120	; 0x78
 800c7ba:	4691      	mov	r9, r2
 800c7bc:	4680      	mov	r8, r0
 800c7be:	460c      	mov	r4, r1
 800c7c0:	469a      	mov	sl, r3
 800c7c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c7c6:	d807      	bhi.n	800c7d8 <_printf_i+0x28>
 800c7c8:	2f62      	cmp	r7, #98	; 0x62
 800c7ca:	d80a      	bhi.n	800c7e2 <_printf_i+0x32>
 800c7cc:	2f00      	cmp	r7, #0
 800c7ce:	f000 80d4 	beq.w	800c97a <_printf_i+0x1ca>
 800c7d2:	2f58      	cmp	r7, #88	; 0x58
 800c7d4:	f000 80c0 	beq.w	800c958 <_printf_i+0x1a8>
 800c7d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c7e0:	e03a      	b.n	800c858 <_printf_i+0xa8>
 800c7e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c7e6:	2b15      	cmp	r3, #21
 800c7e8:	d8f6      	bhi.n	800c7d8 <_printf_i+0x28>
 800c7ea:	a101      	add	r1, pc, #4	; (adr r1, 800c7f0 <_printf_i+0x40>)
 800c7ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7f0:	0800c849 	.word	0x0800c849
 800c7f4:	0800c85d 	.word	0x0800c85d
 800c7f8:	0800c7d9 	.word	0x0800c7d9
 800c7fc:	0800c7d9 	.word	0x0800c7d9
 800c800:	0800c7d9 	.word	0x0800c7d9
 800c804:	0800c7d9 	.word	0x0800c7d9
 800c808:	0800c85d 	.word	0x0800c85d
 800c80c:	0800c7d9 	.word	0x0800c7d9
 800c810:	0800c7d9 	.word	0x0800c7d9
 800c814:	0800c7d9 	.word	0x0800c7d9
 800c818:	0800c7d9 	.word	0x0800c7d9
 800c81c:	0800c961 	.word	0x0800c961
 800c820:	0800c889 	.word	0x0800c889
 800c824:	0800c91b 	.word	0x0800c91b
 800c828:	0800c7d9 	.word	0x0800c7d9
 800c82c:	0800c7d9 	.word	0x0800c7d9
 800c830:	0800c983 	.word	0x0800c983
 800c834:	0800c7d9 	.word	0x0800c7d9
 800c838:	0800c889 	.word	0x0800c889
 800c83c:	0800c7d9 	.word	0x0800c7d9
 800c840:	0800c7d9 	.word	0x0800c7d9
 800c844:	0800c923 	.word	0x0800c923
 800c848:	682b      	ldr	r3, [r5, #0]
 800c84a:	1d1a      	adds	r2, r3, #4
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	602a      	str	r2, [r5, #0]
 800c850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c858:	2301      	movs	r3, #1
 800c85a:	e09f      	b.n	800c99c <_printf_i+0x1ec>
 800c85c:	6820      	ldr	r0, [r4, #0]
 800c85e:	682b      	ldr	r3, [r5, #0]
 800c860:	0607      	lsls	r7, r0, #24
 800c862:	f103 0104 	add.w	r1, r3, #4
 800c866:	6029      	str	r1, [r5, #0]
 800c868:	d501      	bpl.n	800c86e <_printf_i+0xbe>
 800c86a:	681e      	ldr	r6, [r3, #0]
 800c86c:	e003      	b.n	800c876 <_printf_i+0xc6>
 800c86e:	0646      	lsls	r6, r0, #25
 800c870:	d5fb      	bpl.n	800c86a <_printf_i+0xba>
 800c872:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c876:	2e00      	cmp	r6, #0
 800c878:	da03      	bge.n	800c882 <_printf_i+0xd2>
 800c87a:	232d      	movs	r3, #45	; 0x2d
 800c87c:	4276      	negs	r6, r6
 800c87e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c882:	485a      	ldr	r0, [pc, #360]	; (800c9ec <_printf_i+0x23c>)
 800c884:	230a      	movs	r3, #10
 800c886:	e012      	b.n	800c8ae <_printf_i+0xfe>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	6820      	ldr	r0, [r4, #0]
 800c88c:	1d19      	adds	r1, r3, #4
 800c88e:	6029      	str	r1, [r5, #0]
 800c890:	0605      	lsls	r5, r0, #24
 800c892:	d501      	bpl.n	800c898 <_printf_i+0xe8>
 800c894:	681e      	ldr	r6, [r3, #0]
 800c896:	e002      	b.n	800c89e <_printf_i+0xee>
 800c898:	0641      	lsls	r1, r0, #25
 800c89a:	d5fb      	bpl.n	800c894 <_printf_i+0xe4>
 800c89c:	881e      	ldrh	r6, [r3, #0]
 800c89e:	4853      	ldr	r0, [pc, #332]	; (800c9ec <_printf_i+0x23c>)
 800c8a0:	2f6f      	cmp	r7, #111	; 0x6f
 800c8a2:	bf0c      	ite	eq
 800c8a4:	2308      	moveq	r3, #8
 800c8a6:	230a      	movne	r3, #10
 800c8a8:	2100      	movs	r1, #0
 800c8aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8ae:	6865      	ldr	r5, [r4, #4]
 800c8b0:	60a5      	str	r5, [r4, #8]
 800c8b2:	2d00      	cmp	r5, #0
 800c8b4:	bfa2      	ittt	ge
 800c8b6:	6821      	ldrge	r1, [r4, #0]
 800c8b8:	f021 0104 	bicge.w	r1, r1, #4
 800c8bc:	6021      	strge	r1, [r4, #0]
 800c8be:	b90e      	cbnz	r6, 800c8c4 <_printf_i+0x114>
 800c8c0:	2d00      	cmp	r5, #0
 800c8c2:	d04b      	beq.n	800c95c <_printf_i+0x1ac>
 800c8c4:	4615      	mov	r5, r2
 800c8c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c8ca:	fb03 6711 	mls	r7, r3, r1, r6
 800c8ce:	5dc7      	ldrb	r7, [r0, r7]
 800c8d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c8d4:	4637      	mov	r7, r6
 800c8d6:	42bb      	cmp	r3, r7
 800c8d8:	460e      	mov	r6, r1
 800c8da:	d9f4      	bls.n	800c8c6 <_printf_i+0x116>
 800c8dc:	2b08      	cmp	r3, #8
 800c8de:	d10b      	bne.n	800c8f8 <_printf_i+0x148>
 800c8e0:	6823      	ldr	r3, [r4, #0]
 800c8e2:	07de      	lsls	r6, r3, #31
 800c8e4:	d508      	bpl.n	800c8f8 <_printf_i+0x148>
 800c8e6:	6923      	ldr	r3, [r4, #16]
 800c8e8:	6861      	ldr	r1, [r4, #4]
 800c8ea:	4299      	cmp	r1, r3
 800c8ec:	bfde      	ittt	le
 800c8ee:	2330      	movle	r3, #48	; 0x30
 800c8f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c8f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c8f8:	1b52      	subs	r2, r2, r5
 800c8fa:	6122      	str	r2, [r4, #16]
 800c8fc:	f8cd a000 	str.w	sl, [sp]
 800c900:	464b      	mov	r3, r9
 800c902:	aa03      	add	r2, sp, #12
 800c904:	4621      	mov	r1, r4
 800c906:	4640      	mov	r0, r8
 800c908:	f7ff fee4 	bl	800c6d4 <_printf_common>
 800c90c:	3001      	adds	r0, #1
 800c90e:	d14a      	bne.n	800c9a6 <_printf_i+0x1f6>
 800c910:	f04f 30ff 	mov.w	r0, #4294967295
 800c914:	b004      	add	sp, #16
 800c916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	f043 0320 	orr.w	r3, r3, #32
 800c920:	6023      	str	r3, [r4, #0]
 800c922:	4833      	ldr	r0, [pc, #204]	; (800c9f0 <_printf_i+0x240>)
 800c924:	2778      	movs	r7, #120	; 0x78
 800c926:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c92a:	6823      	ldr	r3, [r4, #0]
 800c92c:	6829      	ldr	r1, [r5, #0]
 800c92e:	061f      	lsls	r7, r3, #24
 800c930:	f851 6b04 	ldr.w	r6, [r1], #4
 800c934:	d402      	bmi.n	800c93c <_printf_i+0x18c>
 800c936:	065f      	lsls	r7, r3, #25
 800c938:	bf48      	it	mi
 800c93a:	b2b6      	uxthmi	r6, r6
 800c93c:	07df      	lsls	r7, r3, #31
 800c93e:	bf48      	it	mi
 800c940:	f043 0320 	orrmi.w	r3, r3, #32
 800c944:	6029      	str	r1, [r5, #0]
 800c946:	bf48      	it	mi
 800c948:	6023      	strmi	r3, [r4, #0]
 800c94a:	b91e      	cbnz	r6, 800c954 <_printf_i+0x1a4>
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	f023 0320 	bic.w	r3, r3, #32
 800c952:	6023      	str	r3, [r4, #0]
 800c954:	2310      	movs	r3, #16
 800c956:	e7a7      	b.n	800c8a8 <_printf_i+0xf8>
 800c958:	4824      	ldr	r0, [pc, #144]	; (800c9ec <_printf_i+0x23c>)
 800c95a:	e7e4      	b.n	800c926 <_printf_i+0x176>
 800c95c:	4615      	mov	r5, r2
 800c95e:	e7bd      	b.n	800c8dc <_printf_i+0x12c>
 800c960:	682b      	ldr	r3, [r5, #0]
 800c962:	6826      	ldr	r6, [r4, #0]
 800c964:	6961      	ldr	r1, [r4, #20]
 800c966:	1d18      	adds	r0, r3, #4
 800c968:	6028      	str	r0, [r5, #0]
 800c96a:	0635      	lsls	r5, r6, #24
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	d501      	bpl.n	800c974 <_printf_i+0x1c4>
 800c970:	6019      	str	r1, [r3, #0]
 800c972:	e002      	b.n	800c97a <_printf_i+0x1ca>
 800c974:	0670      	lsls	r0, r6, #25
 800c976:	d5fb      	bpl.n	800c970 <_printf_i+0x1c0>
 800c978:	8019      	strh	r1, [r3, #0]
 800c97a:	2300      	movs	r3, #0
 800c97c:	6123      	str	r3, [r4, #16]
 800c97e:	4615      	mov	r5, r2
 800c980:	e7bc      	b.n	800c8fc <_printf_i+0x14c>
 800c982:	682b      	ldr	r3, [r5, #0]
 800c984:	1d1a      	adds	r2, r3, #4
 800c986:	602a      	str	r2, [r5, #0]
 800c988:	681d      	ldr	r5, [r3, #0]
 800c98a:	6862      	ldr	r2, [r4, #4]
 800c98c:	2100      	movs	r1, #0
 800c98e:	4628      	mov	r0, r5
 800c990:	f7f3 fc36 	bl	8000200 <memchr>
 800c994:	b108      	cbz	r0, 800c99a <_printf_i+0x1ea>
 800c996:	1b40      	subs	r0, r0, r5
 800c998:	6060      	str	r0, [r4, #4]
 800c99a:	6863      	ldr	r3, [r4, #4]
 800c99c:	6123      	str	r3, [r4, #16]
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9a4:	e7aa      	b.n	800c8fc <_printf_i+0x14c>
 800c9a6:	6923      	ldr	r3, [r4, #16]
 800c9a8:	462a      	mov	r2, r5
 800c9aa:	4649      	mov	r1, r9
 800c9ac:	4640      	mov	r0, r8
 800c9ae:	47d0      	blx	sl
 800c9b0:	3001      	adds	r0, #1
 800c9b2:	d0ad      	beq.n	800c910 <_printf_i+0x160>
 800c9b4:	6823      	ldr	r3, [r4, #0]
 800c9b6:	079b      	lsls	r3, r3, #30
 800c9b8:	d413      	bmi.n	800c9e2 <_printf_i+0x232>
 800c9ba:	68e0      	ldr	r0, [r4, #12]
 800c9bc:	9b03      	ldr	r3, [sp, #12]
 800c9be:	4298      	cmp	r0, r3
 800c9c0:	bfb8      	it	lt
 800c9c2:	4618      	movlt	r0, r3
 800c9c4:	e7a6      	b.n	800c914 <_printf_i+0x164>
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	4632      	mov	r2, r6
 800c9ca:	4649      	mov	r1, r9
 800c9cc:	4640      	mov	r0, r8
 800c9ce:	47d0      	blx	sl
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	d09d      	beq.n	800c910 <_printf_i+0x160>
 800c9d4:	3501      	adds	r5, #1
 800c9d6:	68e3      	ldr	r3, [r4, #12]
 800c9d8:	9903      	ldr	r1, [sp, #12]
 800c9da:	1a5b      	subs	r3, r3, r1
 800c9dc:	42ab      	cmp	r3, r5
 800c9de:	dcf2      	bgt.n	800c9c6 <_printf_i+0x216>
 800c9e0:	e7eb      	b.n	800c9ba <_printf_i+0x20a>
 800c9e2:	2500      	movs	r5, #0
 800c9e4:	f104 0619 	add.w	r6, r4, #25
 800c9e8:	e7f5      	b.n	800c9d6 <_printf_i+0x226>
 800c9ea:	bf00      	nop
 800c9ec:	0800cc65 	.word	0x0800cc65
 800c9f0:	0800cc76 	.word	0x0800cc76

0800c9f4 <memmove>:
 800c9f4:	4288      	cmp	r0, r1
 800c9f6:	b510      	push	{r4, lr}
 800c9f8:	eb01 0402 	add.w	r4, r1, r2
 800c9fc:	d902      	bls.n	800ca04 <memmove+0x10>
 800c9fe:	4284      	cmp	r4, r0
 800ca00:	4623      	mov	r3, r4
 800ca02:	d807      	bhi.n	800ca14 <memmove+0x20>
 800ca04:	1e43      	subs	r3, r0, #1
 800ca06:	42a1      	cmp	r1, r4
 800ca08:	d008      	beq.n	800ca1c <memmove+0x28>
 800ca0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca12:	e7f8      	b.n	800ca06 <memmove+0x12>
 800ca14:	4402      	add	r2, r0
 800ca16:	4601      	mov	r1, r0
 800ca18:	428a      	cmp	r2, r1
 800ca1a:	d100      	bne.n	800ca1e <memmove+0x2a>
 800ca1c:	bd10      	pop	{r4, pc}
 800ca1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca26:	e7f7      	b.n	800ca18 <memmove+0x24>

0800ca28 <_realloc_r>:
 800ca28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca2c:	4680      	mov	r8, r0
 800ca2e:	4614      	mov	r4, r2
 800ca30:	460e      	mov	r6, r1
 800ca32:	b921      	cbnz	r1, 800ca3e <_realloc_r+0x16>
 800ca34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca38:	4611      	mov	r1, r2
 800ca3a:	f7ff bb39 	b.w	800c0b0 <_malloc_r>
 800ca3e:	b92a      	cbnz	r2, 800ca4c <_realloc_r+0x24>
 800ca40:	f7ff fca4 	bl	800c38c <_free_r>
 800ca44:	4625      	mov	r5, r4
 800ca46:	4628      	mov	r0, r5
 800ca48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca4c:	f000 f81b 	bl	800ca86 <_malloc_usable_size_r>
 800ca50:	4284      	cmp	r4, r0
 800ca52:	4607      	mov	r7, r0
 800ca54:	d802      	bhi.n	800ca5c <_realloc_r+0x34>
 800ca56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca5a:	d812      	bhi.n	800ca82 <_realloc_r+0x5a>
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	4640      	mov	r0, r8
 800ca60:	f7ff fb26 	bl	800c0b0 <_malloc_r>
 800ca64:	4605      	mov	r5, r0
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d0ed      	beq.n	800ca46 <_realloc_r+0x1e>
 800ca6a:	42bc      	cmp	r4, r7
 800ca6c:	4622      	mov	r2, r4
 800ca6e:	4631      	mov	r1, r6
 800ca70:	bf28      	it	cs
 800ca72:	463a      	movcs	r2, r7
 800ca74:	f7ff fc7c 	bl	800c370 <memcpy>
 800ca78:	4631      	mov	r1, r6
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	f7ff fc86 	bl	800c38c <_free_r>
 800ca80:	e7e1      	b.n	800ca46 <_realloc_r+0x1e>
 800ca82:	4635      	mov	r5, r6
 800ca84:	e7df      	b.n	800ca46 <_realloc_r+0x1e>

0800ca86 <_malloc_usable_size_r>:
 800ca86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca8a:	1f18      	subs	r0, r3, #4
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	bfbc      	itt	lt
 800ca90:	580b      	ldrlt	r3, [r1, r0]
 800ca92:	18c0      	addlt	r0, r0, r3
 800ca94:	4770      	bx	lr
	...

0800ca98 <_init>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	bf00      	nop
 800ca9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9e:	bc08      	pop	{r3}
 800caa0:	469e      	mov	lr, r3
 800caa2:	4770      	bx	lr

0800caa4 <_fini>:
 800caa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa6:	bf00      	nop
 800caa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caaa:	bc08      	pop	{r3}
 800caac:	469e      	mov	lr, r3
 800caae:	4770      	bx	lr
