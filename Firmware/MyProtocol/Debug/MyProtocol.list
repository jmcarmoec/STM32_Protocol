
MyProtocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b724  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800b8d4  0800b8d4  0001b8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9ac  0800b9ac  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9ac  0800b9ac  0001b9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9b4  0800b9b4  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9b4  0800b9b4  0001b9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9b8  0800b9b8  0001b9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800b9bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037e4  20000160  0800bb1c  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003944  0800bb1c  00023944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   000253b4  00000000  00000000  000201d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005074  00000000  00000000  00045587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001de8  00000000  00000000  0004a600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000170d  00000000  00000000  0004c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006556  00000000  00000000  0004daf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002393e  00000000  00000000  0005404b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f14c  00000000  00000000  00077989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000080ec  00000000  00000000  00186ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0018ebc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000160 	.word	0x20000160
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b8bc 	.word	0x0800b8bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000164 	.word	0x20000164
 80001ec:	0800b8bc 	.word	0x0800b8bc

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004f0:	f000 fac5 	bl	8000a7e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004f4:	f000 f818 	bl	8000528 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f8:	f000 f89a 	bl	8000630 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 80004fc:	f000 f86a 	bl	80005d4 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000500:	f007 fd4e 	bl	8007fa0 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <main+0x30>)
 8000506:	2100      	movs	r1, #0
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <main+0x34>)
 800050a:	f007 fd93 	bl	8008034 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <main+0x38>)
 8000512:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000514:	f007 fd68 	bl	8007fe8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000518:	e7fe      	b.n	8000518 <main+0x2c>
 800051a:	bf00      	nop
 800051c:	0800b940 	.word	0x0800b940
 8000520:	08000765 	.word	0x08000765
 8000524:	20000204 	.word	0x20000204

08000528 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	; 0x58
 800052c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f00b f8d6 	bl	800b6e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800054a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054e:	f001 ff4f 	bl	80023f0 <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000558:	f000 f930 	bl	80007bc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 800055c:	2330      	movs	r3, #48	; 0x30
 800055e:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800056c:	2360      	movs	r3, #96	; 0x60
 800056e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000574:	2301      	movs	r3, #1
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 800057c:	2328      	movs	r3, #40	; 0x28
 800057e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4618      	mov	r0, r3
 8000592:	f001 ffa3 	bl	80024dc <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x78>
		Error_Handler();
 800059c:	f000 f90e 	bl	80007bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2303      	movs	r3, #3
 80005a6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80005b6:	463b      	mov	r3, r7
 80005b8:	2104      	movs	r1, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fba8 	bl	8002d10 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xa2>
		Error_Handler();
 80005c6:	f000 f8f9 	bl	80007bc <Error_Handler>
	}
}
 80005ca:	bf00      	nop
 80005cc:	3758      	adds	r7, #88	; 0x58
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_LPUART1_UART_Init+0x50>)
 80005da:	4a13      	ldr	r2, [pc, #76]	; (8000628 <MX_LPUART1_UART_Init+0x54>)
 80005dc:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 209700;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_LPUART1_UART_Init+0x50>)
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_LPUART1_UART_Init+0x58>)
 80005e2:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_LPUART1_UART_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_LPUART1_UART_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_LPUART1_UART_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_LPUART1_UART_Init+0x50>)
 80005f8:	220c      	movs	r2, #12
 80005fa:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_LPUART1_UART_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_LPUART1_UART_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_LPUART1_UART_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_LPUART1_UART_Init+0x50>)
 8000610:	f003 fd52 	bl	80040b8 <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_LPUART1_UART_Init+0x4a>
		Error_Handler();
 800061a:	f000 f8cf 	bl	80007bc <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000017c 	.word	0x2000017c
 8000628:	40008000 	.word	0x40008000
 800062c:	00033324 	.word	0x00033324

08000630 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b43      	ldr	r3, [pc, #268]	; (8000754 <MX_GPIO_Init+0x124>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a42      	ldr	r2, [pc, #264]	; (8000754 <MX_GPIO_Init+0x124>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b40      	ldr	r3, [pc, #256]	; (8000754 <MX_GPIO_Init+0x124>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800065e:	4b3d      	ldr	r3, [pc, #244]	; (8000754 <MX_GPIO_Init+0x124>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a3c      	ldr	r2, [pc, #240]	; (8000754 <MX_GPIO_Init+0x124>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b3a      	ldr	r3, [pc, #232]	; (8000754 <MX_GPIO_Init+0x124>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b37      	ldr	r3, [pc, #220]	; (8000754 <MX_GPIO_Init+0x124>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a36      	ldr	r2, [pc, #216]	; (8000754 <MX_GPIO_Init+0x124>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b34      	ldr	r3, [pc, #208]	; (8000754 <MX_GPIO_Init+0x124>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800068e:	4b31      	ldr	r3, [pc, #196]	; (8000754 <MX_GPIO_Init+0x124>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a30      	ldr	r2, [pc, #192]	; (8000754 <MX_GPIO_Init+0x124>)
 8000694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <MX_GPIO_Init+0x124>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_EnableVddIO2();
 80006a6:	f001 ff09 	bl	80024bc <HAL_PWREx_EnableVddIO2>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <MX_GPIO_Init+0x124>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a29      	ldr	r2, [pc, #164]	; (8000754 <MX_GPIO_Init+0x124>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <MX_GPIO_Init+0x124>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006c8:	4823      	ldr	r0, [pc, #140]	; (8000758 <MX_GPIO_Init+0x128>)
 80006ca:	f000 fca9 	bl	8001020 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG,
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 80006d4:	4821      	ldr	r0, [pc, #132]	; (800075c <MX_GPIO_Init+0x12c>)
 80006d6:	f000 fca3 	bl	8001020 <HAL_GPIO_WritePin>
			USB_PowerSwitchOn_Pin | SMPS_V1_Pin | SMPS_EN_Pin | SMPS_SW_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80006da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	481b      	ldr	r0, [pc, #108]	; (8000760 <MX_GPIO_Init+0x130>)
 80006f2:	f000 fb03 	bl	8000cfc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 80006f6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80006fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4812      	ldr	r0, [pc, #72]	; (8000758 <MX_GPIO_Init+0x128>)
 8000710:	f000 faf4 	bl	8000cfc <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin | SMPS_PG_Pin;
 8000714:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000718:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_GPIO_Init+0x12c>)
 800072a:	f000 fae7 	bl	8000cfc <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin | SMPS_V1_Pin | SMPS_EN_Pin
 800072e:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 8000732:	617b      	str	r3, [r7, #20]
			| SMPS_SW_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_GPIO_Init+0x12c>)
 8000748:	f000 fad8 	bl	8000cfc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	; 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400
 800075c:	48001800 	.word	0x48001800
 8000760:	48000800 	.word	0x48000800

08000764 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 800076c:	f00a f996 	bl	800aa9c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	4808      	ldr	r0, [pc, #32]	; (8000794 <StartDefaultTask+0x30>)
 8000774:	f000 fc6c 	bl	8001050 <HAL_GPIO_TogglePin>
	for (;;) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <StartDefaultTask+0x30>)
 800077c:	f000 fc68 	bl	8001050 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000780:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <StartDefaultTask+0x30>)
 8000786:	f000 fc63 	bl	8001050 <HAL_GPIO_TogglePin>

		osDelay(1000);
 800078a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800078e:	f007 fce3 	bl	8008158 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000792:	e7f1      	b.n	8000778 <StartDefaultTask+0x14>
 8000794:	48000400 	.word	0x48000400

08000798 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80007aa:	f000 f981 	bl	8000ab0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40012c00 	.word	0x40012c00

080007bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HAL_MspInit+0x4c>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <HAL_MspInit+0x4c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6613      	str	r3, [r2, #96]	; 0x60
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_MspInit+0x4c>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_MspInit+0x4c>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <HAL_MspInit+0x4c>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6593      	str	r3, [r2, #88]	; 0x58
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_MspInit+0x4c>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	210f      	movs	r1, #15
 8000802:	f06f 0001 	mvn.w	r0, #1
 8000806:	f000 fa4f 	bl	8000ca8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0ac      	sub	sp, #176	; 0xb0
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	228c      	movs	r2, #140	; 0x8c
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f00a ff55 	bl	800b6e8 <memset>
  if(huart->Instance==LPUART1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a22      	ldr	r2, [pc, #136]	; (80008cc <HAL_UART_MspInit+0xb4>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d13d      	bne.n	80008c4 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000848:	2320      	movs	r3, #32
 800084a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800084c:	2300      	movs	r3, #0
 800084e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fcb1 	bl	80031bc <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000860:	f7ff ffac 	bl	80007bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 8000866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000868:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 8000872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000880:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 8000882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000894:	f001 fe12 	bl	80024bc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000898:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800089c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008b2:	2308      	movs	r3, #8
 80008b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008bc:	4619      	mov	r1, r3
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <HAL_UART_MspInit+0xbc>)
 80008c0:	f000 fa1c 	bl	8000cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008c4:	bf00      	nop
 80008c6:	37b0      	adds	r7, #176	; 0xb0
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40008000 	.word	0x40008000
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48001800 	.word	0x48001800

080008d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08c      	sub	sp, #48	; 0x30
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008e6:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <HAL_InitTick+0xc8>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	4a2d      	ldr	r2, [pc, #180]	; (80009a0 <HAL_InitTick+0xc8>)
 80008ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008f0:	6613      	str	r3, [r2, #96]	; 0x60
 80008f2:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <HAL_InitTick+0xc8>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008fe:	f107 020c 	add.w	r2, r7, #12
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fbc5 	bl	8003098 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800090e:	f002 fbad 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 8000912:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000916:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <HAL_InitTick+0xcc>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	0c9b      	lsrs	r3, r3, #18
 800091e:	3b01      	subs	r3, #1
 8000920:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <HAL_InitTick+0xd0>)
 8000924:	4a21      	ldr	r2, [pc, #132]	; (80009ac <HAL_InitTick+0xd4>)
 8000926:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <HAL_InitTick+0xd0>)
 800092a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800092e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000930:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <HAL_InitTick+0xd0>)
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_InitTick+0xd0>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <HAL_InitTick+0xd0>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <HAL_InitTick+0xd0>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000948:	4817      	ldr	r0, [pc, #92]	; (80009a8 <HAL_InitTick+0xd0>)
 800094a:	f003 f901 	bl	8003b50 <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000954:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000958:	2b00      	cmp	r3, #0
 800095a:	d11b      	bne.n	8000994 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800095c:	4812      	ldr	r0, [pc, #72]	; (80009a8 <HAL_InitTick+0xd0>)
 800095e:	f003 f959 	bl	8003c14 <HAL_TIM_Base_Start_IT>
 8000962:	4603      	mov	r3, r0
 8000964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800096c:	2b00      	cmp	r3, #0
 800096e:	d111      	bne.n	8000994 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000970:	2019      	movs	r0, #25
 8000972:	f000 f9b5 	bl	8000ce0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d808      	bhi.n	800098e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2019      	movs	r0, #25
 8000982:	f000 f991 	bl	8000ca8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_InitTick+0xd8>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	e002      	b.n	8000994 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000998:	4618      	mov	r0, r3
 800099a:	3730      	adds	r7, #48	; 0x30
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	431bde83 	.word	0x431bde83
 80009a8:	20000208 	.word	0x20000208
 80009ac:	40012c00 	.word	0x40012c00
 80009b0:	20000004 	.word	0x20000004

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009e6:	f003 f985 	bl	8003cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000208 	.word	0x20000208

080009f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <OTG_FS_IRQHandler+0x10>)
 80009fa:	f000 fc96 	bl	800132a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200030d8 	.word	0x200030d8

08000a08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a30:	f7ff ffea 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	; (8000a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	; (8000a78 <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f00a fea3 	bl	800b7a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a5e:	f7ff fd45 	bl	80004ec <main>

08000a62 <LoopForever>:

LoopForever:
    b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a64:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000a70:	0800b9bc 	.word	0x0800b9bc
  ldr r2, =_sbss
 8000a74:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000a78:	20003944 	.word	0x20003944

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>

08000a7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a84:	2300      	movs	r3, #0
 8000a86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f902 	bl	8000c92 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a8e:	200f      	movs	r0, #15
 8000a90:	f7ff ff22 	bl	80008d8 <HAL_InitTick>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d002      	beq.n	8000aa0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	71fb      	strb	r3, [r7, #7]
 8000a9e:	e001      	b.n	8000aa4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa0:	f7ff fe92 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000254 	.word	0x20000254

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000254 	.word	0x20000254

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff ffee 	bl	8000ad8 <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffde 	bl	8000ad8 <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <__NVIC_EnableIRQ+0x38>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ff4c 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cba:	f7ff ff61 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cbe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	68b9      	ldr	r1, [r7, #8]
 8000cc4:	6978      	ldr	r0, [r7, #20]
 8000cc6:	f7ff ffb1 	bl	8000c2c <NVIC_EncodePriority>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff80 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000cd8:	bf00      	nop
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff54 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b087      	sub	sp, #28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0a:	e166      	b.n	8000fda <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	fa01 f303 	lsl.w	r3, r1, r3
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 8158 	beq.w	8000fd4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d005      	beq.n	8000d3c <HAL_GPIO_Init+0x40>
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d130      	bne.n	8000d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d72:	2201      	movs	r2, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	f003 0201 	and.w	r2, r3, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d017      	beq.n	8000dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d123      	bne.n	8000e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	6939      	ldr	r1, [r7, #16]
 8000e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0203 	and.w	r2, r3, #3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 80b2 	beq.w	8000fd4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e70:	4b61      	ldr	r3, [pc, #388]	; (8000ff8 <HAL_GPIO_Init+0x2fc>)
 8000e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e74:	4a60      	ldr	r2, [pc, #384]	; (8000ff8 <HAL_GPIO_Init+0x2fc>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7c:	4b5e      	ldr	r3, [pc, #376]	; (8000ff8 <HAL_GPIO_Init+0x2fc>)
 8000e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e88:	4a5c      	ldr	r2, [pc, #368]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eb2:	d02b      	beq.n	8000f0c <HAL_GPIO_Init+0x210>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a52      	ldr	r2, [pc, #328]	; (8001000 <HAL_GPIO_Init+0x304>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d025      	beq.n	8000f08 <HAL_GPIO_Init+0x20c>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a51      	ldr	r2, [pc, #324]	; (8001004 <HAL_GPIO_Init+0x308>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d01f      	beq.n	8000f04 <HAL_GPIO_Init+0x208>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a50      	ldr	r2, [pc, #320]	; (8001008 <HAL_GPIO_Init+0x30c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d019      	beq.n	8000f00 <HAL_GPIO_Init+0x204>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a4f      	ldr	r2, [pc, #316]	; (800100c <HAL_GPIO_Init+0x310>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d013      	beq.n	8000efc <HAL_GPIO_Init+0x200>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a4e      	ldr	r2, [pc, #312]	; (8001010 <HAL_GPIO_Init+0x314>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d00d      	beq.n	8000ef8 <HAL_GPIO_Init+0x1fc>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a4d      	ldr	r2, [pc, #308]	; (8001014 <HAL_GPIO_Init+0x318>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d007      	beq.n	8000ef4 <HAL_GPIO_Init+0x1f8>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <HAL_GPIO_Init+0x31c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d101      	bne.n	8000ef0 <HAL_GPIO_Init+0x1f4>
 8000eec:	2307      	movs	r3, #7
 8000eee:	e00e      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	e00c      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000ef4:	2306      	movs	r3, #6
 8000ef6:	e00a      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000ef8:	2305      	movs	r3, #5
 8000efa:	e008      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000efc:	2304      	movs	r3, #4
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000f00:	2303      	movs	r3, #3
 8000f02:	e004      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_Init+0x212>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	f002 0203 	and.w	r2, r2, #3
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4093      	lsls	r3, r2
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f1e:	4937      	ldr	r1, [pc, #220]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f2c:	4b3b      	ldr	r3, [pc, #236]	; (800101c <HAL_GPIO_Init+0x320>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f50:	4a32      	ldr	r2, [pc, #200]	; (800101c <HAL_GPIO_Init+0x320>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <HAL_GPIO_Init+0x320>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f7a:	4a28      	ldr	r2, [pc, #160]	; (800101c <HAL_GPIO_Init+0x320>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <HAL_GPIO_Init+0x320>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa4:	4a1d      	ldr	r2, [pc, #116]	; (800101c <HAL_GPIO_Init+0x320>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <HAL_GPIO_Init+0x320>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <HAL_GPIO_Init+0x320>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f47f ae91 	bne.w	8000d0c <HAL_GPIO_Init+0x10>
  }
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000800 	.word	0x48000800
 8001008:	48000c00 	.word	0x48000c00
 800100c:	48001000 	.word	0x48001000
 8001010:	48001400 	.word	0x48001400
 8001014:	48001800 	.word	0x48001800
 8001018:	48001c00 	.word	0x48001c00
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001030:	787b      	ldrb	r3, [r7, #1]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800103c:	e002      	b.n	8001044 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4013      	ands	r3, r2
 8001068:	041a      	lsls	r2, r3, #16
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43d9      	mvns	r1, r3
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	400b      	ands	r3, r1
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001086:	b08f      	sub	sp, #60	; 0x3c
 8001088:	af0a      	add	r7, sp, #40	; 0x28
 800108a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e116      	b.n	80012c4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d106      	bne.n	80010b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f009 fee5 	bl	800ae80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2203      	movs	r2, #3
 80010ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d102      	bne.n	80010d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 fde4 	bl	8004ca2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	687e      	ldr	r6, [r7, #4]
 80010e2:	466d      	mov	r5, sp
 80010e4:	f106 0410 	add.w	r4, r6, #16
 80010e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f8:	1d33      	adds	r3, r6, #4
 80010fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010fc:	6838      	ldr	r0, [r7, #0]
 80010fe:	f003 fcf6 	bl	8004aee <USB_CoreInit>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2202      	movs	r2, #2
 800110c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0d7      	b.n	80012c4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f003 fdd2 	bl	8004cc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e04a      	b.n	80011bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	333d      	adds	r3, #61	; 0x3d
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	440b      	add	r3, r1
 8001148:	333c      	adds	r3, #60	; 0x3c
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	b298      	uxth	r0, r3
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	3356      	adds	r3, #86	; 0x56
 8001162:	4602      	mov	r2, r0
 8001164:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	3340      	adds	r3, #64	; 0x40
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	3344      	adds	r3, #68	; 0x44
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	3348      	adds	r3, #72	; 0x48
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	334c      	adds	r3, #76	; 0x4c
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	3301      	adds	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3af      	bcc.n	8001126 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	e044      	b.n	8001256 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	4413      	add	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	3301      	adds	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	429a      	cmp	r2, r3
 800125e:	d3b5      	bcc.n	80011cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	687e      	ldr	r6, [r7, #4]
 8001268:	466d      	mov	r5, sp
 800126a:	f106 0410 	add.w	r4, r6, #16
 800126e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800127a:	e885 0003 	stmia.w	r5, {r0, r1}
 800127e:	1d33      	adds	r3, r6, #4
 8001280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f003 fd6a 	bl	8004d5c <USB_DevInit>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2202      	movs	r2, #2
 8001292:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e014      	b.n	80012c4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f001 f86a 	bl	800238c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 fd18 	bl	8005cf2 <USB_DevDisconnect>

  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_PCD_Start+0x1c>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e01c      	b.n	8001322 <HAL_PCD_Start+0x56>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f003 fcb9 	bl	8004c80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f004 fccc 	bl	8005cb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800132a:	b590      	push	{r4, r7, lr}
 800132c:	b08d      	sub	sp, #52	; 0x34
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f004 fd8a 	bl	8005e5a <USB_GetMode>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 847e 	bne.w	8001c4a <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f004 fcee 	bl	8005d34 <USB_ReadInterrupts>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8474 	beq.w	8001c48 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f004 fcdb 	bl	8005d34 <USB_ReadInterrupts>
 800137e:	4603      	mov	r3, r0
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b02      	cmp	r3, #2
 8001386:	d107      	bne.n	8001398 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f002 0202 	and.w	r2, r2, #2
 8001396:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f004 fcc9 	bl	8005d34 <USB_ReadInterrupts>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d161      	bne.n	8001470 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699a      	ldr	r2, [r3, #24]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0210 	bic.w	r2, r2, #16
 80013ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	f003 020f 	and.w	r2, r3, #15
 80013c8:	4613      	mov	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	3304      	adds	r3, #4
 80013da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	0c5b      	lsrs	r3, r3, #17
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d124      	bne.n	8001432 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d035      	beq.n	8001460 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001402:	b29b      	uxth	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	6a38      	ldr	r0, [r7, #32]
 8001408:	f004 fb00 	bl	8005a0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001418:	441a      	add	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142a:	441a      	add	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	615a      	str	r2, [r3, #20]
 8001430:	e016      	b.n	8001460 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	0c5b      	lsrs	r3, r3, #17
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	2b06      	cmp	r3, #6
 800143c:	d110      	bne.n	8001460 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001444:	2208      	movs	r2, #8
 8001446:	4619      	mov	r1, r3
 8001448:	6a38      	ldr	r0, [r7, #32]
 800144a:	f004 fadf 	bl	8005a0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	695a      	ldr	r2, [r3, #20]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800145a:	441a      	add	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0210 	orr.w	r2, r2, #16
 800146e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f004 fc5d 	bl	8005d34 <USB_ReadInterrupts>
 800147a:	4603      	mov	r3, r0
 800147c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001480:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001484:	f040 80a7 	bne.w	80015d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f004 fc62 	bl	8005d5a <USB_ReadDevAllOutEpInterrupt>
 8001496:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001498:	e099      	b.n	80015ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 808e 	beq.w	80015c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 fc86 	bl	8005dc2 <USB_ReadDevOutEPInterrupt>
 80014b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00c      	beq.n	80014dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	015a      	lsls	r2, r3, #5
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ce:	461a      	mov	r2, r3
 80014d0:	2301      	movs	r3, #1
 80014d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 fe7e 	bl	80021d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00c      	beq.n	8001500 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f2:	461a      	mov	r2, r3
 80014f4:	2308      	movs	r3, #8
 80014f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 feba 	bl	8002274 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	015a      	lsls	r2, r3, #5
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	4413      	add	r3, r2
 8001512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001516:	461a      	mov	r2, r3
 8001518:	2310      	movs	r3, #16
 800151a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d030      	beq.n	8001588 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152e:	2b80      	cmp	r3, #128	; 0x80
 8001530:	d109      	bne.n	8001546 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001540:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001544:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	3304      	adds	r3, #4
 800155a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	78db      	ldrb	r3, [r3, #3]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d108      	bne.n	8001576 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	2200      	movs	r2, #0
 8001568:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4619      	mov	r1, r3
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f009 fdc9 	bl	800b108 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	015a      	lsls	r2, r3, #5
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	4413      	add	r3, r2
 800157e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001582:	461a      	mov	r2, r3
 8001584:	2302      	movs	r3, #2
 8001586:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	2b00      	cmp	r3, #0
 8001590:	d008      	beq.n	80015a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	015a      	lsls	r2, r3, #5
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4413      	add	r3, r2
 800159a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800159e:	461a      	mov	r2, r3
 80015a0:	2320      	movs	r3, #32
 80015a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ba:	461a      	mov	r2, r3
 80015bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	3301      	adds	r3, #1
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ca:	085b      	lsrs	r3, r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f47f af62 	bne.w	800149a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 fbaa 	bl	8005d34 <USB_ReadInterrupts>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015ea:	f040 80a4 	bne.w	8001736 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 fbcb 	bl	8005d8e <USB_ReadDevAllInEpInterrupt>
 80015f8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015fe:	e096      	b.n	800172e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 808b 	beq.w	8001722 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f004 fbf1 	bl	8005dfe <USB_ReadDevInEPInterrupt>
 800161c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	2201      	movs	r2, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800163c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	43db      	mvns	r3, r3
 8001642:	69f9      	ldr	r1, [r7, #28]
 8001644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001648:	4013      	ands	r3, r2
 800164a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	015a      	lsls	r2, r3, #5
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001658:	461a      	mov	r2, r3
 800165a:	2301      	movs	r3, #1
 800165c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4619      	mov	r1, r3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f009 fcba 	bl	800afde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	015a      	lsls	r2, r3, #5
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001680:	461a      	mov	r2, r3
 8001682:	2308      	movs	r3, #8
 8001684:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	015a      	lsls	r2, r3, #5
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4413      	add	r3, r2
 8001698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800169c:	461a      	mov	r2, r3
 800169e:	2310      	movs	r3, #16
 80016a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	015a      	lsls	r2, r3, #5
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	4413      	add	r3, r2
 80016b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016b8:	461a      	mov	r2, r3
 80016ba:	2340      	movs	r3, #64	; 0x40
 80016bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d023      	beq.n	8001710 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ca:	6a38      	ldr	r0, [r7, #32]
 80016cc:	f003 fc88 	bl	8004fe0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	3338      	adds	r3, #56	; 0x38
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	3304      	adds	r3, #4
 80016e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	78db      	ldrb	r3, [r3, #3]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2200      	movs	r2, #0
 80016f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f009 fd17 	bl	800b12c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800170a:	461a      	mov	r2, r3
 800170c:	2302      	movs	r3, #2
 800170e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800171a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fcd2 	bl	80020c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	3301      	adds	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172a:	085b      	lsrs	r3, r3, #1
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	2b00      	cmp	r3, #0
 8001732:	f47f af65 	bne.w	8001600 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fafa 	bl	8005d34 <USB_ReadInterrupts>
 8001740:	4603      	mov	r3, r0
 8001742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800174a:	d122      	bne.n	8001792 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001772:	2100      	movs	r1, #0
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f009 ff4b 	bl	800b610 <HAL_PCDEx_LPM_Callback>
 800177a:	e002      	b.n	8001782 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f009 fc9b 	bl	800b0b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f004 facc 	bl	8005d34 <USB_ReadInterrupts>
 800179c:	4603      	mov	r3, r0
 800179e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017a6:	d112      	bne.n	80017ce <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d102      	bne.n	80017be <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f009 fc57 	bl	800b06c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 faae 	bl	8005d34 <USB_ReadInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017e2:	d121      	bne.n	8001828 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695a      	ldr	r2, [r3, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80017f2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d111      	bne.n	8001822 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	f003 020f 	and.w	r2, r3, #15
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001818:	2101      	movs	r1, #1
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f009 fef8 	bl	800b610 <HAL_PCDEx_LPM_Callback>
 8001820:	e002      	b.n	8001828 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f009 fc22 	bl	800b06c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f004 fa81 	bl	8005d34 <USB_ReadInterrupts>
 8001832:	4603      	mov	r3, r0
 8001834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800183c:	f040 80b5 	bne.w	80019aa <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2110      	movs	r1, #16
 800185a:	4618      	mov	r0, r3
 800185c:	f003 fbc0 	bl	8004fe0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001864:	e046      	b.n	80018f4 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	015a      	lsls	r2, r3, #5
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	4413      	add	r3, r2
 800186e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001872:	461a      	mov	r2, r3
 8001874:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001878:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	4413      	add	r3, r2
 8001882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800188a:	0151      	lsls	r1, r2, #5
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	440a      	add	r2, r1
 8001890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001894:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001898:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	015a      	lsls	r2, r3, #5
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018a6:	461a      	mov	r2, r3
 80018a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018be:	0151      	lsls	r1, r2, #5
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	440a      	add	r2, r1
 80018c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018de:	0151      	lsls	r1, r2, #5
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	440a      	add	r2, r1
 80018e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	3301      	adds	r3, #1
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d3b3      	bcc.n	8001866 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800190c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001910:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	2b00      	cmp	r3, #0
 8001918:	d016      	beq.n	8001948 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800192a:	f043 030b 	orr.w	r3, r3, #11
 800192e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001940:	f043 030b 	orr.w	r3, r3, #11
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	e015      	b.n	8001974 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001956:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800195a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800195e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800196e:	f043 030b 	orr.w	r3, r3, #11
 8001972:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001982:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001986:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f004 fa91 	bl	8005ebc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f004 f9c0 	bl	8005d34 <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019be:	d124      	bne.n	8001a0a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f004 fa56 	bl	8005e76 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 fb83 	bl	80050da <USB_GetDevSpeed>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681c      	ldr	r4, [r3, #0]
 80019e0:	f001 fb22 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 80019e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	4620      	mov	r0, r4
 80019f0:	f003 f8aa 	bl	8004b48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f009 fb1a 	bl	800b02e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 f990 	bl	8005d34 <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d10a      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f009 faf7 	bl	800b012 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f002 0208 	and.w	r2, r2, #8
 8001a32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f004 f97b 	bl	8005d34 <USB_ReadInterrupts>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a44:	2b80      	cmp	r3, #128	; 0x80
 8001a46:	d122      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a54:	2301      	movs	r3, #1
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
 8001a58:	e014      	b.n	8001a84 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5e:	4613      	mov	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d105      	bne.n	8001a7e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4619      	mov	r1, r3
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 faf3 	bl	8002064 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	3301      	adds	r3, #1
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d3e5      	bcc.n	8001a5a <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 f94e 	bl	8005d34 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aa2:	d13b      	bne.n	8001b1c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa8:	e02b      	b.n	8001b02 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3340      	adds	r3, #64	; 0x40
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d115      	bne.n	8001afc <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ad0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da12      	bge.n	8001afc <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	333f      	adds	r3, #63	; 0x3f
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fab4 	bl	8002064 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	3301      	adds	r3, #1
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3ce      	bcc.n	8001aaa <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 f907 	bl	8005d34 <USB_ReadInterrupts>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b30:	d155      	bne.n	8001bde <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b32:	2301      	movs	r3, #1
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
 8001b36:	e045      	b.n	8001bc4 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	015a      	lsls	r2, r3, #5
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	4413      	add	r3, r2
 8001b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d12e      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	da2b      	bge.n	8001bbe <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d121      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10a      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bba:	6053      	str	r3, [r2, #4]
            break;
 8001bbc:	e007      	b.n	8001bce <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3b4      	bcc.n	8001b38 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f004 f8a6 	bl	8005d34 <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf2:	d10a      	bne.n	8001c0a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f009 faab 	bl	800b150 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f004 f890 	bl	8005d34 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d115      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f009 fa9b 	bl	800b16c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6859      	ldr	r1, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	e000      	b.n	8001c4a <HAL_PCD_IRQHandler+0x920>
      return;
 8001c48:	bf00      	nop
    }
  }
}
 8001c4a:	3734      	adds	r7, #52	; 0x34
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd90      	pop	{r4, r7, pc}

08001c50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_PCD_SetAddress+0x1a>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e013      	b.n	8001c92 <HAL_PCD_SetAddress+0x42>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	78fa      	ldrb	r2, [r7, #3]
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 ffee 	bl	8005c64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	4608      	mov	r0, r1
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4603      	mov	r3, r0
 8001caa:	70fb      	strb	r3, [r7, #3]
 8001cac:	460b      	mov	r3, r1
 8001cae:	803b      	strh	r3, [r7, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	da0f      	bge.n	8001ce0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	f003 020f 	and.w	r2, r3, #15
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	3338      	adds	r3, #56	; 0x38
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	705a      	strb	r2, [r3, #1]
 8001cde:	e00f      	b.n	8001d00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	f003 020f 	and.w	r2, r3, #15
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d0c:	883a      	ldrh	r2, [r7, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	78ba      	ldrb	r2, [r7, #2]
 8001d16:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	785b      	ldrb	r3, [r3, #1]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d2a:	78bb      	ldrb	r3, [r7, #2]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d102      	bne.n	8001d36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_PCD_EP_Open+0xaa>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e00e      	b.n	8001d62 <HAL_PCD_EP_Open+0xc8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68f9      	ldr	r1, [r7, #12]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 f9e0 	bl	8005118 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d60:	7afb      	ldrb	r3, [r7, #11]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	da0f      	bge.n	8001d9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	f003 020f 	and.w	r2, r3, #15
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	3338      	adds	r3, #56	; 0x38
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	3304      	adds	r3, #4
 8001d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	705a      	strb	r2, [r3, #1]
 8001d9c:	e00f      	b.n	8001dbe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	3304      	adds	r3, #4
 8001db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_PCD_EP_Close+0x6e>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e00e      	b.n	8001df6 <HAL_PCD_EP_Close+0x8c>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fa1e 	bl	8005228 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
 8001e10:	f003 020f 	and.w	r2, r3, #15
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	3304      	adds	r3, #4
 8001e26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e40:	7afb      	ldrb	r3, [r7, #11]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6979      	ldr	r1, [r7, #20]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 fac4 	bl	80053e0 <USB_EPStartXfer>

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	f003 020f 	and.w	r2, r3, #15
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001e84:	681b      	ldr	r3, [r3, #0]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ea2:	7afb      	ldrb	r3, [r7, #11]
 8001ea4:	f003 020f 	and.w	r2, r3, #15
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	3338      	adds	r3, #56	; 0x38
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6979      	ldr	r1, [r7, #20]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 fa7b 	bl	80053e0 <USB_EPStartXfer>

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 020f 	and.w	r2, r3, #15
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d901      	bls.n	8001f12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e04e      	b.n	8001fb0 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	da0f      	bge.n	8001f3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	3338      	adds	r3, #56	; 0x38
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3304      	adds	r3, #4
 8001f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	705a      	strb	r2, [r3, #1]
 8001f38:	e00d      	b.n	8001f56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_PCD_EP_SetStall+0x82>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e01c      	b.n	8001fb0 <HAL_PCD_EP_SetStall+0xbc>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68f9      	ldr	r1, [r7, #12]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f003 fd99 	bl	8005abc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d108      	bne.n	8001fa6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	f003 ff8b 	bl	8005ebc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	f003 020f 	and.w	r2, r3, #15
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d901      	bls.n	8001fd6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e042      	b.n	800205c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	da0f      	bge.n	8001ffe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	3338      	adds	r3, #56	; 0x38
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	705a      	strb	r2, [r3, #1]
 8001ffc:	e00f      	b.n	800201e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 020f 	and.w	r2, r3, #15
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	3304      	adds	r3, #4
 8002016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	b2da      	uxtb	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_PCD_EP_ClrStall+0x86>
 800203a:	2302      	movs	r3, #2
 800203c:	e00e      	b.n	800205c <HAL_PCD_EP_ClrStall+0xa4>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68f9      	ldr	r1, [r7, #12]
 800204c:	4618      	mov	r0, r3
 800204e:	f003 fda3 	bl	8005b98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002074:	2b00      	cmp	r3, #0
 8002076:	da0c      	bge.n	8002092 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 020f 	and.w	r2, r3, #15
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	3338      	adds	r3, #56	; 0x38
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	4413      	add	r3, r2
 800208c:	3304      	adds	r3, #4
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e00c      	b.n	80020ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 020f 	and.w	r2, r3, #15
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	3304      	adds	r3, #4
 80020aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68f9      	ldr	r1, [r7, #12]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 fbc6 	bl	8005844 <USB_EPStopXfer>
 80020b8:	4603      	mov	r3, r0
 80020ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020bc:	7afb      	ldrb	r3, [r7, #11]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b088      	sub	sp, #32
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	3338      	adds	r3, #56	; 0x38
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	3304      	adds	r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d901      	bls.n	80020fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e067      	b.n	80021ce <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	429a      	cmp	r2, r3
 8002112:	d902      	bls.n	800211a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3303      	adds	r3, #3
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002122:	e026      	b.n	8002172 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	429a      	cmp	r2, r3
 8002138:	d902      	bls.n	8002140 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	3303      	adds	r3, #3
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	68d9      	ldr	r1, [r3, #12]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	b29b      	uxth	r3, r3
 8002154:	6978      	ldr	r0, [r7, #20]
 8002156:	f003 fc1f 	bl	8005998 <USB_WritePacket>

    ep->xfer_buff  += len;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	441a      	add	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	441a      	add	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	429a      	cmp	r2, r3
 8002186:	d809      	bhi.n	800219c <PCD_WriteEmptyTxFifo+0xd6>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002190:	429a      	cmp	r2, r3
 8002192:	d203      	bcs.n	800219c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1c3      	bne.n	8002124 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d811      	bhi.n	80021cc <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	2201      	movs	r2, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	6939      	ldr	r1, [r7, #16]
 80021c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021c8:	4013      	ands	r3, r2
 80021ca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3720      	adds	r7, #32
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	333c      	adds	r3, #60	; 0x3c
 80021f0:	3304      	adds	r3, #4
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <PCD_EP_OutXfrComplete_int+0x98>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d124      	bne.n	8002258 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002224:	461a      	mov	r2, r3
 8002226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800222a:	6093      	str	r3, [r2, #8]
 800222c:	e01a      	b.n	8002264 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002244:	461a      	mov	r2, r3
 8002246:	2320      	movs	r3, #32
 8002248:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	4619      	mov	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f008 fea9 	bl	800afa8 <HAL_PCD_DataOutStageCallback>
 8002256:	e005      	b.n	8002264 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	4619      	mov	r1, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f008 fea2 	bl	800afa8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	4f54310a 	.word	0x4f54310a

08002274 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	333c      	adds	r3, #60	; 0x3c
 800228c:	3304      	adds	r3, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <PCD_EP_OutSetupPacket_int+0x64>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d90e      	bls.n	80022c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d009      	beq.n	80022c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c0:	461a      	mov	r2, r3
 80022c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f008 fe5b 	bl	800af84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	4f54300a 	.word	0x4f54300a

080022dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
 80022e8:	4613      	mov	r3, r2
 80022ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d107      	bne.n	800230a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022fa:	883b      	ldrh	r3, [r7, #0]
 80022fc:	0419      	lsls	r1, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	430a      	orrs	r2, r1
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
 8002308:	e028      	b.n	800235c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	4413      	add	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e00d      	b.n	800233a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	3340      	adds	r3, #64	; 0x40
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	4413      	add	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	3301      	adds	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	3b01      	subs	r3, #1
 8002340:	429a      	cmp	r2, r3
 8002342:	d3ec      	bcc.n	800231e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002344:	883b      	ldrh	r3, [r7, #0]
 8002346:	0418      	lsls	r0, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	3b01      	subs	r3, #1
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	4302      	orrs	r2, r0
 8002354:	3340      	adds	r3, #64	; 0x40
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	460b      	mov	r3, r1
 8002374:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023be:	f043 0303 	orr.w	r3, r3, #3
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <HAL_PWREx_GetVoltageRange+0x18>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40007000 	.word	0x40007000

080023f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fe:	d130      	bne.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002400:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240c:	d038      	beq.n	8002480 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002416:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002418:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2232      	movs	r2, #50	; 0x32
 8002424:	fb02 f303 	mul.w	r3, r2, r3
 8002428:	4a1b      	ldr	r2, [pc, #108]	; (8002498 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	0c9b      	lsrs	r3, r3, #18
 8002430:	3301      	adds	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002434:	e002      	b.n	800243c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3b01      	subs	r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002448:	d102      	bne.n	8002450 <HAL_PWREx_ControlVoltageScaling+0x60>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f2      	bne.n	8002436 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245c:	d110      	bne.n	8002480 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e00f      	b.n	8002482 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800246a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246e:	d007      	beq.n	8002480 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002470:	4b07      	ldr	r3, [pc, #28]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002478:	4a05      	ldr	r2, [pc, #20]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800247e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40007000 	.word	0x40007000
 8002494:	20000000 	.word	0x20000000
 8002498:	431bde83 	.word	0x431bde83

0800249c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024aa:	6053      	str	r3, [r2, #4]
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40007000 	.word	0x40007000

080024bc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80024c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ca:	6053      	str	r3, [r2, #4]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40007000 	.word	0x40007000

080024dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f000 bc08 	b.w	8002d00 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f0:	4b96      	ldr	r3, [pc, #600]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024fa:	4b94      	ldr	r3, [pc, #592]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80e4 	beq.w	80026da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_RCC_OscConfig+0x4c>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	f040 808b 	bne.w	8002636 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b01      	cmp	r3, #1
 8002524:	f040 8087 	bne.w	8002636 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002528:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_OscConfig+0x64>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e3df      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1a      	ldr	r2, [r3, #32]
 8002544:	4b81      	ldr	r3, [pc, #516]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <HAL_RCC_OscConfig+0x7e>
 8002550:	4b7e      	ldr	r3, [pc, #504]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002558:	e005      	b.n	8002566 <HAL_RCC_OscConfig+0x8a>
 800255a:	4b7c      	ldr	r3, [pc, #496]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800255c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002566:	4293      	cmp	r3, r2
 8002568:	d223      	bcs.n	80025b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fdc4 	bl	80030fc <RCC_SetFlashLatencyFromMSIRange>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e3c0      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800257e:	4b73      	ldr	r3, [pc, #460]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a72      	ldr	r2, [pc, #456]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b70      	ldr	r3, [pc, #448]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	496d      	ldr	r1, [pc, #436]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800259c:	4b6b      	ldr	r3, [pc, #428]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	4968      	ldr	r1, [pc, #416]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	e025      	b.n	80025fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b2:	4b66      	ldr	r3, [pc, #408]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a65      	ldr	r2, [pc, #404]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b63      	ldr	r3, [pc, #396]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4960      	ldr	r1, [pc, #384]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d0:	4b5e      	ldr	r3, [pc, #376]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	495b      	ldr	r1, [pc, #364]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fd84 	bl	80030fc <RCC_SetFlashLatencyFromMSIRange>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e380      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025fe:	f000 fc87 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002602:	4602      	mov	r2, r0
 8002604:	4b51      	ldr	r3, [pc, #324]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	4950      	ldr	r1, [pc, #320]	; (8002750 <HAL_RCC_OscConfig+0x274>)
 8002610:	5ccb      	ldrb	r3, [r1, r3]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	4a4e      	ldr	r2, [pc, #312]	; (8002754 <HAL_RCC_OscConfig+0x278>)
 800261c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800261e:	4b4e      	ldr	r3, [pc, #312]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe f958 	bl	80008d8 <HAL_InitTick>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d052      	beq.n	80026d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	e364      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d032      	beq.n	80026a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800263e:	4b43      	ldr	r3, [pc, #268]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a42      	ldr	r2, [pc, #264]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800264a:	f7fe fa45 	bl	8000ad8 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002652:	f7fe fa41 	bl	8000ad8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e34d      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002664:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a35      	ldr	r2, [pc, #212]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b33      	ldr	r3, [pc, #204]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4930      	ldr	r1, [pc, #192]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800268e:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	492b      	ldr	r1, [pc, #172]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
 80026a2:	e01a      	b.n	80026da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026a4:	4b29      	ldr	r3, [pc, #164]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a28      	ldr	r2, [pc, #160]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026b0:	f7fe fa12 	bl	8000ad8 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026b8:	f7fe fa0e 	bl	8000ad8 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e31a      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x1dc>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d073      	beq.n	80027ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_OscConfig+0x21c>
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d10e      	bne.n	8002710 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d063      	beq.n	80027cc <HAL_RCC_OscConfig+0x2f0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d15f      	bne.n	80027cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e2f7      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x24c>
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a0b      	ldr	r2, [pc, #44]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e025      	b.n	8002774 <HAL_RCC_OscConfig+0x298>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002730:	d114      	bne.n	800275c <HAL_RCC_OscConfig+0x280>
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a02      	ldr	r2, [pc, #8]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e013      	b.n	8002774 <HAL_RCC_OscConfig+0x298>
 800274c:	40021000 	.word	0x40021000
 8002750:	0800b964 	.word	0x0800b964
 8002754:	20000000 	.word	0x20000000
 8002758:	20000004 	.word	0x20000004
 800275c:	4ba0      	ldr	r3, [pc, #640]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a9f      	ldr	r2, [pc, #636]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b9d      	ldr	r3, [pc, #628]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a9c      	ldr	r2, [pc, #624]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe f9ac 	bl	8000ad8 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe f9a8 	bl	8000ad8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e2b4      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002796:	4b92      	ldr	r3, [pc, #584]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x2a8>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe f998 	bl	8000ad8 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe f994 	bl	8000ad8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e2a0      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027be:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x2d0>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d060      	beq.n	800289c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d005      	beq.n	80027ec <HAL_RCC_OscConfig+0x310>
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d119      	bne.n	800281a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d116      	bne.n	800281a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ec:	4b7c      	ldr	r3, [pc, #496]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_OscConfig+0x328>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e27d      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	4973      	ldr	r1, [pc, #460]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002818:	e040      	b.n	800289c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d023      	beq.n	800286a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002822:	4b6f      	ldr	r3, [pc, #444]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6e      	ldr	r2, [pc, #440]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe f953 	bl	8000ad8 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002836:	f7fe f94f 	bl	8000ad8 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e25b      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002848:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b62      	ldr	r3, [pc, #392]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	495f      	ldr	r1, [pc, #380]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
 8002868:	e018      	b.n	800289c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286a:	4b5d      	ldr	r3, [pc, #372]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a5c      	ldr	r2, [pc, #368]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe f92f 	bl	8000ad8 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe f92b 	bl	8000ad8 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e237      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002890:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d03c      	beq.n	8002922 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01c      	beq.n	80028ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b0:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b6:	4a4a      	ldr	r2, [pc, #296]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe f90a 	bl	8000ad8 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c8:	f7fe f906 	bl	8000ad8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e212      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ef      	beq.n	80028c8 <HAL_RCC_OscConfig+0x3ec>
 80028e8:	e01b      	b.n	8002922 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f0:	4a3b      	ldr	r2, [pc, #236]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7fe f8ed 	bl	8000ad8 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002902:	f7fe f8e9 	bl	8000ad8 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1f5      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002914:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ef      	bne.n	8002902 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80a6 	beq.w	8002a7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002930:	2300      	movs	r3, #0
 8002932:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002934:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10d      	bne.n	800295c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	6593      	str	r3, [r2, #88]	; 0x58
 800294c:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002958:	2301      	movs	r3, #1
 800295a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295c:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_RCC_OscConfig+0x508>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d118      	bne.n	800299a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002968:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <HAL_RCC_OscConfig+0x508>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1d      	ldr	r2, [pc, #116]	; (80029e4 <HAL_RCC_OscConfig+0x508>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002972:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002974:	f7fe f8b0 	bl	8000ad8 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297c:	f7fe f8ac 	bl	8000ad8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1b8      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_RCC_OscConfig+0x508>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d108      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4d8>
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a8:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b2:	e029      	b.n	8002a08 <HAL_RCC_OscConfig+0x52c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d115      	bne.n	80029e8 <HAL_RCC_OscConfig+0x50c>
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	4a03      	ldr	r2, [pc, #12]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029dc:	e014      	b.n	8002a08 <HAL_RCC_OscConfig+0x52c>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	4b9d      	ldr	r3, [pc, #628]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	4a9c      	ldr	r2, [pc, #624]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f8:	4b99      	ldr	r3, [pc, #612]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	4a98      	ldr	r2, [pc, #608]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d016      	beq.n	8002a3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a10:	f7fe f862 	bl	8000ad8 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a18:	f7fe f85e 	bl	8000ad8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e168      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2e:	4b8c      	ldr	r3, [pc, #560]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ed      	beq.n	8002a18 <HAL_RCC_OscConfig+0x53c>
 8002a3c:	e015      	b.n	8002a6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7fe f84b 	bl	8000ad8 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe f847 	bl	8000ad8 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e151      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a5c:	4b80      	ldr	r3, [pc, #512]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1ed      	bne.n	8002a46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a6a:	7ffb      	ldrb	r3, [r7, #31]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a70:	4b7b      	ldr	r3, [pc, #492]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	4a7a      	ldr	r2, [pc, #488]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d03c      	beq.n	8002b02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01c      	beq.n	8002aca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a90:	4b73      	ldr	r3, [pc, #460]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a96:	4a72      	ldr	r2, [pc, #456]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe f81a 	bl	8000ad8 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa8:	f7fe f816 	bl	8000ad8 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e122      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aba:	4b69      	ldr	r3, [pc, #420]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ef      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x5cc>
 8002ac8:	e01b      	b.n	8002b02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aca:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ad0:	4a63      	ldr	r2, [pc, #396]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7fd fffd 	bl	8000ad8 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae2:	f7fd fff9 	bl	8000ad8 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e105      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002af4:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ef      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80f9 	beq.w	8002cfe <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	f040 80cf 	bne.w	8002cb4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b16:	4b52      	ldr	r3, [pc, #328]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0203 	and.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d12c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	3b01      	subs	r3, #1
 8002b36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d123      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d11b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d113      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d109      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d071      	beq.n	8002c68 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d068      	beq.n	8002c5c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b8a:	4b35      	ldr	r3, [pc, #212]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b96:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0ac      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a2d      	ldr	r2, [pc, #180]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bb2:	f7fd ff91 	bl	8000ad8 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fd ff8d 	bl	8000ad8 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e099      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bcc:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd8:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <HAL_RCC_OscConfig+0x788>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002be8:	3a01      	subs	r2, #1
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	4311      	orrs	r1, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bf2:	0212      	lsls	r2, r2, #8
 8002bf4:	4311      	orrs	r1, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bfa:	0852      	lsrs	r2, r2, #1
 8002bfc:	3a01      	subs	r2, #1
 8002bfe:	0552      	lsls	r2, r2, #21
 8002c00:	4311      	orrs	r1, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c06:	0852      	lsrs	r2, r2, #1
 8002c08:	3a01      	subs	r2, #1
 8002c0a:	0652      	lsls	r2, r2, #25
 8002c0c:	4311      	orrs	r1, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c12:	06d2      	lsls	r2, r2, #27
 8002c14:	430a      	orrs	r2, r1
 8002c16:	4912      	ldr	r1, [pc, #72]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0f      	ldr	r2, [pc, #60]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c28:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c34:	f7fd ff50 	bl	8000ad8 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fd ff4c 	bl	8000ad8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e058      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c5a:	e050      	b.n	8002cfe <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e04f      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d144      	bne.n	8002cfe <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c8c:	f7fd ff24 	bl	8000ad8 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fd ff20 	bl	8000ad8 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e02c      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca6:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x7b8>
 8002cb2:	e024      	b.n	8002cfe <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d01f      	beq.n	8002cfa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a12      	ldr	r2, [pc, #72]	; (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002cc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7fd ff07 	bl	8000ad8 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cce:	f7fd ff03 	bl	8000ad8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e00f      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	4905      	ldr	r1, [pc, #20]	; (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_RCC_OscConfig+0x830>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60cb      	str	r3, [r1, #12]
 8002cf8:	e001      	b.n	8002cfe <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	feeefffc 	.word	0xfeeefffc

08002d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0e7      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b75      	ldr	r3, [pc, #468]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d910      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b72      	ldr	r3, [pc, #456]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 0207 	bic.w	r2, r3, #7
 8002d3a:	4970      	ldr	r1, [pc, #448]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b6e      	ldr	r3, [pc, #440]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0cf      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d010      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b66      	ldr	r3, [pc, #408]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d908      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b63      	ldr	r3, [pc, #396]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4960      	ldr	r1, [pc, #384]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d04c      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d96:	4b5a      	ldr	r3, [pc, #360]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d121      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0a6      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dae:	4b54      	ldr	r3, [pc, #336]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d115      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e09a      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dc6:	4b4e      	ldr	r3, [pc, #312]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e08e      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e086      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002de6:	4b46      	ldr	r3, [pc, #280]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4943      	ldr	r1, [pc, #268]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df8:	f7fd fe6e 	bl	8000ad8 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e00:	f7fd fe6a 	bl	8000ad8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e06e      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 020c 	and.w	r2, r3, #12
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1eb      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d208      	bcs.n	8002e56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b2e      	ldr	r3, [pc, #184]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	492b      	ldr	r1, [pc, #172]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e56:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d210      	bcs.n	8002e86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 0207 	bic.w	r2, r3, #7
 8002e6c:	4923      	ldr	r1, [pc, #140]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e74:	4b21      	ldr	r3, [pc, #132]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d001      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e036      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e92:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4918      	ldr	r1, [pc, #96]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb0:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4910      	ldr	r1, [pc, #64]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec4:	f000 f824 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	490b      	ldr	r1, [pc, #44]	; (8002f04 <HAL_RCC_ClockConfig+0x1f4>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002ee2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1fc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fcf5 	bl	80008d8 <HAL_InitTick>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40022000 	.word	0x40022000
 8002f00:	40021000 	.word	0x40021000
 8002f04:	0800b964 	.word	0x0800b964
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	20000004 	.word	0x20000004

08002f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1e:	4b3e      	ldr	r3, [pc, #248]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f28:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x34>
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d121      	bne.n	8002f82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d11e      	bne.n	8002f82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f44:	4b34      	ldr	r3, [pc, #208]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f50:	4b31      	ldr	r3, [pc, #196]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	e005      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f60:	4b2d      	ldr	r3, [pc, #180]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f6c:	4a2b      	ldr	r2, [pc, #172]	; (800301c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10d      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d102      	bne.n	8002f8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	e004      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f94:	4b23      	ldr	r3, [pc, #140]	; (8003024 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d134      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d003      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0xac>
 8002fb4:	e005      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fb6:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fb8:	617b      	str	r3, [r7, #20]
      break;
 8002fba:	e005      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fbe:	617b      	str	r3, [r7, #20]
      break;
 8002fc0:	e002      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	617b      	str	r3, [r7, #20]
      break;
 8002fc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	fb03 f202 	mul.w	r2, r3, r2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	0e5b      	lsrs	r3, r3, #25
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003008:	69bb      	ldr	r3, [r7, #24]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3724      	adds	r7, #36	; 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	0800b97c 	.word	0x0800b97c
 8003020:	00f42400 	.word	0x00f42400
 8003024:	007a1200 	.word	0x007a1200

08003028 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCC_GetHCLKFreq+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000000 	.word	0x20000000

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003044:	f7ff fff0 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4904      	ldr	r1, [pc, #16]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	0800b974 	.word	0x0800b974

0800306c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003070:	f7ff ffda 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0adb      	lsrs	r3, r3, #11
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	0800b974 	.word	0x0800b974

08003098 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	220f      	movs	r2, #15
 80030a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0203 	and.w	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030b4:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	08db      	lsrs	r3, r3, #3
 80030d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80030da:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <HAL_RCC_GetClockConfig+0x60>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0207 	and.w	r2, r3, #7
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	601a      	str	r2, [r3, #0]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40022000 	.word	0x40022000

080030fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003108:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003114:	f7ff f95e 	bl	80023d4 <HAL_PWREx_GetVoltageRange>
 8003118:	6178      	str	r0, [r7, #20]
 800311a:	e014      	b.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003126:	6593      	str	r3, [r2, #88]	; 0x58
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003134:	f7ff f94e 	bl	80023d4 <HAL_PWREx_GetVoltageRange>
 8003138:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003144:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314c:	d10b      	bne.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d919      	bls.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2ba0      	cmp	r3, #160	; 0xa0
 8003158:	d902      	bls.n	8003160 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800315a:	2302      	movs	r3, #2
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	e013      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003160:	2301      	movs	r3, #1
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	e010      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b80      	cmp	r3, #128	; 0x80
 800316a:	d902      	bls.n	8003172 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800316c:	2303      	movs	r3, #3
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	e00a      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d102      	bne.n	800317e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003178:	2302      	movs	r3, #2
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	e004      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b70      	cmp	r3, #112	; 0x70
 8003182:	d101      	bne.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003184:	2301      	movs	r3, #1
 8003186:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 0207 	bic.w	r2, r3, #7
 8003190:	4909      	ldr	r1, [pc, #36]	; (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003198:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d001      	beq.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40022000 	.word	0x40022000

080031bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031c4:	2300      	movs	r3, #0
 80031c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c8:	2300      	movs	r3, #0
 80031ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d041      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031e0:	d02a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031e6:	d824      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ec:	d008      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031f2:	d81e      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fc:	d010      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031fe:	e018      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003200:	4b86      	ldr	r3, [pc, #536]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4a85      	ldr	r2, [pc, #532]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800320c:	e015      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f000 facd 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800321e:	e00c      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3320      	adds	r3, #32
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fbb6 	bl	8003998 <RCCEx_PLLSAI2_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003230:	e003      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	74fb      	strb	r3, [r7, #19]
      break;
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323a:	7cfb      	ldrb	r3, [r7, #19]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003240:	4b76      	ldr	r3, [pc, #472]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800324e:	4973      	ldr	r1, [pc, #460]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003256:	e001      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d041      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003270:	d02a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003272:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003276:	d824      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003278:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800327c:	d008      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800327e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003282:	d81e      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800328c:	d010      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800328e:	e018      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003290:	4b62      	ldr	r3, [pc, #392]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4a61      	ldr	r2, [pc, #388]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800329c:	e015      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fa85 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ae:	e00c      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3320      	adds	r3, #32
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fb6e 	bl	8003998 <RCCEx_PLLSAI2_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	74fb      	strb	r3, [r7, #19]
      break;
 80032c6:	e000      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032d0:	4b52      	ldr	r3, [pc, #328]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032de:	494f      	ldr	r1, [pc, #316]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032e6:	e001      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a0 	beq.w	800343a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800330e:	2300      	movs	r3, #0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003314:	4b41      	ldr	r3, [pc, #260]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	4a40      	ldr	r2, [pc, #256]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331e:	6593      	str	r3, [r2, #88]	; 0x58
 8003320:	4b3e      	ldr	r3, [pc, #248]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332c:	2301      	movs	r3, #1
 800332e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003330:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a3a      	ldr	r2, [pc, #232]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800333c:	f7fd fbcc 	bl	8000ad8 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003342:	e009      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003344:	f7fd fbc8 	bl	8000ad8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d902      	bls.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	74fb      	strb	r3, [r7, #19]
        break;
 8003356:	e005      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ef      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d15c      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800336a:	4b2c      	ldr	r3, [pc, #176]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003374:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01f      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	429a      	cmp	r2, r3
 8003386:	d019      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003392:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	4a20      	ldr	r2, [pc, #128]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	4a1c      	ldr	r2, [pc, #112]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033b4:	4a19      	ldr	r2, [pc, #100]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d016      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fd fb87 	bl	8000ad8 <HAL_GetTick>
 80033ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033cc:	e00b      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fd fb83 	bl	8000ad8 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d902      	bls.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	74fb      	strb	r3, [r7, #19]
            break;
 80033e4:	e006      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e6:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ec      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033f4:	7cfb      	ldrb	r3, [r7, #19]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10c      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	4904      	ldr	r1, [pc, #16]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003412:	e009      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
 8003418:	e006      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	7cfb      	ldrb	r3, [r7, #19]
 8003426:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003428:	7c7b      	ldrb	r3, [r7, #17]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d105      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342e:	4ba6      	ldr	r3, [pc, #664]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	4aa5      	ldr	r2, [pc, #660]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003438:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003446:	4ba0      	ldr	r3, [pc, #640]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f023 0203 	bic.w	r2, r3, #3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	499c      	ldr	r1, [pc, #624]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003468:	4b97      	ldr	r3, [pc, #604]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	f023 020c 	bic.w	r2, r3, #12
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	4994      	ldr	r1, [pc, #592]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800348a:	4b8f      	ldr	r3, [pc, #572]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003490:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	498b      	ldr	r1, [pc, #556]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ac:	4b86      	ldr	r3, [pc, #536]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	4983      	ldr	r1, [pc, #524]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034ce:	4b7e      	ldr	r3, [pc, #504]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034dc:	497a      	ldr	r1, [pc, #488]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034f0:	4b75      	ldr	r3, [pc, #468]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fe:	4972      	ldr	r1, [pc, #456]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003512:	4b6d      	ldr	r3, [pc, #436]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	4969      	ldr	r1, [pc, #420]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003534:	4b64      	ldr	r3, [pc, #400]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003542:	4961      	ldr	r1, [pc, #388]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003556:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003564:	4958      	ldr	r1, [pc, #352]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003578:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	4950      	ldr	r1, [pc, #320]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359a:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	4947      	ldr	r1, [pc, #284]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035bc:	4b42      	ldr	r3, [pc, #264]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035c2:	f023 0203 	bic.w	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	493f      	ldr	r1, [pc, #252]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d028      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035de:	4b3a      	ldr	r3, [pc, #232]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4936      	ldr	r1, [pc, #216]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035fc:	d106      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035fe:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	4a31      	ldr	r2, [pc, #196]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003608:	60d3      	str	r3, [r2, #12]
 800360a:	e011      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003614:	d10c      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	2101      	movs	r1, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f000 f8c9 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800362c:	7cfb      	ldrb	r3, [r7, #19]
 800362e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d028      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364a:	491f      	ldr	r1, [pc, #124]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800365a:	d106      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a19      	ldr	r2, [pc, #100]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003666:	60d3      	str	r3, [r2, #12]
 8003668:	e011      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003672:	d10c      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3304      	adds	r3, #4
 8003678:	2101      	movs	r1, #1
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f89a 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800368a:	7cfb      	ldrb	r3, [r7, #19]
 800368c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d02a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036a8:	4907      	ldr	r1, [pc, #28]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036b8:	d108      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ba:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	4a02      	ldr	r2, [pc, #8]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036c4:	60d3      	str	r3, [r2, #12]
 80036c6:	e013      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80036c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3304      	adds	r3, #4
 80036da:	2101      	movs	r1, #1
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f869 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036e6:	7cfb      	ldrb	r3, [r7, #19]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02f      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036fc:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800370a:	4929      	ldr	r1, [pc, #164]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800371a:	d10d      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	2102      	movs	r1, #2
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f846 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d014      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	74bb      	strb	r3, [r7, #18]
 8003736:	e011      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800373c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003740:	d10c      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3320      	adds	r3, #32
 8003746:	2102      	movs	r1, #2
 8003748:	4618      	mov	r0, r3
 800374a:	f000 f925 	bl	8003998 <RCCEx_PLLSAI2_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003778:	490d      	ldr	r1, [pc, #52]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379c:	4904      	ldr	r1, [pc, #16]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000

080037b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037c2:	4b74      	ldr	r3, [pc, #464]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ce:	4b71      	ldr	r3, [pc, #452]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0203 	and.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d10d      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
       ||
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037e6:	4b6b      	ldr	r3, [pc, #428]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
       ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d047      	beq.n	800388a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
 80037fe:	e044      	b.n	800388a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d018      	beq.n	800383a <RCCEx_PLLSAI1_Config+0x86>
 8003808:	2b03      	cmp	r3, #3
 800380a:	d825      	bhi.n	8003858 <RCCEx_PLLSAI1_Config+0xa4>
 800380c:	2b01      	cmp	r3, #1
 800380e:	d002      	beq.n	8003816 <RCCEx_PLLSAI1_Config+0x62>
 8003810:	2b02      	cmp	r3, #2
 8003812:	d009      	beq.n	8003828 <RCCEx_PLLSAI1_Config+0x74>
 8003814:	e020      	b.n	8003858 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003816:	4b5f      	ldr	r3, [pc, #380]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11d      	bne.n	800385e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003826:	e01a      	b.n	800385e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003828:	4b5a      	ldr	r3, [pc, #360]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003830:	2b00      	cmp	r3, #0
 8003832:	d116      	bne.n	8003862 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003838:	e013      	b.n	8003862 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800383a:	4b56      	ldr	r3, [pc, #344]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003846:	4b53      	ldr	r3, [pc, #332]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003856:	e006      	b.n	8003866 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
      break;
 800385c:	e004      	b.n	8003868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800385e:	bf00      	nop
 8003860:	e002      	b.n	8003868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003866:	bf00      	nop
    }

    if(status == HAL_OK)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10d      	bne.n	800388a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800386e:	4b49      	ldr	r3, [pc, #292]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	430b      	orrs	r3, r1
 8003884:	4943      	ldr	r1, [pc, #268]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003886:	4313      	orrs	r3, r2
 8003888:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d17c      	bne.n	800398a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003890:	4b40      	ldr	r3, [pc, #256]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a3f      	ldr	r2, [pc, #252]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003896:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800389a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389c:	f7fd f91c 	bl	8000ad8 <HAL_GetTick>
 80038a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038a2:	e009      	b.n	80038b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a4:	f7fd f918 	bl	8000ad8 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d902      	bls.n	80038b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	73fb      	strb	r3, [r7, #15]
        break;
 80038b6:	e005      	b.n	80038c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038b8:	4b36      	ldr	r3, [pc, #216]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1ef      	bne.n	80038a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d15f      	bne.n	800398a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d110      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038d0:	4b30      	ldr	r3, [pc, #192]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80038d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	0211      	lsls	r1, r2, #8
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68d2      	ldr	r2, [r2, #12]
 80038e6:	06d2      	lsls	r2, r2, #27
 80038e8:	430a      	orrs	r2, r1
 80038ea:	492a      	ldr	r1, [pc, #168]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	610b      	str	r3, [r1, #16]
 80038f0:	e027      	b.n	8003942 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d112      	bne.n	800391e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038f8:	4b26      	ldr	r3, [pc, #152]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003900:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6892      	ldr	r2, [r2, #8]
 8003908:	0211      	lsls	r1, r2, #8
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6912      	ldr	r2, [r2, #16]
 800390e:	0852      	lsrs	r2, r2, #1
 8003910:	3a01      	subs	r2, #1
 8003912:	0552      	lsls	r2, r2, #21
 8003914:	430a      	orrs	r2, r1
 8003916:	491f      	ldr	r1, [pc, #124]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003918:	4313      	orrs	r3, r2
 800391a:	610b      	str	r3, [r1, #16]
 800391c:	e011      	b.n	8003942 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800391e:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003926:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6892      	ldr	r2, [r2, #8]
 800392e:	0211      	lsls	r1, r2, #8
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6952      	ldr	r2, [r2, #20]
 8003934:	0852      	lsrs	r2, r2, #1
 8003936:	3a01      	subs	r2, #1
 8003938:	0652      	lsls	r2, r2, #25
 800393a:	430a      	orrs	r2, r1
 800393c:	4915      	ldr	r1, [pc, #84]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 800393e:	4313      	orrs	r3, r2
 8003940:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003942:	4b14      	ldr	r3, [pc, #80]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a13      	ldr	r2, [pc, #76]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003948:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800394c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394e:	f7fd f8c3 	bl	8000ad8 <HAL_GetTick>
 8003952:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003954:	e009      	b.n	800396a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003956:	f7fd f8bf 	bl	8000ad8 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d902      	bls.n	800396a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	73fb      	strb	r3, [r7, #15]
          break;
 8003968:	e005      	b.n	8003976 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0ef      	beq.n	8003956 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d106      	bne.n	800398a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	4903      	ldr	r1, [pc, #12]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003986:	4313      	orrs	r3, r2
 8003988:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800398a:	7bfb      	ldrb	r3, [r7, #15]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000

08003998 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039a6:	4b69      	ldr	r3, [pc, #420]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d018      	beq.n	80039e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039b2:	4b66      	ldr	r3, [pc, #408]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0203 	and.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d10d      	bne.n	80039de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
       ||
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039ca:	4b60      	ldr	r3, [pc, #384]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
       ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d047      	beq.n	8003a6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	e044      	b.n	8003a6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d018      	beq.n	8003a1e <RCCEx_PLLSAI2_Config+0x86>
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d825      	bhi.n	8003a3c <RCCEx_PLLSAI2_Config+0xa4>
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d002      	beq.n	80039fa <RCCEx_PLLSAI2_Config+0x62>
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d009      	beq.n	8003a0c <RCCEx_PLLSAI2_Config+0x74>
 80039f8:	e020      	b.n	8003a3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039fa:	4b54      	ldr	r3, [pc, #336]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11d      	bne.n	8003a42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a0a:	e01a      	b.n	8003a42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a0c:	4b4f      	ldr	r3, [pc, #316]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d116      	bne.n	8003a46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1c:	e013      	b.n	8003a46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a1e:	4b4b      	ldr	r3, [pc, #300]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a2a:	4b48      	ldr	r3, [pc, #288]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a3a:	e006      	b.n	8003a4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e004      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a42:	bf00      	nop
 8003a44:	e002      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a46:	bf00      	nop
 8003a48:	e000      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10d      	bne.n	8003a6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a52:	4b3e      	ldr	r3, [pc, #248]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	430b      	orrs	r3, r1
 8003a68:	4938      	ldr	r1, [pc, #224]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d166      	bne.n	8003b42 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a74:	4b35      	ldr	r3, [pc, #212]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a34      	ldr	r2, [pc, #208]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a80:	f7fd f82a 	bl	8000ad8 <HAL_GetTick>
 8003a84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a86:	e009      	b.n	8003a9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a88:	f7fd f826 	bl	8000ad8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d902      	bls.n	8003a9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	73fb      	strb	r3, [r7, #15]
        break;
 8003a9a:	e005      	b.n	8003aa8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ef      	bne.n	8003a88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d149      	bne.n	8003b42 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d110      	bne.n	8003ad6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ab4:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003abc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6892      	ldr	r2, [r2, #8]
 8003ac4:	0211      	lsls	r1, r2, #8
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68d2      	ldr	r2, [r2, #12]
 8003aca:	06d2      	lsls	r2, r2, #27
 8003acc:	430a      	orrs	r2, r1
 8003ace:	491f      	ldr	r1, [pc, #124]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	614b      	str	r3, [r1, #20]
 8003ad4:	e011      	b.n	8003afa <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad6:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ade:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6892      	ldr	r2, [r2, #8]
 8003ae6:	0211      	lsls	r1, r2, #8
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6912      	ldr	r2, [r2, #16]
 8003aec:	0852      	lsrs	r2, r2, #1
 8003aee:	3a01      	subs	r2, #1
 8003af0:	0652      	lsls	r2, r2, #25
 8003af2:	430a      	orrs	r2, r1
 8003af4:	4915      	ldr	r1, [pc, #84]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003afa:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b06:	f7fc ffe7 	bl	8000ad8 <HAL_GetTick>
 8003b0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b0c:	e009      	b.n	8003b22 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b0e:	f7fc ffe3 	bl	8000ad8 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d902      	bls.n	8003b22 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	73fb      	strb	r3, [r7, #15]
          break;
 8003b20:	e005      	b.n	8003b2e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0ef      	beq.n	8003b0e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	4903      	ldr	r1, [pc, #12]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000

08003b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e049      	b.n	8003bf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f841 	bl	8003bfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f000 f9da 	bl	8003f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d001      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e04f      	b.n	8003ccc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a23      	ldr	r2, [pc, #140]	; (8003cd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01d      	beq.n	8003c8a <HAL_TIM_Base_Start_IT+0x76>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d018      	beq.n	8003c8a <HAL_TIM_Base_Start_IT+0x76>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <HAL_TIM_Base_Start_IT+0xc8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_TIM_Base_Start_IT+0x76>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1e      	ldr	r2, [pc, #120]	; (8003ce0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_TIM_Base_Start_IT+0x76>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_TIM_Base_Start_IT+0x76>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_TIM_Base_Start_IT+0x76>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a19      	ldr	r2, [pc, #100]	; (8003cec <HAL_TIM_Base_Start_IT+0xd8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d115      	bne.n	8003cb6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b06      	cmp	r3, #6
 8003c9a:	d015      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0xb4>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca2:	d011      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb4:	e008      	b.n	8003cc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0201 	orr.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e000      	b.n	8003cca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800
 8003ce4:	40000c00 	.word	0x40000c00
 8003ce8:	40013400 	.word	0x40013400
 8003cec:	40014000 	.word	0x40014000
 8003cf0:	00010007 	.word	0x00010007

08003cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d020      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01b      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0202 	mvn.w	r2, #2
 8003d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f8e4 	bl	8003f0c <HAL_TIM_IC_CaptureCallback>
 8003d44:	e005      	b.n	8003d52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f8d6 	bl	8003ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f8e7 	bl	8003f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d020      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01b      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0204 	mvn.w	r2, #4
 8003d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f8be 	bl	8003f0c <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8b0 	bl	8003ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f8c1 	bl	8003f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d020      	beq.n	8003df0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01b      	beq.n	8003df0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0208 	mvn.w	r2, #8
 8003dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f898 	bl	8003f0c <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f88a 	bl	8003ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f89b 	bl	8003f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d020      	beq.n	8003e3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01b      	beq.n	8003e3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0210 	mvn.w	r2, #16
 8003e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2208      	movs	r2, #8
 8003e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f872 	bl	8003f0c <HAL_TIM_IC_CaptureCallback>
 8003e28:	e005      	b.n	8003e36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f864 	bl	8003ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f875 	bl	8003f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00c      	beq.n	8003e60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d007      	beq.n	8003e60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0201 	mvn.w	r2, #1
 8003e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fc fc9c 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00c      	beq.n	8003e84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f906 	bl	8004090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f8fe 	bl	80040a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00c      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f834 	bl	8003f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0220 	mvn.w	r2, #32
 8003ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8c6 	bl	800407c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a40      	ldr	r2, [pc, #256]	; (800405c <TIM_Base_SetConfig+0x114>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d013      	beq.n	8003f88 <TIM_Base_SetConfig+0x40>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f66:	d00f      	beq.n	8003f88 <TIM_Base_SetConfig+0x40>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a3d      	ldr	r2, [pc, #244]	; (8004060 <TIM_Base_SetConfig+0x118>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00b      	beq.n	8003f88 <TIM_Base_SetConfig+0x40>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a3c      	ldr	r2, [pc, #240]	; (8004064 <TIM_Base_SetConfig+0x11c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d007      	beq.n	8003f88 <TIM_Base_SetConfig+0x40>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a3b      	ldr	r2, [pc, #236]	; (8004068 <TIM_Base_SetConfig+0x120>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_Base_SetConfig+0x40>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a3a      	ldr	r2, [pc, #232]	; (800406c <TIM_Base_SetConfig+0x124>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d108      	bne.n	8003f9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a2f      	ldr	r2, [pc, #188]	; (800405c <TIM_Base_SetConfig+0x114>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d01f      	beq.n	8003fe2 <TIM_Base_SetConfig+0x9a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa8:	d01b      	beq.n	8003fe2 <TIM_Base_SetConfig+0x9a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a2c      	ldr	r2, [pc, #176]	; (8004060 <TIM_Base_SetConfig+0x118>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d017      	beq.n	8003fe2 <TIM_Base_SetConfig+0x9a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a2b      	ldr	r2, [pc, #172]	; (8004064 <TIM_Base_SetConfig+0x11c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <TIM_Base_SetConfig+0x9a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a2a      	ldr	r2, [pc, #168]	; (8004068 <TIM_Base_SetConfig+0x120>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00f      	beq.n	8003fe2 <TIM_Base_SetConfig+0x9a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a29      	ldr	r2, [pc, #164]	; (800406c <TIM_Base_SetConfig+0x124>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <TIM_Base_SetConfig+0x9a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a28      	ldr	r2, [pc, #160]	; (8004070 <TIM_Base_SetConfig+0x128>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <TIM_Base_SetConfig+0x9a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a27      	ldr	r2, [pc, #156]	; (8004074 <TIM_Base_SetConfig+0x12c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_Base_SetConfig+0x9a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a26      	ldr	r2, [pc, #152]	; (8004078 <TIM_Base_SetConfig+0x130>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d108      	bne.n	8003ff4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a10      	ldr	r2, [pc, #64]	; (800405c <TIM_Base_SetConfig+0x114>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00f      	beq.n	8004040 <TIM_Base_SetConfig+0xf8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a12      	ldr	r2, [pc, #72]	; (800406c <TIM_Base_SetConfig+0x124>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00b      	beq.n	8004040 <TIM_Base_SetConfig+0xf8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a11      	ldr	r2, [pc, #68]	; (8004070 <TIM_Base_SetConfig+0x128>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d007      	beq.n	8004040 <TIM_Base_SetConfig+0xf8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a10      	ldr	r2, [pc, #64]	; (8004074 <TIM_Base_SetConfig+0x12c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_Base_SetConfig+0xf8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a0f      	ldr	r2, [pc, #60]	; (8004078 <TIM_Base_SetConfig+0x130>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d103      	bne.n	8004048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	615a      	str	r2, [r3, #20]
}
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40012c00 	.word	0x40012c00
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40013400 	.word	0x40013400
 8004070:	40014000 	.word	0x40014000
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800

0800407c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e040      	b.n	800414c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fc fb9c 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2224      	movs	r2, #36	; 0x24
 80040e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fae0 	bl	80046c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f825 	bl	8004154 <UART_SetConfig>
 800410a:	4603      	mov	r3, r0
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e01b      	b.n	800414c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fb5f 	bl	8004808 <UART_CheckIdleState>
 800414a:	4603      	mov	r3, r0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004158:	b08a      	sub	sp, #40	; 0x28
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	431a      	orrs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	431a      	orrs	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	4313      	orrs	r3, r2
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4ba4      	ldr	r3, [pc, #656]	; (8004414 <UART_SetConfig+0x2c0>)
 8004184:	4013      	ands	r3, r2
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800418c:	430b      	orrs	r3, r1
 800418e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a99      	ldr	r2, [pc, #612]	; (8004418 <UART_SetConfig+0x2c4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d004      	beq.n	80041c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041bc:	4313      	orrs	r3, r2
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d0:	430a      	orrs	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a90      	ldr	r2, [pc, #576]	; (800441c <UART_SetConfig+0x2c8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d126      	bne.n	800422c <UART_SetConfig+0xd8>
 80041de:	4b90      	ldr	r3, [pc, #576]	; (8004420 <UART_SetConfig+0x2cc>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d81b      	bhi.n	8004224 <UART_SetConfig+0xd0>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <UART_SetConfig+0xa0>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004205 	.word	0x08004205
 80041f8:	08004215 	.word	0x08004215
 80041fc:	0800420d 	.word	0x0800420d
 8004200:	0800421d 	.word	0x0800421d
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420a:	e116      	b.n	800443a <UART_SetConfig+0x2e6>
 800420c:	2302      	movs	r3, #2
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e112      	b.n	800443a <UART_SetConfig+0x2e6>
 8004214:	2304      	movs	r3, #4
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421a:	e10e      	b.n	800443a <UART_SetConfig+0x2e6>
 800421c:	2308      	movs	r3, #8
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004222:	e10a      	b.n	800443a <UART_SetConfig+0x2e6>
 8004224:	2310      	movs	r3, #16
 8004226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422a:	e106      	b.n	800443a <UART_SetConfig+0x2e6>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a7c      	ldr	r2, [pc, #496]	; (8004424 <UART_SetConfig+0x2d0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d138      	bne.n	80042a8 <UART_SetConfig+0x154>
 8004236:	4b7a      	ldr	r3, [pc, #488]	; (8004420 <UART_SetConfig+0x2cc>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f003 030c 	and.w	r3, r3, #12
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d82d      	bhi.n	80042a0 <UART_SetConfig+0x14c>
 8004244:	a201      	add	r2, pc, #4	; (adr r2, 800424c <UART_SetConfig+0xf8>)
 8004246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424a:	bf00      	nop
 800424c:	08004281 	.word	0x08004281
 8004250:	080042a1 	.word	0x080042a1
 8004254:	080042a1 	.word	0x080042a1
 8004258:	080042a1 	.word	0x080042a1
 800425c:	08004291 	.word	0x08004291
 8004260:	080042a1 	.word	0x080042a1
 8004264:	080042a1 	.word	0x080042a1
 8004268:	080042a1 	.word	0x080042a1
 800426c:	08004289 	.word	0x08004289
 8004270:	080042a1 	.word	0x080042a1
 8004274:	080042a1 	.word	0x080042a1
 8004278:	080042a1 	.word	0x080042a1
 800427c:	08004299 	.word	0x08004299
 8004280:	2300      	movs	r3, #0
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004286:	e0d8      	b.n	800443a <UART_SetConfig+0x2e6>
 8004288:	2302      	movs	r3, #2
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e0d4      	b.n	800443a <UART_SetConfig+0x2e6>
 8004290:	2304      	movs	r3, #4
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e0d0      	b.n	800443a <UART_SetConfig+0x2e6>
 8004298:	2308      	movs	r3, #8
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e0cc      	b.n	800443a <UART_SetConfig+0x2e6>
 80042a0:	2310      	movs	r3, #16
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e0c8      	b.n	800443a <UART_SetConfig+0x2e6>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a5e      	ldr	r2, [pc, #376]	; (8004428 <UART_SetConfig+0x2d4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d125      	bne.n	80042fe <UART_SetConfig+0x1aa>
 80042b2:	4b5b      	ldr	r3, [pc, #364]	; (8004420 <UART_SetConfig+0x2cc>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042bc:	2b30      	cmp	r3, #48	; 0x30
 80042be:	d016      	beq.n	80042ee <UART_SetConfig+0x19a>
 80042c0:	2b30      	cmp	r3, #48	; 0x30
 80042c2:	d818      	bhi.n	80042f6 <UART_SetConfig+0x1a2>
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d00a      	beq.n	80042de <UART_SetConfig+0x18a>
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d814      	bhi.n	80042f6 <UART_SetConfig+0x1a2>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <UART_SetConfig+0x182>
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d008      	beq.n	80042e6 <UART_SetConfig+0x192>
 80042d4:	e00f      	b.n	80042f6 <UART_SetConfig+0x1a2>
 80042d6:	2300      	movs	r3, #0
 80042d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042dc:	e0ad      	b.n	800443a <UART_SetConfig+0x2e6>
 80042de:	2302      	movs	r3, #2
 80042e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e4:	e0a9      	b.n	800443a <UART_SetConfig+0x2e6>
 80042e6:	2304      	movs	r3, #4
 80042e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ec:	e0a5      	b.n	800443a <UART_SetConfig+0x2e6>
 80042ee:	2308      	movs	r3, #8
 80042f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f4:	e0a1      	b.n	800443a <UART_SetConfig+0x2e6>
 80042f6:	2310      	movs	r3, #16
 80042f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fc:	e09d      	b.n	800443a <UART_SetConfig+0x2e6>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a4a      	ldr	r2, [pc, #296]	; (800442c <UART_SetConfig+0x2d8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d125      	bne.n	8004354 <UART_SetConfig+0x200>
 8004308:	4b45      	ldr	r3, [pc, #276]	; (8004420 <UART_SetConfig+0x2cc>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004312:	2bc0      	cmp	r3, #192	; 0xc0
 8004314:	d016      	beq.n	8004344 <UART_SetConfig+0x1f0>
 8004316:	2bc0      	cmp	r3, #192	; 0xc0
 8004318:	d818      	bhi.n	800434c <UART_SetConfig+0x1f8>
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d00a      	beq.n	8004334 <UART_SetConfig+0x1e0>
 800431e:	2b80      	cmp	r3, #128	; 0x80
 8004320:	d814      	bhi.n	800434c <UART_SetConfig+0x1f8>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <UART_SetConfig+0x1d8>
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d008      	beq.n	800433c <UART_SetConfig+0x1e8>
 800432a:	e00f      	b.n	800434c <UART_SetConfig+0x1f8>
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004332:	e082      	b.n	800443a <UART_SetConfig+0x2e6>
 8004334:	2302      	movs	r3, #2
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433a:	e07e      	b.n	800443a <UART_SetConfig+0x2e6>
 800433c:	2304      	movs	r3, #4
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004342:	e07a      	b.n	800443a <UART_SetConfig+0x2e6>
 8004344:	2308      	movs	r3, #8
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434a:	e076      	b.n	800443a <UART_SetConfig+0x2e6>
 800434c:	2310      	movs	r3, #16
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004352:	e072      	b.n	800443a <UART_SetConfig+0x2e6>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a35      	ldr	r2, [pc, #212]	; (8004430 <UART_SetConfig+0x2dc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d12a      	bne.n	80043b4 <UART_SetConfig+0x260>
 800435e:	4b30      	ldr	r3, [pc, #192]	; (8004420 <UART_SetConfig+0x2cc>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800436c:	d01a      	beq.n	80043a4 <UART_SetConfig+0x250>
 800436e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004372:	d81b      	bhi.n	80043ac <UART_SetConfig+0x258>
 8004374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004378:	d00c      	beq.n	8004394 <UART_SetConfig+0x240>
 800437a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437e:	d815      	bhi.n	80043ac <UART_SetConfig+0x258>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <UART_SetConfig+0x238>
 8004384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004388:	d008      	beq.n	800439c <UART_SetConfig+0x248>
 800438a:	e00f      	b.n	80043ac <UART_SetConfig+0x258>
 800438c:	2300      	movs	r3, #0
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e052      	b.n	800443a <UART_SetConfig+0x2e6>
 8004394:	2302      	movs	r3, #2
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e04e      	b.n	800443a <UART_SetConfig+0x2e6>
 800439c:	2304      	movs	r3, #4
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e04a      	b.n	800443a <UART_SetConfig+0x2e6>
 80043a4:	2308      	movs	r3, #8
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e046      	b.n	800443a <UART_SetConfig+0x2e6>
 80043ac:	2310      	movs	r3, #16
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e042      	b.n	800443a <UART_SetConfig+0x2e6>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a17      	ldr	r2, [pc, #92]	; (8004418 <UART_SetConfig+0x2c4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d13a      	bne.n	8004434 <UART_SetConfig+0x2e0>
 80043be:	4b18      	ldr	r3, [pc, #96]	; (8004420 <UART_SetConfig+0x2cc>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043cc:	d01a      	beq.n	8004404 <UART_SetConfig+0x2b0>
 80043ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043d2:	d81b      	bhi.n	800440c <UART_SetConfig+0x2b8>
 80043d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d8:	d00c      	beq.n	80043f4 <UART_SetConfig+0x2a0>
 80043da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043de:	d815      	bhi.n	800440c <UART_SetConfig+0x2b8>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <UART_SetConfig+0x298>
 80043e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e8:	d008      	beq.n	80043fc <UART_SetConfig+0x2a8>
 80043ea:	e00f      	b.n	800440c <UART_SetConfig+0x2b8>
 80043ec:	2300      	movs	r3, #0
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f2:	e022      	b.n	800443a <UART_SetConfig+0x2e6>
 80043f4:	2302      	movs	r3, #2
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fa:	e01e      	b.n	800443a <UART_SetConfig+0x2e6>
 80043fc:	2304      	movs	r3, #4
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004402:	e01a      	b.n	800443a <UART_SetConfig+0x2e6>
 8004404:	2308      	movs	r3, #8
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e016      	b.n	800443a <UART_SetConfig+0x2e6>
 800440c:	2310      	movs	r3, #16
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e012      	b.n	800443a <UART_SetConfig+0x2e6>
 8004414:	efff69f3 	.word	0xefff69f3
 8004418:	40008000 	.word	0x40008000
 800441c:	40013800 	.word	0x40013800
 8004420:	40021000 	.word	0x40021000
 8004424:	40004400 	.word	0x40004400
 8004428:	40004800 	.word	0x40004800
 800442c:	40004c00 	.word	0x40004c00
 8004430:	40005000 	.word	0x40005000
 8004434:	2310      	movs	r3, #16
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a9f      	ldr	r2, [pc, #636]	; (80046bc <UART_SetConfig+0x568>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d17a      	bne.n	800453a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004448:	2b08      	cmp	r3, #8
 800444a:	d824      	bhi.n	8004496 <UART_SetConfig+0x342>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <UART_SetConfig+0x300>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004479 	.word	0x08004479
 8004458:	08004497 	.word	0x08004497
 800445c:	08004481 	.word	0x08004481
 8004460:	08004497 	.word	0x08004497
 8004464:	08004487 	.word	0x08004487
 8004468:	08004497 	.word	0x08004497
 800446c:	08004497 	.word	0x08004497
 8004470:	08004497 	.word	0x08004497
 8004474:	0800448f 	.word	0x0800448f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004478:	f7fe fde2 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 800447c:	61f8      	str	r0, [r7, #28]
        break;
 800447e:	e010      	b.n	80044a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004480:	4b8f      	ldr	r3, [pc, #572]	; (80046c0 <UART_SetConfig+0x56c>)
 8004482:	61fb      	str	r3, [r7, #28]
        break;
 8004484:	e00d      	b.n	80044a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004486:	f7fe fd43 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 800448a:	61f8      	str	r0, [r7, #28]
        break;
 800448c:	e009      	b.n	80044a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800448e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004492:	61fb      	str	r3, [r7, #28]
        break;
 8004494:	e005      	b.n	80044a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80fb 	beq.w	80046a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d305      	bcc.n	80044c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d903      	bls.n	80044ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044cc:	e0e8      	b.n	80046a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	2200      	movs	r2, #0
 80044d2:	461c      	mov	r4, r3
 80044d4:	4615      	mov	r5, r2
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	022b      	lsls	r3, r5, #8
 80044e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044e4:	0222      	lsls	r2, r4, #8
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	6849      	ldr	r1, [r1, #4]
 80044ea:	0849      	lsrs	r1, r1, #1
 80044ec:	2000      	movs	r0, #0
 80044ee:	4688      	mov	r8, r1
 80044f0:	4681      	mov	r9, r0
 80044f2:	eb12 0a08 	adds.w	sl, r2, r8
 80044f6:	eb43 0b09 	adc.w	fp, r3, r9
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004508:	4650      	mov	r0, sl
 800450a:	4659      	mov	r1, fp
 800450c:	f7fb fe70 	bl	80001f0 <__aeabi_uldivmod>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4613      	mov	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800451e:	d308      	bcc.n	8004532 <UART_SetConfig+0x3de>
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004526:	d204      	bcs.n	8004532 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	60da      	str	r2, [r3, #12]
 8004530:	e0b6      	b.n	80046a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004538:	e0b2      	b.n	80046a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004542:	d15e      	bne.n	8004602 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004548:	2b08      	cmp	r3, #8
 800454a:	d828      	bhi.n	800459e <UART_SetConfig+0x44a>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <UART_SetConfig+0x400>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	08004579 	.word	0x08004579
 8004558:	08004581 	.word	0x08004581
 800455c:	08004589 	.word	0x08004589
 8004560:	0800459f 	.word	0x0800459f
 8004564:	0800458f 	.word	0x0800458f
 8004568:	0800459f 	.word	0x0800459f
 800456c:	0800459f 	.word	0x0800459f
 8004570:	0800459f 	.word	0x0800459f
 8004574:	08004597 	.word	0x08004597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004578:	f7fe fd62 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 800457c:	61f8      	str	r0, [r7, #28]
        break;
 800457e:	e014      	b.n	80045aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004580:	f7fe fd74 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 8004584:	61f8      	str	r0, [r7, #28]
        break;
 8004586:	e010      	b.n	80045aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004588:	4b4d      	ldr	r3, [pc, #308]	; (80046c0 <UART_SetConfig+0x56c>)
 800458a:	61fb      	str	r3, [r7, #28]
        break;
 800458c:	e00d      	b.n	80045aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458e:	f7fe fcbf 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8004592:	61f8      	str	r0, [r7, #28]
        break;
 8004594:	e009      	b.n	80045aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459a:	61fb      	str	r3, [r7, #28]
        break;
 800459c:	e005      	b.n	80045aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d077      	beq.n	80046a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	005a      	lsls	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	441a      	add	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b0f      	cmp	r3, #15
 80045ca:	d916      	bls.n	80045fa <UART_SetConfig+0x4a6>
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d2:	d212      	bcs.n	80045fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f023 030f 	bic.w	r3, r3, #15
 80045dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	8afb      	ldrh	r3, [r7, #22]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	8afa      	ldrh	r2, [r7, #22]
 80045f6:	60da      	str	r2, [r3, #12]
 80045f8:	e052      	b.n	80046a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004600:	e04e      	b.n	80046a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004606:	2b08      	cmp	r3, #8
 8004608:	d827      	bhi.n	800465a <UART_SetConfig+0x506>
 800460a:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <UART_SetConfig+0x4bc>)
 800460c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004610:	08004635 	.word	0x08004635
 8004614:	0800463d 	.word	0x0800463d
 8004618:	08004645 	.word	0x08004645
 800461c:	0800465b 	.word	0x0800465b
 8004620:	0800464b 	.word	0x0800464b
 8004624:	0800465b 	.word	0x0800465b
 8004628:	0800465b 	.word	0x0800465b
 800462c:	0800465b 	.word	0x0800465b
 8004630:	08004653 	.word	0x08004653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004634:	f7fe fd04 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8004638:	61f8      	str	r0, [r7, #28]
        break;
 800463a:	e014      	b.n	8004666 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800463c:	f7fe fd16 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 8004640:	61f8      	str	r0, [r7, #28]
        break;
 8004642:	e010      	b.n	8004666 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004644:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <UART_SetConfig+0x56c>)
 8004646:	61fb      	str	r3, [r7, #28]
        break;
 8004648:	e00d      	b.n	8004666 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464a:	f7fe fc61 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 800464e:	61f8      	str	r0, [r7, #28]
        break;
 8004650:	e009      	b.n	8004666 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004656:	61fb      	str	r3, [r7, #28]
        break;
 8004658:	e005      	b.n	8004666 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004664:	bf00      	nop
    }

    if (pclk != 0U)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d019      	beq.n	80046a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	085a      	lsrs	r2, r3, #1
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	441a      	add	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	fbb2 f3f3 	udiv	r3, r2, r3
 800467e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	2b0f      	cmp	r3, #15
 8004684:	d909      	bls.n	800469a <UART_SetConfig+0x546>
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468c:	d205      	bcs.n	800469a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60da      	str	r2, [r3, #12]
 8004698:	e002      	b.n	80046a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3728      	adds	r7, #40	; 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ba:	bf00      	nop
 80046bc:	40008000 	.word	0x40008000
 80046c0:	00f42400 	.word	0x00f42400

080046c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	f003 0308 	and.w	r3, r3, #8
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01a      	beq.n	80047da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047c2:	d10a      	bne.n	80047da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	605a      	str	r2, [r3, #4]
  }
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b098      	sub	sp, #96	; 0x60
 800480c:	af02      	add	r7, sp, #8
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004818:	f7fc f95e 	bl	8000ad8 <HAL_GetTick>
 800481c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b08      	cmp	r3, #8
 800482a:	d12e      	bne.n	800488a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800482c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004834:	2200      	movs	r2, #0
 8004836:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f88c 	bl	8004958 <UART_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d021      	beq.n	800488a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800485a:	653b      	str	r3, [r7, #80]	; 0x50
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004864:	647b      	str	r3, [r7, #68]	; 0x44
 8004866:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800486a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e6      	bne.n	8004846 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e062      	b.n	8004950 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b04      	cmp	r3, #4
 8004896:	d149      	bne.n	800492c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a0:	2200      	movs	r2, #0
 80048a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f856 	bl	8004958 <UART_WaitOnFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d03c      	beq.n	800492c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	623b      	str	r3, [r7, #32]
   return(result);
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d0:	633b      	str	r3, [r7, #48]	; 0x30
 80048d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e6      	bne.n	80048b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3308      	adds	r3, #8
 80048ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3308      	adds	r3, #8
 8004902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004904:	61fa      	str	r2, [r7, #28]
 8004906:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	69b9      	ldr	r1, [r7, #24]
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	617b      	str	r3, [r7, #20]
   return(result);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e5      	bne.n	80048e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e011      	b.n	8004950 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3758      	adds	r7, #88	; 0x58
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	4613      	mov	r3, r2
 8004966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004968:	e049      	b.n	80049fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004970:	d045      	beq.n	80049fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004972:	f7fc f8b1 	bl	8000ad8 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	429a      	cmp	r2, r3
 8004980:	d302      	bcc.n	8004988 <UART_WaitOnFlagUntilTimeout+0x30>
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e048      	b.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	d031      	beq.n	80049fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d110      	bne.n	80049ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2208      	movs	r2, #8
 80049ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f838 	bl	8004a26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2208      	movs	r2, #8
 80049ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e029      	b.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d8:	d111      	bne.n	80049fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 f81e 	bl	8004a26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e00f      	b.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d0a6      	beq.n	800496a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b095      	sub	sp, #84	; 0x54
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e6      	bne.n	8004a2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3308      	adds	r3, #8
 8004a66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e5      	bne.n	8004a60 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d118      	bne.n	8004ace <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f023 0310 	bic.w	r3, r3, #16
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	6979      	ldr	r1, [r7, #20]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e6      	bne.n	8004a9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ae2:	bf00      	nop
 8004ae4:	3754      	adds	r7, #84	; 0x54
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004aee:	b084      	sub	sp, #16
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	f107 001c 	add.w	r0, r7, #28
 8004afc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f001 fa1d 	bl	8005f4c <USB_CoreReset>
 8004b12:	4603      	mov	r3, r0
 8004b14:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38
 8004b28:	e005      	b.n	8004b36 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b42:	b004      	add	sp, #16
 8004b44:	4770      	bx	lr
	...

08004b48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	4613      	mov	r3, r2
 8004b54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d165      	bne.n	8004c28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4a3e      	ldr	r2, [pc, #248]	; (8004c58 <USB_SetTurnaroundTime+0x110>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d906      	bls.n	8004b72 <USB_SetTurnaroundTime+0x2a>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4a3d      	ldr	r2, [pc, #244]	; (8004c5c <USB_SetTurnaroundTime+0x114>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d202      	bcs.n	8004b72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b6c:	230f      	movs	r3, #15
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e05c      	b.n	8004c2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4a39      	ldr	r2, [pc, #228]	; (8004c5c <USB_SetTurnaroundTime+0x114>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d306      	bcc.n	8004b88 <USB_SetTurnaroundTime+0x40>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4a38      	ldr	r2, [pc, #224]	; (8004c60 <USB_SetTurnaroundTime+0x118>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d202      	bcs.n	8004b88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b82:	230e      	movs	r3, #14
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	e051      	b.n	8004c2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4a35      	ldr	r2, [pc, #212]	; (8004c60 <USB_SetTurnaroundTime+0x118>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d306      	bcc.n	8004b9e <USB_SetTurnaroundTime+0x56>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4a34      	ldr	r2, [pc, #208]	; (8004c64 <USB_SetTurnaroundTime+0x11c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d202      	bcs.n	8004b9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b98:	230d      	movs	r3, #13
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	e046      	b.n	8004c2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4a30      	ldr	r2, [pc, #192]	; (8004c64 <USB_SetTurnaroundTime+0x11c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d306      	bcc.n	8004bb4 <USB_SetTurnaroundTime+0x6c>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4a2f      	ldr	r2, [pc, #188]	; (8004c68 <USB_SetTurnaroundTime+0x120>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d802      	bhi.n	8004bb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004bae:	230c      	movs	r3, #12
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e03b      	b.n	8004c2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4a2c      	ldr	r2, [pc, #176]	; (8004c68 <USB_SetTurnaroundTime+0x120>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d906      	bls.n	8004bca <USB_SetTurnaroundTime+0x82>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4a2b      	ldr	r2, [pc, #172]	; (8004c6c <USB_SetTurnaroundTime+0x124>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d802      	bhi.n	8004bca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004bc4:	230b      	movs	r3, #11
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	e030      	b.n	8004c2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4a27      	ldr	r2, [pc, #156]	; (8004c6c <USB_SetTurnaroundTime+0x124>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d906      	bls.n	8004be0 <USB_SetTurnaroundTime+0x98>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4a26      	ldr	r2, [pc, #152]	; (8004c70 <USB_SetTurnaroundTime+0x128>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d802      	bhi.n	8004be0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004bda:	230a      	movs	r3, #10
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	e025      	b.n	8004c2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4a23      	ldr	r2, [pc, #140]	; (8004c70 <USB_SetTurnaroundTime+0x128>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d906      	bls.n	8004bf6 <USB_SetTurnaroundTime+0xae>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4a22      	ldr	r2, [pc, #136]	; (8004c74 <USB_SetTurnaroundTime+0x12c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d202      	bcs.n	8004bf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004bf0:	2309      	movs	r3, #9
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e01a      	b.n	8004c2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <USB_SetTurnaroundTime+0x12c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d306      	bcc.n	8004c0c <USB_SetTurnaroundTime+0xc4>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4a1d      	ldr	r2, [pc, #116]	; (8004c78 <USB_SetTurnaroundTime+0x130>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d802      	bhi.n	8004c0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c06:	2308      	movs	r3, #8
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	e00f      	b.n	8004c2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4a1a      	ldr	r2, [pc, #104]	; (8004c78 <USB_SetTurnaroundTime+0x130>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d906      	bls.n	8004c22 <USB_SetTurnaroundTime+0xda>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4a19      	ldr	r2, [pc, #100]	; (8004c7c <USB_SetTurnaroundTime+0x134>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d202      	bcs.n	8004c22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c1c:	2307      	movs	r3, #7
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	e004      	b.n	8004c2c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c22:	2306      	movs	r3, #6
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	e001      	b.n	8004c2c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c28:	2309      	movs	r3, #9
 8004c2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	029b      	lsls	r3, r3, #10
 8004c40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004c44:	431a      	orrs	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	00d8acbf 	.word	0x00d8acbf
 8004c5c:	00e4e1c0 	.word	0x00e4e1c0
 8004c60:	00f42400 	.word	0x00f42400
 8004c64:	01067380 	.word	0x01067380
 8004c68:	011a499f 	.word	0x011a499f
 8004c6c:	01312cff 	.word	0x01312cff
 8004c70:	014ca43f 	.word	0x014ca43f
 8004c74:	016e3600 	.word	0x016e3600
 8004c78:	01a6ab1f 	.word	0x01a6ab1f
 8004c7c:	01e84800 	.word	0x01e84800

08004c80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f043 0201 	orr.w	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f023 0201 	bic.w	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d115      	bne.n	8004d12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	f7fb fefc 	bl	8000af0 <HAL_Delay>
      ms++;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f001 f8ab 	bl	8005e5a <USB_GetMode>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d01e      	beq.n	8004d48 <USB_SetCurrentMode+0x84>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b31      	cmp	r3, #49	; 0x31
 8004d0e:	d9f0      	bls.n	8004cf2 <USB_SetCurrentMode+0x2e>
 8004d10:	e01a      	b.n	8004d48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d115      	bne.n	8004d44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d24:	2001      	movs	r0, #1
 8004d26:	f7fb fee3 	bl	8000af0 <HAL_Delay>
      ms++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 f892 	bl	8005e5a <USB_GetMode>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <USB_SetCurrentMode+0x84>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b31      	cmp	r3, #49	; 0x31
 8004d40:	d9f0      	bls.n	8004d24 <USB_SetCurrentMode+0x60>
 8004d42:	e001      	b.n	8004d48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e005      	b.n	8004d54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b32      	cmp	r3, #50	; 0x32
 8004d4c:	d101      	bne.n	8004d52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d76:	2300      	movs	r3, #0
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	e009      	b.n	8004d90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	3340      	adds	r3, #64	; 0x40
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	2200      	movs	r2, #0
 8004d88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b0e      	cmp	r3, #14
 8004d94:	d9f2      	bls.n	8004d7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d11c      	bne.n	8004dd6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004daa:	f043 0302 	orr.w	r3, r3, #2
 8004dae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e005      	b.n	8004de2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004de8:	461a      	mov	r2, r3
 8004dea:	2300      	movs	r3, #0
 8004dec:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004dee:	2103      	movs	r1, #3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f959 	bl	80050a8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004df6:	2110      	movs	r1, #16
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f8f1 	bl	8004fe0 <USB_FlushTxFifo>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f91d 	bl	8005048 <USB_FlushRxFifo>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2300      	movs	r3, #0
 8004e22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e36:	461a      	mov	r2, r3
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	e043      	b.n	8004eca <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e58:	d118      	bne.n	8004e8c <USB_DevInit+0x130>
    {
      if (i == 0U)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	e013      	b.n	8004e9e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e82:	461a      	mov	r2, r3
 8004e84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	e008      	b.n	8004e9e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e98:	461a      	mov	r2, r3
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2300      	movs	r3, #0
 8004eae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ec2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d3b7      	bcc.n	8004e42 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	e043      	b.n	8004f60 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eee:	d118      	bne.n	8004f22 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f02:	461a      	mov	r2, r3
 8004f04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e013      	b.n	8004f34 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	e008      	b.n	8004f34 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2300      	movs	r3, #0
 8004f32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f40:	461a      	mov	r2, r3
 8004f42:	2300      	movs	r3, #0
 8004f44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f52:	461a      	mov	r2, r3
 8004f54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d3b7      	bcc.n	8004ed8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f043 0210 	orr.w	r2, r3, #16
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <USB_DevInit+0x280>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	f043 0208 	orr.w	r2, r3, #8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d107      	bne.n	8004fca <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fc2:	f043 0304 	orr.w	r3, r3, #4
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fd6:	b004      	add	sp, #16
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	803c3800 	.word	0x803c3800

08004fe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4a13      	ldr	r2, [pc, #76]	; (8005044 <USB_FlushTxFifo+0x64>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e01b      	b.n	8005038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	daf2      	bge.n	8004fee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	019b      	lsls	r3, r3, #6
 8005010:	f043 0220 	orr.w	r2, r3, #32
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3301      	adds	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a08      	ldr	r2, [pc, #32]	; (8005044 <USB_FlushTxFifo+0x64>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e006      	b.n	8005038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b20      	cmp	r3, #32
 8005034:	d0f0      	beq.n	8005018 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	00030d40 	.word	0x00030d40

08005048 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3301      	adds	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4a11      	ldr	r2, [pc, #68]	; (80050a4 <USB_FlushRxFifo+0x5c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e018      	b.n	8005098 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	daf2      	bge.n	8005054 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2210      	movs	r2, #16
 8005076:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3301      	adds	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4a08      	ldr	r2, [pc, #32]	; (80050a4 <USB_FlushRxFifo+0x5c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e006      	b.n	8005098 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f003 0310 	and.w	r3, r3, #16
 8005092:	2b10      	cmp	r3, #16
 8005094:	d0f0      	beq.n	8005078 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	00030d40 	.word	0x00030d40

080050a8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	68f9      	ldr	r1, [r7, #12]
 80050c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050c8:	4313      	orrs	r3, r2
 80050ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80050da:	b480      	push	{r7}
 80050dc:	b087      	sub	sp, #28
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0306 	and.w	r3, r3, #6
 80050f2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d002      	beq.n	8005100 <USB_GetDevSpeed+0x26>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b06      	cmp	r3, #6
 80050fe:	d102      	bne.n	8005106 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005100:	2302      	movs	r3, #2
 8005102:	75fb      	strb	r3, [r7, #23]
 8005104:	e001      	b.n	800510a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005106:	230f      	movs	r3, #15
 8005108:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800510a:	7dfb      	ldrb	r3, [r7, #23]
}
 800510c:	4618      	mov	r0, r3
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d13a      	bne.n	80051aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513a:	69da      	ldr	r2, [r3, #28]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	2101      	movs	r1, #1
 8005146:	fa01 f303 	lsl.w	r3, r1, r3
 800514a:	b29b      	uxth	r3, r3
 800514c:	68f9      	ldr	r1, [r7, #12]
 800514e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005152:	4313      	orrs	r3, r2
 8005154:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d155      	bne.n	8005218 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	791b      	ldrb	r3, [r3, #4]
 8005186:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005188:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	059b      	lsls	r3, r3, #22
 800518e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005190:	4313      	orrs	r3, r2
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	440a      	add	r2, r1
 800519a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	e036      	b.n	8005218 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b0:	69da      	ldr	r2, [r3, #28]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	2101      	movs	r1, #1
 80051bc:	fa01 f303 	lsl.w	r3, r1, r3
 80051c0:	041b      	lsls	r3, r3, #16
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d11a      	bne.n	8005218 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	791b      	ldrb	r3, [r3, #4]
 80051fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051fe:	430b      	orrs	r3, r1
 8005200:	4313      	orrs	r3, r2
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005216:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d161      	bne.n	8005308 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800525a:	d11f      	bne.n	800529c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005276:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800527a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005296:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800529a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	2101      	movs	r1, #1
 80052ae:	fa01 f303 	lsl.w	r3, r1, r3
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	43db      	mvns	r3, r3
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052bc:	4013      	ands	r3, r2
 80052be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	2101      	movs	r1, #1
 80052d2:	fa01 f303 	lsl.w	r3, r1, r3
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	43db      	mvns	r3, r3
 80052da:	68f9      	ldr	r1, [r7, #12]
 80052dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052e0:	4013      	ands	r3, r2
 80052e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	0159      	lsls	r1, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	440b      	add	r3, r1
 80052fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fe:	4619      	mov	r1, r3
 8005300:	4b35      	ldr	r3, [pc, #212]	; (80053d8 <USB_DeactivateEndpoint+0x1b0>)
 8005302:	4013      	ands	r3, r2
 8005304:	600b      	str	r3, [r1, #0]
 8005306:	e060      	b.n	80053ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800531a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800531e:	d11f      	bne.n	8005360 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	0151      	lsls	r1, r2, #5
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	440a      	add	r2, r1
 8005336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800533a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800533e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	440a      	add	r2, r1
 8005356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800535a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800535e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	2101      	movs	r1, #1
 8005372:	fa01 f303 	lsl.w	r3, r1, r3
 8005376:	041b      	lsls	r3, r3, #16
 8005378:	43db      	mvns	r3, r3
 800537a:	68f9      	ldr	r1, [r7, #12]
 800537c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005380:	4013      	ands	r3, r2
 8005382:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	69da      	ldr	r2, [r3, #28]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	2101      	movs	r1, #1
 8005396:	fa01 f303 	lsl.w	r3, r1, r3
 800539a:	041b      	lsls	r3, r3, #16
 800539c:	43db      	mvns	r3, r3
 800539e:	68f9      	ldr	r1, [r7, #12]
 80053a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053a4:	4013      	ands	r3, r2
 80053a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	0159      	lsls	r1, r3, #5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	440b      	add	r3, r1
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	4619      	mov	r1, r3
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <USB_DeactivateEndpoint+0x1b4>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	ec337800 	.word	0xec337800
 80053dc:	eff37800 	.word	0xeff37800

080053e0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	785b      	ldrb	r3, [r3, #1]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	f040 8128 	bne.w	800564e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d132      	bne.n	800546c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	0151      	lsls	r1, r2, #5
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	440a      	add	r2, r1
 800541c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005420:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005424:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	0151      	lsls	r1, r2, #5
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	440a      	add	r2, r1
 8005440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	0151      	lsls	r1, r2, #5
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	440a      	add	r2, r1
 8005460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005464:	0cdb      	lsrs	r3, r3, #19
 8005466:	04db      	lsls	r3, r3, #19
 8005468:	6113      	str	r3, [r2, #16]
 800546a:	e092      	b.n	8005592 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	0151      	lsls	r1, r2, #5
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	440a      	add	r2, r1
 8005482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005486:	0cdb      	lsrs	r3, r3, #19
 8005488:	04db      	lsls	r3, r3, #19
 800548a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054ae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d11a      	bne.n	80054ec <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d903      	bls.n	80054ca <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054e8:	6113      	str	r3, [r2, #16]
 80054ea:	e01b      	b.n	8005524 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6919      	ldr	r1, [r3, #16]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	440b      	add	r3, r1
 8005504:	1e59      	subs	r1, r3, #1
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	fbb1 f3f3 	udiv	r3, r1, r3
 800550e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005510:	4b8d      	ldr	r3, [pc, #564]	; (8005748 <USB_EPStartXfer+0x368>)
 8005512:	400b      	ands	r3, r1
 8005514:	6939      	ldr	r1, [r7, #16]
 8005516:	0148      	lsls	r0, r1, #5
 8005518:	6979      	ldr	r1, [r7, #20]
 800551a:	4401      	add	r1, r0
 800551c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005520:	4313      	orrs	r3, r2
 8005522:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800553a:	6939      	ldr	r1, [r7, #16]
 800553c:	0148      	lsls	r0, r1, #5
 800553e:	6979      	ldr	r1, [r7, #20]
 8005540:	4401      	add	r1, r0
 8005542:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005546:	4313      	orrs	r3, r2
 8005548:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	791b      	ldrb	r3, [r3, #4]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d11f      	bne.n	8005592 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	0151      	lsls	r1, r2, #5
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	440a      	add	r2, r1
 8005568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005570:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005590:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	0151      	lsls	r1, r2, #5
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	440a      	add	r2, r1
 80055a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055b0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	791b      	ldrb	r3, [r3, #4]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d015      	beq.n	80055e6 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 8139 	beq.w	8005836 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	2101      	movs	r1, #1
 80055d6:	fa01 f303 	lsl.w	r3, r1, r3
 80055da:	6979      	ldr	r1, [r7, #20]
 80055dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055e0:	4313      	orrs	r3, r2
 80055e2:	634b      	str	r3, [r1, #52]	; 0x34
 80055e4:	e127      	b.n	8005836 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d110      	bne.n	8005618 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	0151      	lsls	r1, r2, #5
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	440a      	add	r2, r1
 800560c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005610:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e00f      	b.n	8005638 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005636:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68d9      	ldr	r1, [r3, #12]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781a      	ldrb	r2, [r3, #0]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	b29b      	uxth	r3, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f9a6 	bl	8005998 <USB_WritePacket>
 800564c:	e0f3      	b.n	8005836 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005668:	0cdb      	lsrs	r3, r3, #19
 800566a:	04db      	lsls	r3, r3, #19
 800566c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	440a      	add	r2, r1
 8005684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005688:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800568c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005690:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d12f      	bne.n	80056f8 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c6:	6939      	ldr	r1, [r7, #16]
 80056c8:	0148      	lsls	r0, r1, #5
 80056ca:	6979      	ldr	r1, [r7, #20]
 80056cc:	4401      	add	r1, r0
 80056ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056d2:	4313      	orrs	r3, r2
 80056d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056f4:	6113      	str	r3, [r2, #16]
 80056f6:	e061      	b.n	80057bc <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d125      	bne.n	800574c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005716:	6939      	ldr	r1, [r7, #16]
 8005718:	0148      	lsls	r0, r1, #5
 800571a:	6979      	ldr	r1, [r7, #20]
 800571c:	4401      	add	r1, r0
 800571e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005722:	4313      	orrs	r3, r2
 8005724:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	440a      	add	r2, r1
 800573c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005740:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005744:	6113      	str	r3, [r2, #16]
 8005746:	e039      	b.n	80057bc <USB_EPStartXfer+0x3dc>
 8005748:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4413      	add	r3, r2
 8005756:	1e5a      	subs	r2, r3, #1
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005760:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	89fa      	ldrh	r2, [r7, #14]
 8005768:	fb03 f202 	mul.w	r2, r3, r2
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	89fb      	ldrh	r3, [r7, #14]
 8005780:	04d9      	lsls	r1, r3, #19
 8005782:	4b2f      	ldr	r3, [pc, #188]	; (8005840 <USB_EPStartXfer+0x460>)
 8005784:	400b      	ands	r3, r1
 8005786:	6939      	ldr	r1, [r7, #16]
 8005788:	0148      	lsls	r0, r1, #5
 800578a:	6979      	ldr	r1, [r7, #20]
 800578c:	4401      	add	r1, r0
 800578e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005792:	4313      	orrs	r3, r2
 8005794:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ac:	6939      	ldr	r1, [r7, #16]
 80057ae:	0148      	lsls	r0, r1, #5
 80057b0:	6979      	ldr	r1, [r7, #20]
 80057b2:	4401      	add	r1, r0
 80057b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057b8:	4313      	orrs	r3, r2
 80057ba:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	791b      	ldrb	r3, [r3, #4]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d128      	bne.n	8005816 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d110      	bne.n	80057f6 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	e00f      	b.n	8005816 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	440a      	add	r2, r1
 800580c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005814:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005830:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005834:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	1ff80000 	.word	0x1ff80000

08005844 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d14a      	bne.n	80058f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800587a:	f040 8086 	bne.w	800598a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	7812      	ldrb	r2, [r2, #0]
 8005892:	0151      	lsls	r1, r2, #5
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	440a      	add	r2, r1
 8005898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	7812      	ldrb	r2, [r2, #0]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3301      	adds	r3, #1
 80058ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d902      	bls.n	80058dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
          break;
 80058da:	e056      	b.n	800598a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058f4:	d0e7      	beq.n	80058c6 <USB_EPStopXfer+0x82>
 80058f6:	e048      	b.n	800598a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800590c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005910:	d13b      	bne.n	800598a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	7812      	ldrb	r2, [r2, #0]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005930:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005934:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	7812      	ldrb	r2, [r2, #0]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005958:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3301      	adds	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f242 7210 	movw	r2, #10000	; 0x2710
 8005966:	4293      	cmp	r3, r2
 8005968:	d902      	bls.n	8005970 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	75fb      	strb	r3, [r7, #23]
          break;
 800596e:	e00c      	b.n	800598a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005988:	d0e7      	beq.n	800595a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
}
 800598c:	4618      	mov	r0, r3
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005998:	b480      	push	{r7}
 800599a:	b089      	sub	sp, #36	; 0x24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4611      	mov	r1, r2
 80059a4:	461a      	mov	r2, r3
 80059a6:	460b      	mov	r3, r1
 80059a8:	71fb      	strb	r3, [r7, #7]
 80059aa:	4613      	mov	r3, r2
 80059ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80059b6:	88bb      	ldrh	r3, [r7, #4]
 80059b8:	3303      	adds	r3, #3
 80059ba:	089b      	lsrs	r3, r3, #2
 80059bc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80059be:	2300      	movs	r3, #0
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e018      	b.n	80059f6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	031a      	lsls	r2, r3, #12
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d0:	461a      	mov	r2, r3
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	3301      	adds	r3, #1
 80059dc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	3301      	adds	r3, #1
 80059e2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	3301      	adds	r3, #1
 80059e8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	3301      	adds	r3, #1
 80059ee:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	3301      	adds	r3, #1
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d3e2      	bcc.n	80059c4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3724      	adds	r7, #36	; 0x24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b08b      	sub	sp, #44	; 0x2c
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	4613      	mov	r3, r2
 8005a18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	089b      	lsrs	r3, r3, #2
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a32:	2300      	movs	r3, #0
 8005a34:	623b      	str	r3, [r7, #32]
 8005a36:	e014      	b.n	8005a62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	3301      	adds	r3, #1
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	3301      	adds	r3, #1
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	3301      	adds	r3, #1
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	623b      	str	r3, [r7, #32]
 8005a62:	6a3a      	ldr	r2, [r7, #32]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d3e6      	bcc.n	8005a38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a6a:	8bfb      	ldrh	r3, [r7, #30]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01e      	beq.n	8005aae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f107 0310 	add.w	r3, r7, #16
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	701a      	strb	r2, [r3, #0]
      i++;
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005aa2:	8bfb      	ldrh	r3, [r7, #30]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005aa8:	8bfb      	ldrh	r3, [r7, #30]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1ea      	bne.n	8005a84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	372c      	adds	r7, #44	; 0x2c
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d12c      	bne.n	8005b32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	db12      	blt.n	8005b10 <USB_EPSetStall+0x54>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00f      	beq.n	8005b10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	e02b      	b.n	8005b8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	db12      	blt.n	8005b6a <USB_EPSetStall+0xae>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00f      	beq.n	8005b6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	0151      	lsls	r1, r2, #5
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	0151      	lsls	r1, r2, #5
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	440a      	add	r2, r1
 8005b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d128      	bne.n	8005c06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bd2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	791b      	ldrb	r3, [r3, #4]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d003      	beq.n	8005be4 <USB_EPClearStall+0x4c>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	791b      	ldrb	r3, [r3, #4]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d138      	bne.n	8005c56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	e027      	b.n	8005c56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	791b      	ldrb	r3, [r3, #4]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d003      	beq.n	8005c36 <USB_EPClearStall+0x9e>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	791b      	ldrb	r3, [r3, #4]
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d10f      	bne.n	8005c56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c98:	68f9      	ldr	r1, [r7, #12]
 8005c9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cca:	f023 0303 	bic.w	r3, r3, #3
 8005cce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cde:	f023 0302 	bic.w	r3, r3, #2
 8005ce2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d0c:	f023 0303 	bic.w	r3, r3, #3
 8005d10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d20:	f043 0302 	orr.w	r3, r3, #2
 8005d24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	0c1b      	lsrs	r3, r3, #16
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	4013      	ands	r3, r2
 8005db0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	b29b      	uxth	r3, r3
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	4013      	ands	r3, r2
 8005dee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005df0:	68bb      	ldr	r3, [r7, #8]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b087      	sub	sp, #28
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e20:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2e:	01db      	lsls	r3, r3, #7
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f003 0301 	and.w	r3, r3, #1
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e94:	f023 0307 	bic.w	r3, r3, #7
 8005e98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	333c      	adds	r3, #60	; 0x3c
 8005ece:	3304      	adds	r3, #4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4a1c      	ldr	r2, [pc, #112]	; (8005f48 <USB_EP0_OutStart+0x8c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d90a      	bls.n	8005ef2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eec:	d101      	bne.n	8005ef2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	e024      	b.n	8005f3c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef8:	461a      	mov	r2, r3
 8005efa:	2300      	movs	r3, #0
 8005efc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f20:	f043 0318 	orr.w	r3, r3, #24
 8005f24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f38:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	4f54300a 	.word	0x4f54300a

08005f4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <USB_CoreReset+0x64>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e01b      	b.n	8005fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	daf2      	bge.n	8005f58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f043 0201 	orr.w	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3301      	adds	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <USB_CoreReset+0x64>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d901      	bls.n	8005f94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e006      	b.n	8005fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d0f0      	beq.n	8005f82 <USB_CoreReset+0x36>

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	00030d40 	.word	0x00030d40

08005fb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fc0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fc4:	f005 fb72 	bl	800b6ac <USBD_static_malloc>
 8005fc8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	32b0      	adds	r2, #176	; 0xb0
 8005fda:	2100      	movs	r1, #0
 8005fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e0d4      	b.n	800618e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005fe4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005fe8:	2100      	movs	r1, #0
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f005 fb7c 	bl	800b6e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	32b0      	adds	r2, #176	; 0xb0
 8005ffa:	68f9      	ldr	r1, [r7, #12]
 8005ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	32b0      	adds	r2, #176	; 0xb0
 800600a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	7c1b      	ldrb	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d138      	bne.n	800608e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800601c:	4b5e      	ldr	r3, [pc, #376]	; (8006198 <USBD_CDC_Init+0x1e4>)
 800601e:	7819      	ldrb	r1, [r3, #0]
 8006020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006024:	2202      	movs	r2, #2
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f005 f92c 	bl	800b284 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800602c:	4b5a      	ldr	r3, [pc, #360]	; (8006198 <USBD_CDC_Init+0x1e4>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	f003 020f 	and.w	r2, r3, #15
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	3324      	adds	r3, #36	; 0x24
 8006042:	2201      	movs	r2, #1
 8006044:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006046:	4b55      	ldr	r3, [pc, #340]	; (800619c <USBD_CDC_Init+0x1e8>)
 8006048:	7819      	ldrb	r1, [r3, #0]
 800604a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800604e:	2202      	movs	r2, #2
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f005 f917 	bl	800b284 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006056:	4b51      	ldr	r3, [pc, #324]	; (800619c <USBD_CDC_Init+0x1e8>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	f003 020f 	and.w	r2, r3, #15
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800606e:	2201      	movs	r2, #1
 8006070:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006072:	4b4b      	ldr	r3, [pc, #300]	; (80061a0 <USBD_CDC_Init+0x1ec>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f003 020f 	and.w	r2, r3, #15
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	3326      	adds	r3, #38	; 0x26
 8006088:	2210      	movs	r2, #16
 800608a:	801a      	strh	r2, [r3, #0]
 800608c:	e035      	b.n	80060fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800608e:	4b42      	ldr	r3, [pc, #264]	; (8006198 <USBD_CDC_Init+0x1e4>)
 8006090:	7819      	ldrb	r1, [r3, #0]
 8006092:	2340      	movs	r3, #64	; 0x40
 8006094:	2202      	movs	r2, #2
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f005 f8f4 	bl	800b284 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800609c:	4b3e      	ldr	r3, [pc, #248]	; (8006198 <USBD_CDC_Init+0x1e4>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	f003 020f 	and.w	r2, r3, #15
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	3324      	adds	r3, #36	; 0x24
 80060b2:	2201      	movs	r2, #1
 80060b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80060b6:	4b39      	ldr	r3, [pc, #228]	; (800619c <USBD_CDC_Init+0x1e8>)
 80060b8:	7819      	ldrb	r1, [r3, #0]
 80060ba:	2340      	movs	r3, #64	; 0x40
 80060bc:	2202      	movs	r2, #2
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f005 f8e0 	bl	800b284 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80060c4:	4b35      	ldr	r3, [pc, #212]	; (800619c <USBD_CDC_Init+0x1e8>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	f003 020f 	and.w	r2, r3, #15
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	440b      	add	r3, r1
 80060d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060dc:	2201      	movs	r2, #1
 80060de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80060e0:	4b2f      	ldr	r3, [pc, #188]	; (80061a0 <USBD_CDC_Init+0x1ec>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	f003 020f 	and.w	r2, r3, #15
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	3326      	adds	r3, #38	; 0x26
 80060f6:	2210      	movs	r2, #16
 80060f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80060fa:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <USBD_CDC_Init+0x1ec>)
 80060fc:	7819      	ldrb	r1, [r3, #0]
 80060fe:	2308      	movs	r3, #8
 8006100:	2203      	movs	r2, #3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f005 f8be 	bl	800b284 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006108:	4b25      	ldr	r3, [pc, #148]	; (80061a0 <USBD_CDC_Init+0x1ec>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	f003 020f 	and.w	r2, r3, #15
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	3324      	adds	r3, #36	; 0x24
 800611e:	2201      	movs	r2, #1
 8006120:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	33b0      	adds	r3, #176	; 0xb0
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006158:	2302      	movs	r3, #2
 800615a:	e018      	b.n	800618e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	7c1b      	ldrb	r3, [r3, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006164:	4b0d      	ldr	r3, [pc, #52]	; (800619c <USBD_CDC_Init+0x1e8>)
 8006166:	7819      	ldrb	r1, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800616e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f005 fa00 	bl	800b578 <USBD_LL_PrepareReceive>
 8006178:	e008      	b.n	800618c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800617a:	4b08      	ldr	r3, [pc, #32]	; (800619c <USBD_CDC_Init+0x1e8>)
 800617c:	7819      	ldrb	r1, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006184:	2340      	movs	r3, #64	; 0x40
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f005 f9f6 	bl	800b578 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20000093 	.word	0x20000093
 800619c:	20000094 	.word	0x20000094
 80061a0:	20000095 	.word	0x20000095

080061a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80061b0:	4b3a      	ldr	r3, [pc, #232]	; (800629c <USBD_CDC_DeInit+0xf8>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f005 f8a2 	bl	800b300 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80061bc:	4b37      	ldr	r3, [pc, #220]	; (800629c <USBD_CDC_DeInit+0xf8>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f003 020f 	and.w	r2, r3, #15
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	3324      	adds	r3, #36	; 0x24
 80061d2:	2200      	movs	r2, #0
 80061d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80061d6:	4b32      	ldr	r3, [pc, #200]	; (80062a0 <USBD_CDC_DeInit+0xfc>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f005 f88f 	bl	800b300 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80061e2:	4b2f      	ldr	r3, [pc, #188]	; (80062a0 <USBD_CDC_DeInit+0xfc>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f003 020f 	and.w	r2, r3, #15
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061fa:	2200      	movs	r2, #0
 80061fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80061fe:	4b29      	ldr	r3, [pc, #164]	; (80062a4 <USBD_CDC_DeInit+0x100>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f005 f87b 	bl	800b300 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800620a:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <USBD_CDC_DeInit+0x100>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	f003 020f 	and.w	r2, r3, #15
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	3324      	adds	r3, #36	; 0x24
 8006220:	2200      	movs	r2, #0
 8006222:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006224:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <USBD_CDC_DeInit+0x100>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	f003 020f 	and.w	r2, r3, #15
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	3326      	adds	r3, #38	; 0x26
 800623a:	2200      	movs	r2, #0
 800623c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	32b0      	adds	r2, #176	; 0xb0
 8006248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d01f      	beq.n	8006290 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	33b0      	adds	r3, #176	; 0xb0
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	32b0      	adds	r2, #176	; 0xb0
 800626e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006272:	4618      	mov	r0, r3
 8006274:	f005 fa28 	bl	800b6c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	32b0      	adds	r2, #176	; 0xb0
 8006282:	2100      	movs	r1, #0
 8006284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000093 	.word	0x20000093
 80062a0:	20000094 	.word	0x20000094
 80062a4:	20000095 	.word	0x20000095

080062a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	32b0      	adds	r2, #176	; 0xb0
 80062bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e0bf      	b.n	8006458 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d050      	beq.n	8006386 <USBD_CDC_Setup+0xde>
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	f040 80af 	bne.w	8006448 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	88db      	ldrh	r3, [r3, #6]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d03a      	beq.n	8006368 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	b25b      	sxtb	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	da1b      	bge.n	8006334 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	33b0      	adds	r3, #176	; 0xb0
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006312:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	88d2      	ldrh	r2, [r2, #6]
 8006318:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	88db      	ldrh	r3, [r3, #6]
 800631e:	2b07      	cmp	r3, #7
 8006320:	bf28      	it	cs
 8006322:	2307      	movcs	r3, #7
 8006324:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	89fa      	ldrh	r2, [r7, #14]
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 fd73 	bl	8007e18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006332:	e090      	b.n	8006456 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	785a      	ldrb	r2, [r3, #1]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	88db      	ldrh	r3, [r3, #6]
 8006342:	2b3f      	cmp	r3, #63	; 0x3f
 8006344:	d803      	bhi.n	800634e <USBD_CDC_Setup+0xa6>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	88db      	ldrh	r3, [r3, #6]
 800634a:	b2da      	uxtb	r2, r3
 800634c:	e000      	b.n	8006350 <USBD_CDC_Setup+0xa8>
 800634e:	2240      	movs	r2, #64	; 0x40
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006356:	6939      	ldr	r1, [r7, #16]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800635e:	461a      	mov	r2, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 fd85 	bl	8007e70 <USBD_CtlPrepareRx>
      break;
 8006366:	e076      	b.n	8006456 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	33b0      	adds	r3, #176	; 0xb0
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	7850      	ldrb	r0, [r2, #1]
 800637e:	2200      	movs	r2, #0
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	4798      	blx	r3
      break;
 8006384:	e067      	b.n	8006456 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	785b      	ldrb	r3, [r3, #1]
 800638a:	2b0b      	cmp	r3, #11
 800638c:	d851      	bhi.n	8006432 <USBD_CDC_Setup+0x18a>
 800638e:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <USBD_CDC_Setup+0xec>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063c5 	.word	0x080063c5
 8006398:	08006441 	.word	0x08006441
 800639c:	08006433 	.word	0x08006433
 80063a0:	08006433 	.word	0x08006433
 80063a4:	08006433 	.word	0x08006433
 80063a8:	08006433 	.word	0x08006433
 80063ac:	08006433 	.word	0x08006433
 80063b0:	08006433 	.word	0x08006433
 80063b4:	08006433 	.word	0x08006433
 80063b8:	08006433 	.word	0x08006433
 80063bc:	080063ef 	.word	0x080063ef
 80063c0:	08006419 	.word	0x08006419
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d107      	bne.n	80063e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80063d0:	f107 030a 	add.w	r3, r7, #10
 80063d4:	2202      	movs	r2, #2
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 fd1d 	bl	8007e18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063de:	e032      	b.n	8006446 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fca7 	bl	8007d36 <USBD_CtlError>
            ret = USBD_FAIL;
 80063e8:	2303      	movs	r3, #3
 80063ea:	75fb      	strb	r3, [r7, #23]
          break;
 80063ec:	e02b      	b.n	8006446 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d107      	bne.n	800640a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063fa:	f107 030d 	add.w	r3, r7, #13
 80063fe:	2201      	movs	r2, #1
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 fd08 	bl	8007e18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006408:	e01d      	b.n	8006446 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 fc92 	bl	8007d36 <USBD_CtlError>
            ret = USBD_FAIL;
 8006412:	2303      	movs	r3, #3
 8006414:	75fb      	strb	r3, [r7, #23]
          break;
 8006416:	e016      	b.n	8006446 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b03      	cmp	r3, #3
 8006422:	d00f      	beq.n	8006444 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fc85 	bl	8007d36 <USBD_CtlError>
            ret = USBD_FAIL;
 800642c:	2303      	movs	r3, #3
 800642e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006430:	e008      	b.n	8006444 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fc7e 	bl	8007d36 <USBD_CtlError>
          ret = USBD_FAIL;
 800643a:	2303      	movs	r3, #3
 800643c:	75fb      	strb	r3, [r7, #23]
          break;
 800643e:	e002      	b.n	8006446 <USBD_CDC_Setup+0x19e>
          break;
 8006440:	bf00      	nop
 8006442:	e008      	b.n	8006456 <USBD_CDC_Setup+0x1ae>
          break;
 8006444:	bf00      	nop
      }
      break;
 8006446:	e006      	b.n	8006456 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 fc73 	bl	8007d36 <USBD_CtlError>
      ret = USBD_FAIL;
 8006450:	2303      	movs	r3, #3
 8006452:	75fb      	strb	r3, [r7, #23]
      break;
 8006454:	bf00      	nop
  }

  return (uint8_t)ret;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006472:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	32b0      	adds	r2, #176	; 0xb0
 800647e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006486:	2303      	movs	r3, #3
 8006488:	e065      	b.n	8006556 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	32b0      	adds	r2, #176	; 0xb0
 8006494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006498:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	f003 020f 	and.w	r2, r3, #15
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	440b      	add	r3, r1
 80064ac:	3318      	adds	r3, #24
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d02f      	beq.n	8006514 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	f003 020f 	and.w	r2, r3, #15
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	3318      	adds	r3, #24
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	78fb      	ldrb	r3, [r7, #3]
 80064cc:	f003 010f 	and.w	r1, r3, #15
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	460b      	mov	r3, r1
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	440b      	add	r3, r1
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4403      	add	r3, r0
 80064dc:	3344      	adds	r3, #68	; 0x44
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80064e4:	fb01 f303 	mul.w	r3, r1, r3
 80064e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d112      	bne.n	8006514 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	f003 020f 	and.w	r2, r3, #15
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	4613      	mov	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	440b      	add	r3, r1
 8006500:	3318      	adds	r3, #24
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006506:	78f9      	ldrb	r1, [r7, #3]
 8006508:	2300      	movs	r3, #0
 800650a:	2200      	movs	r2, #0
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f004 fffb 	bl	800b508 <USBD_LL_Transmit>
 8006512:	e01f      	b.n	8006554 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2200      	movs	r2, #0
 8006518:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	33b0      	adds	r3, #176	; 0xb0
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d010      	beq.n	8006554 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	33b0      	adds	r3, #176	; 0xb0
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006550:	78fa      	ldrb	r2, [r7, #3]
 8006552:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	32b0      	adds	r2, #176	; 0xb0
 8006574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006578:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	32b0      	adds	r2, #176	; 0xb0
 8006584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800658c:	2303      	movs	r3, #3
 800658e:	e01a      	b.n	80065c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f005 f827 	bl	800b5e8 <USBD_LL_GetRxDataSize>
 800659a:	4602      	mov	r2, r0
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	33b0      	adds	r3, #176	; 0xb0
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80065c0:	4611      	mov	r1, r2
 80065c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	32b0      	adds	r2, #176	; 0xb0
 80065e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e025      	b.n	800663c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	33b0      	adds	r3, #176	; 0xb0
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01a      	beq.n	800663a <USBD_CDC_EP0_RxReady+0x6c>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800660a:	2bff      	cmp	r3, #255	; 0xff
 800660c:	d015      	beq.n	800663a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	33b0      	adds	r3, #176	; 0xb0
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006626:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800662e:	b292      	uxth	r2, r2
 8006630:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	22ff      	movs	r2, #255	; 0xff
 8006636:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800664c:	2182      	movs	r1, #130	; 0x82
 800664e:	4818      	ldr	r0, [pc, #96]	; (80066b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006650:	f000 fd0f 	bl	8007072 <USBD_GetEpDesc>
 8006654:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006656:	2101      	movs	r1, #1
 8006658:	4815      	ldr	r0, [pc, #84]	; (80066b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800665a:	f000 fd0a 	bl	8007072 <USBD_GetEpDesc>
 800665e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006660:	2181      	movs	r1, #129	; 0x81
 8006662:	4813      	ldr	r0, [pc, #76]	; (80066b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006664:	f000 fd05 	bl	8007072 <USBD_GetEpDesc>
 8006668:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2210      	movs	r2, #16
 8006674:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d006      	beq.n	800668a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	2200      	movs	r2, #0
 8006680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006684:	711a      	strb	r2, [r3, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d006      	beq.n	800669e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006698:	711a      	strb	r2, [r3, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2243      	movs	r2, #67	; 0x43
 80066a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066a4:	4b02      	ldr	r3, [pc, #8]	; (80066b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20000050 	.word	0x20000050

080066b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066bc:	2182      	movs	r1, #130	; 0x82
 80066be:	4818      	ldr	r0, [pc, #96]	; (8006720 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066c0:	f000 fcd7 	bl	8007072 <USBD_GetEpDesc>
 80066c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066c6:	2101      	movs	r1, #1
 80066c8:	4815      	ldr	r0, [pc, #84]	; (8006720 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066ca:	f000 fcd2 	bl	8007072 <USBD_GetEpDesc>
 80066ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066d0:	2181      	movs	r1, #129	; 0x81
 80066d2:	4813      	ldr	r0, [pc, #76]	; (8006720 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066d4:	f000 fccd 	bl	8007072 <USBD_GetEpDesc>
 80066d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2210      	movs	r2, #16
 80066e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d006      	beq.n	80066fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	2200      	movs	r2, #0
 80066f0:	711a      	strb	r2, [r3, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f042 0202 	orr.w	r2, r2, #2
 80066f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d006      	beq.n	800670e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	711a      	strb	r2, [r3, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f042 0202 	orr.w	r2, r2, #2
 800670c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2243      	movs	r2, #67	; 0x43
 8006712:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006714:	4b02      	ldr	r3, [pc, #8]	; (8006720 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000050 	.word	0x20000050

08006724 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800672c:	2182      	movs	r1, #130	; 0x82
 800672e:	4818      	ldr	r0, [pc, #96]	; (8006790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006730:	f000 fc9f 	bl	8007072 <USBD_GetEpDesc>
 8006734:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006736:	2101      	movs	r1, #1
 8006738:	4815      	ldr	r0, [pc, #84]	; (8006790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800673a:	f000 fc9a 	bl	8007072 <USBD_GetEpDesc>
 800673e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006740:	2181      	movs	r1, #129	; 0x81
 8006742:	4813      	ldr	r0, [pc, #76]	; (8006790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006744:	f000 fc95 	bl	8007072 <USBD_GetEpDesc>
 8006748:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2210      	movs	r2, #16
 8006754:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d006      	beq.n	800676a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2200      	movs	r2, #0
 8006760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006764:	711a      	strb	r2, [r3, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d006      	beq.n	800677e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006778:	711a      	strb	r2, [r3, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2243      	movs	r2, #67	; 0x43
 8006782:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006784:	4b02      	ldr	r3, [pc, #8]	; (8006790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000050 	.word	0x20000050

08006794 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	220a      	movs	r2, #10
 80067a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80067a2:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	2000000c 	.word	0x2000000c

080067b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e009      	b.n	80067dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	33b0      	adds	r3, #176	; 0xb0
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	32b0      	adds	r2, #176	; 0xb0
 80067fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006802:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800680a:	2303      	movs	r3, #3
 800680c:	e008      	b.n	8006820 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	32b0      	adds	r2, #176	; 0xb0
 8006840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006844:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800684c:	2303      	movs	r3, #3
 800684e:	e004      	b.n	800685a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	32b0      	adds	r2, #176	; 0xb0
 800687a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	32b0      	adds	r2, #176	; 0xb0
 800688a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006892:	2303      	movs	r3, #3
 8006894:	e018      	b.n	80068c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	7c1b      	ldrb	r3, [r3, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800689e:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <USBD_CDC_ReceivePacket+0x68>)
 80068a0:	7819      	ldrb	r1, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f004 fe63 	bl	800b578 <USBD_LL_PrepareReceive>
 80068b2:	e008      	b.n	80068c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068b4:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <USBD_CDC_ReceivePacket+0x68>)
 80068b6:	7819      	ldrb	r1, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068be:	2340      	movs	r3, #64	; 0x40
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f004 fe59 	bl	800b578 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	20000094 	.word	0x20000094

080068d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	4613      	mov	r3, r2
 80068e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e01f      	b.n	800692c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	79fa      	ldrb	r2, [r7, #7]
 800691e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f004 fc31 	bl	800b188 <USBD_LL_Init>
 8006926:	4603      	mov	r3, r0
 8006928:	75fb      	strb	r3, [r7, #23]

  return ret;
 800692a:	7dfb      	ldrb	r3, [r7, #23]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006948:	2303      	movs	r3, #3
 800694a:	e025      	b.n	8006998 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	32ae      	adds	r2, #174	; 0xae
 800695e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00f      	beq.n	8006988 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	32ae      	adds	r2, #174	; 0xae
 8006972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006978:	f107 020e 	add.w	r2, r7, #14
 800697c:	4610      	mov	r0, r2
 800697e:	4798      	blx	r3
 8006980:	4602      	mov	r2, r0
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f004 fc39 	bl	800b220 <USBD_LL_Start>
 80069ae:	4603      	mov	r3, r0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	460b      	mov	r3, r1
 80069d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d009      	beq.n	80069fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	78fa      	ldrb	r2, [r7, #3]
 80069f2:	4611      	mov	r1, r2
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	4798      	blx	r3
 80069f8:	4603      	mov	r3, r0
 80069fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	78fa      	ldrb	r2, [r7, #3]
 8006a20:	4611      	mov	r1, r2
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 f938 	bl	8007cc2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a60:	461a      	mov	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d01a      	beq.n	8006aac <USBD_LL_SetupStage+0x72>
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d822      	bhi.n	8006ac0 <USBD_LL_SetupStage+0x86>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <USBD_LL_SetupStage+0x4a>
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d00a      	beq.n	8006a98 <USBD_LL_SetupStage+0x5e>
 8006a82:	e01d      	b.n	8006ac0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fb65 	bl	800715c <USBD_StdDevReq>
 8006a92:	4603      	mov	r3, r0
 8006a94:	73fb      	strb	r3, [r7, #15]
      break;
 8006a96:	e020      	b.n	8006ada <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fbcd 	bl	8007240 <USBD_StdItfReq>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8006aaa:	e016      	b.n	8006ada <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fc2f 	bl	8007318 <USBD_StdEPReq>
 8006aba:	4603      	mov	r3, r0
 8006abc:	73fb      	strb	r3, [r7, #15]
      break;
 8006abe:	e00c      	b.n	8006ada <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ac6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f004 fc4c 	bl	800b36c <USBD_LL_StallEP>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad8:	bf00      	nop
  }

  return ret;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	460b      	mov	r3, r1
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006af6:	7afb      	ldrb	r3, [r7, #11]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d16e      	bne.n	8006bda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	f040 8098 	bne.w	8006c40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d913      	bls.n	8006b44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	1ad2      	subs	r2, r2, r3
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	4293      	cmp	r3, r2
 8006b34:	bf28      	it	cs
 8006b36:	4613      	movcs	r3, r2
 8006b38:	461a      	mov	r2, r3
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f001 f9b4 	bl	8007eaa <USBD_CtlContinueRx>
 8006b42:	e07d      	b.n	8006c40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b4a:	f003 031f 	and.w	r3, r3, #31
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d014      	beq.n	8006b7c <USBD_LL_DataOutStage+0x98>
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d81d      	bhi.n	8006b92 <USBD_LL_DataOutStage+0xae>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <USBD_LL_DataOutStage+0x7c>
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d003      	beq.n	8006b66 <USBD_LL_DataOutStage+0x82>
 8006b5e:	e018      	b.n	8006b92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	75bb      	strb	r3, [r7, #22]
            break;
 8006b64:	e018      	b.n	8006b98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	4619      	mov	r1, r3
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 fa64 	bl	800703e <USBD_CoreFindIF>
 8006b76:	4603      	mov	r3, r0
 8006b78:	75bb      	strb	r3, [r7, #22]
            break;
 8006b7a:	e00d      	b.n	8006b98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	4619      	mov	r1, r3
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fa66 	bl	8007058 <USBD_CoreFindEP>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	75bb      	strb	r3, [r7, #22]
            break;
 8006b90:	e002      	b.n	8006b98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	75bb      	strb	r3, [r7, #22]
            break;
 8006b96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b98:	7dbb      	ldrb	r3, [r7, #22]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d119      	bne.n	8006bd2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d113      	bne.n	8006bd2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006baa:	7dba      	ldrb	r2, [r7, #22]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	32ae      	adds	r2, #174	; 0xae
 8006bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006bba:	7dba      	ldrb	r2, [r7, #22]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006bc2:	7dba      	ldrb	r2, [r7, #22]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	32ae      	adds	r2, #174	; 0xae
 8006bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f001 f97a 	bl	8007ecc <USBD_CtlSendStatus>
 8006bd8:	e032      	b.n	8006c40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	4619      	mov	r1, r3
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 fa37 	bl	8007058 <USBD_CoreFindEP>
 8006bea:	4603      	mov	r3, r0
 8006bec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bee:	7dbb      	ldrb	r3, [r7, #22]
 8006bf0:	2bff      	cmp	r3, #255	; 0xff
 8006bf2:	d025      	beq.n	8006c40 <USBD_LL_DataOutStage+0x15c>
 8006bf4:	7dbb      	ldrb	r3, [r7, #22]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d122      	bne.n	8006c40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d117      	bne.n	8006c36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c06:	7dba      	ldrb	r2, [r7, #22]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	32ae      	adds	r2, #174	; 0xae
 8006c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00f      	beq.n	8006c36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006c16:	7dba      	ldrb	r2, [r7, #22]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006c1e:	7dba      	ldrb	r2, [r7, #22]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	32ae      	adds	r2, #174	; 0xae
 8006c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	7afa      	ldrb	r2, [r7, #11]
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	4798      	blx	r3
 8006c32:	4603      	mov	r3, r0
 8006c34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	e000      	b.n	8006c42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b086      	sub	sp, #24
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	460b      	mov	r3, r1
 8006c54:	607a      	str	r2, [r7, #4]
 8006c56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c58:	7afb      	ldrb	r3, [r7, #11]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d16f      	bne.n	8006d3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	3314      	adds	r3, #20
 8006c62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d15a      	bne.n	8006d24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d914      	bls.n	8006ca4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	689a      	ldr	r2, [r3, #8]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	1ad2      	subs	r2, r2, r3
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6879      	ldr	r1, [r7, #4]
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f001 f8dc 	bl	8007e4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c96:	2300      	movs	r3, #0
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f004 fc6b 	bl	800b578 <USBD_LL_PrepareReceive>
 8006ca2:	e03f      	b.n	8006d24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d11c      	bne.n	8006cea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d316      	bcc.n	8006cea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d20f      	bcs.n	8006cea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2100      	movs	r1, #0
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f001 f8bd 	bl	8007e4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f004 fc48 	bl	800b578 <USBD_LL_PrepareReceive>
 8006ce8:	e01c      	b.n	8006d24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d10f      	bne.n	8006d16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d009      	beq.n	8006d16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d16:	2180      	movs	r1, #128	; 0x80
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f004 fb27 	bl	800b36c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f001 f8e7 	bl	8007ef2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d03a      	beq.n	8006da4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7ff fe42 	bl	80069b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d3c:	e032      	b.n	8006da4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	4619      	mov	r1, r3
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 f985 	bl	8007058 <USBD_CoreFindEP>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	2bff      	cmp	r3, #255	; 0xff
 8006d56:	d025      	beq.n	8006da4 <USBD_LL_DataInStage+0x15a>
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d122      	bne.n	8006da4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d11c      	bne.n	8006da4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d6a:	7dfa      	ldrb	r2, [r7, #23]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	32ae      	adds	r2, #174	; 0xae
 8006d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d014      	beq.n	8006da4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d7a:	7dfa      	ldrb	r2, [r7, #23]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d82:	7dfa      	ldrb	r2, [r7, #23]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	32ae      	adds	r2, #174	; 0xae
 8006d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	7afa      	ldrb	r2, [r7, #11]
 8006d90:	4611      	mov	r1, r2
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	4798      	blx	r3
 8006d96:	4603      	mov	r3, r0
 8006d98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d9a:	7dbb      	ldrb	r3, [r7, #22]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006da0:	7dbb      	ldrb	r3, [r7, #22]
 8006da2:	e000      	b.n	8006da6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d014      	beq.n	8006e14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00e      	beq.n	8006e14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6852      	ldr	r2, [r2, #4]
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	4611      	mov	r1, r2
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006e10:	2303      	movs	r3, #3
 8006e12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	2200      	movs	r2, #0
 8006e18:	2100      	movs	r1, #0
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f004 fa32 	bl	800b284 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2240      	movs	r2, #64	; 0x40
 8006e2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e30:	2340      	movs	r3, #64	; 0x40
 8006e32:	2200      	movs	r2, #0
 8006e34:	2180      	movs	r1, #128	; 0x80
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f004 fa24 	bl	800b284 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2240      	movs	r2, #64	; 0x40
 8006e46:	621a      	str	r2, [r3, #32]

  return ret;
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	78fa      	ldrb	r2, [r7, #3]
 8006e62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d006      	beq.n	8006e94 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2204      	movs	r2, #4
 8006e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d106      	bne.n	8006ecc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d110      	bne.n	8006f10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b082      	sub	sp, #8
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	460b      	mov	r3, r1
 8006f24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	32ae      	adds	r2, #174	; 0xae
 8006f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e01c      	b.n	8006f76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d115      	bne.n	8006f74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	32ae      	adds	r2, #174	; 0xae
 8006f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	32ae      	adds	r2, #174	; 0xae
 8006f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	78fa      	ldrb	r2, [r7, #3]
 8006f6e:	4611      	mov	r1, r2
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	32ae      	adds	r2, #174	; 0xae
 8006f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e01c      	b.n	8006fda <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d115      	bne.n	8006fd8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	32ae      	adds	r2, #174	; 0xae
 8006fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	32ae      	adds	r2, #174	; 0xae
 8006fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	78fa      	ldrb	r2, [r7, #3]
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00e      	beq.n	8007034 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	6852      	ldr	r2, [r2, #4]
 8007022:	b2d2      	uxtb	r2, r2
 8007024:	4611      	mov	r1, r2
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	4798      	blx	r3
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007030:	2303      	movs	r3, #3
 8007032:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800704a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007064:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b086      	sub	sp, #24
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007086:	2300      	movs	r3, #0
 8007088:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	885b      	ldrh	r3, [r3, #2]
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	b29b      	uxth	r3, r3
 8007096:	429a      	cmp	r2, r3
 8007098:	d920      	bls.n	80070dc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80070a2:	e013      	b.n	80070cc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80070a4:	f107 030a 	add.w	r3, r7, #10
 80070a8:	4619      	mov	r1, r3
 80070aa:	6978      	ldr	r0, [r7, #20]
 80070ac:	f000 f81b 	bl	80070e6 <USBD_GetNextDesc>
 80070b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	2b05      	cmp	r3, #5
 80070b8:	d108      	bne.n	80070cc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	789b      	ldrb	r3, [r3, #2]
 80070c2:	78fa      	ldrb	r2, [r7, #3]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d008      	beq.n	80070da <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80070c8:	2300      	movs	r3, #0
 80070ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	885b      	ldrh	r3, [r3, #2]
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	897b      	ldrh	r3, [r7, #10]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d8e5      	bhi.n	80070a4 <USBD_GetEpDesc+0x32>
 80070d8:	e000      	b.n	80070dc <USBD_GetEpDesc+0x6a>
          break;
 80070da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80070dc:	693b      	ldr	r3, [r7, #16]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	881a      	ldrh	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	4413      	add	r3, r2
 8007100:	b29a      	uxth	r2, r3
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4413      	add	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007112:	68fb      	ldr	r3, [r7, #12]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	3301      	adds	r3, #1
 8007136:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800713e:	8a3b      	ldrh	r3, [r7, #16]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	b21a      	sxth	r2, r3
 8007144:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007148:	4313      	orrs	r3, r2
 800714a:	b21b      	sxth	r3, r3
 800714c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800714e:	89fb      	ldrh	r3, [r7, #14]
}
 8007150:	4618      	mov	r0, r3
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007172:	2b40      	cmp	r3, #64	; 0x40
 8007174:	d005      	beq.n	8007182 <USBD_StdDevReq+0x26>
 8007176:	2b40      	cmp	r3, #64	; 0x40
 8007178:	d857      	bhi.n	800722a <USBD_StdDevReq+0xce>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00f      	beq.n	800719e <USBD_StdDevReq+0x42>
 800717e:	2b20      	cmp	r3, #32
 8007180:	d153      	bne.n	800722a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	32ae      	adds	r2, #174	; 0xae
 800718c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	4798      	blx	r3
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]
      break;
 800719c:	e04a      	b.n	8007234 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	2b09      	cmp	r3, #9
 80071a4:	d83b      	bhi.n	800721e <USBD_StdDevReq+0xc2>
 80071a6:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <USBD_StdDevReq+0x50>)
 80071a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ac:	08007201 	.word	0x08007201
 80071b0:	08007215 	.word	0x08007215
 80071b4:	0800721f 	.word	0x0800721f
 80071b8:	0800720b 	.word	0x0800720b
 80071bc:	0800721f 	.word	0x0800721f
 80071c0:	080071df 	.word	0x080071df
 80071c4:	080071d5 	.word	0x080071d5
 80071c8:	0800721f 	.word	0x0800721f
 80071cc:	080071f7 	.word	0x080071f7
 80071d0:	080071e9 	.word	0x080071e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa3c 	bl	8007654 <USBD_GetDescriptor>
          break;
 80071dc:	e024      	b.n	8007228 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fbcb 	bl	800797c <USBD_SetAddress>
          break;
 80071e6:	e01f      	b.n	8007228 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fc0a 	bl	8007a04 <USBD_SetConfig>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]
          break;
 80071f4:	e018      	b.n	8007228 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fcad 	bl	8007b58 <USBD_GetConfig>
          break;
 80071fe:	e013      	b.n	8007228 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fcde 	bl	8007bc4 <USBD_GetStatus>
          break;
 8007208:	e00e      	b.n	8007228 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fd0d 	bl	8007c2c <USBD_SetFeature>
          break;
 8007212:	e009      	b.n	8007228 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fd31 	bl	8007c7e <USBD_ClrFeature>
          break;
 800721c:	e004      	b.n	8007228 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fd88 	bl	8007d36 <USBD_CtlError>
          break;
 8007226:	bf00      	nop
      }
      break;
 8007228:	e004      	b.n	8007234 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fd82 	bl	8007d36 <USBD_CtlError>
      break;
 8007232:	bf00      	nop
  }

  return ret;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop

08007240 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d005      	beq.n	8007266 <USBD_StdItfReq+0x26>
 800725a:	2b40      	cmp	r3, #64	; 0x40
 800725c:	d852      	bhi.n	8007304 <USBD_StdItfReq+0xc4>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <USBD_StdItfReq+0x26>
 8007262:	2b20      	cmp	r3, #32
 8007264:	d14e      	bne.n	8007304 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	b2db      	uxtb	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	2b02      	cmp	r3, #2
 8007272:	d840      	bhi.n	80072f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	889b      	ldrh	r3, [r3, #4]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b01      	cmp	r3, #1
 800727c:	d836      	bhi.n	80072ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	889b      	ldrh	r3, [r3, #4]
 8007282:	b2db      	uxtb	r3, r3
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff fed9 	bl	800703e <USBD_CoreFindIF>
 800728c:	4603      	mov	r3, r0
 800728e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2bff      	cmp	r3, #255	; 0xff
 8007294:	d01d      	beq.n	80072d2 <USBD_StdItfReq+0x92>
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d11a      	bne.n	80072d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800729c:	7bba      	ldrb	r2, [r7, #14]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	32ae      	adds	r2, #174	; 0xae
 80072a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00f      	beq.n	80072cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80072ac:	7bba      	ldrb	r2, [r7, #14]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072b4:	7bba      	ldrb	r2, [r7, #14]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	32ae      	adds	r2, #174	; 0xae
 80072ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
 80072c6:	4603      	mov	r3, r0
 80072c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80072ca:	e004      	b.n	80072d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80072cc:	2303      	movs	r3, #3
 80072ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80072d0:	e001      	b.n	80072d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80072d2:	2303      	movs	r3, #3
 80072d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	88db      	ldrh	r3, [r3, #6]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d110      	bne.n	8007300 <USBD_StdItfReq+0xc0>
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10d      	bne.n	8007300 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fdf1 	bl	8007ecc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072ea:	e009      	b.n	8007300 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fd21 	bl	8007d36 <USBD_CtlError>
          break;
 80072f4:	e004      	b.n	8007300 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fd1c 	bl	8007d36 <USBD_CtlError>
          break;
 80072fe:	e000      	b.n	8007302 <USBD_StdItfReq+0xc2>
          break;
 8007300:	bf00      	nop
      }
      break;
 8007302:	e004      	b.n	800730e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fd15 	bl	8007d36 <USBD_CtlError>
      break;
 800730c:	bf00      	nop
  }

  return ret;
 800730e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	889b      	ldrh	r3, [r3, #4]
 800732a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	d007      	beq.n	8007348 <USBD_StdEPReq+0x30>
 8007338:	2b40      	cmp	r3, #64	; 0x40
 800733a:	f200 817f 	bhi.w	800763c <USBD_StdEPReq+0x324>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d02a      	beq.n	8007398 <USBD_StdEPReq+0x80>
 8007342:	2b20      	cmp	r3, #32
 8007344:	f040 817a 	bne.w	800763c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff fe83 	bl	8007058 <USBD_CoreFindEP>
 8007352:	4603      	mov	r3, r0
 8007354:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007356:	7b7b      	ldrb	r3, [r7, #13]
 8007358:	2bff      	cmp	r3, #255	; 0xff
 800735a:	f000 8174 	beq.w	8007646 <USBD_StdEPReq+0x32e>
 800735e:	7b7b      	ldrb	r3, [r7, #13]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f040 8170 	bne.w	8007646 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007366:	7b7a      	ldrb	r2, [r7, #13]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800736e:	7b7a      	ldrb	r2, [r7, #13]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	32ae      	adds	r2, #174	; 0xae
 8007374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 8163 	beq.w	8007646 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007380:	7b7a      	ldrb	r2, [r7, #13]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	32ae      	adds	r2, #174	; 0xae
 8007386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
 8007392:	4603      	mov	r3, r0
 8007394:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007396:	e156      	b.n	8007646 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	785b      	ldrb	r3, [r3, #1]
 800739c:	2b03      	cmp	r3, #3
 800739e:	d008      	beq.n	80073b2 <USBD_StdEPReq+0x9a>
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	f300 8145 	bgt.w	8007630 <USBD_StdEPReq+0x318>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 809b 	beq.w	80074e2 <USBD_StdEPReq+0x1ca>
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d03c      	beq.n	800742a <USBD_StdEPReq+0x112>
 80073b0:	e13e      	b.n	8007630 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d002      	beq.n	80073c4 <USBD_StdEPReq+0xac>
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d016      	beq.n	80073f0 <USBD_StdEPReq+0xd8>
 80073c2:	e02c      	b.n	800741e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00d      	beq.n	80073e6 <USBD_StdEPReq+0xce>
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b80      	cmp	r3, #128	; 0x80
 80073ce:	d00a      	beq.n	80073e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f003 ffc9 	bl	800b36c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073da:	2180      	movs	r1, #128	; 0x80
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f003 ffc5 	bl	800b36c <USBD_LL_StallEP>
 80073e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073e4:	e020      	b.n	8007428 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fca4 	bl	8007d36 <USBD_CtlError>
              break;
 80073ee:	e01b      	b.n	8007428 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	885b      	ldrh	r3, [r3, #2]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10e      	bne.n	8007416 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <USBD_StdEPReq+0xfe>
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	2b80      	cmp	r3, #128	; 0x80
 8007402:	d008      	beq.n	8007416 <USBD_StdEPReq+0xfe>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	88db      	ldrh	r3, [r3, #6]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d104      	bne.n	8007416 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f003 ffab 	bl	800b36c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fd58 	bl	8007ecc <USBD_CtlSendStatus>

              break;
 800741c:	e004      	b.n	8007428 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fc88 	bl	8007d36 <USBD_CtlError>
              break;
 8007426:	bf00      	nop
          }
          break;
 8007428:	e107      	b.n	800763a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d002      	beq.n	800743c <USBD_StdEPReq+0x124>
 8007436:	2b03      	cmp	r3, #3
 8007438:	d016      	beq.n	8007468 <USBD_StdEPReq+0x150>
 800743a:	e04b      	b.n	80074d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00d      	beq.n	800745e <USBD_StdEPReq+0x146>
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	2b80      	cmp	r3, #128	; 0x80
 8007446:	d00a      	beq.n	800745e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f003 ff8d 	bl	800b36c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007452:	2180      	movs	r1, #128	; 0x80
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f003 ff89 	bl	800b36c <USBD_LL_StallEP>
 800745a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800745c:	e040      	b.n	80074e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fc68 	bl	8007d36 <USBD_CtlError>
              break;
 8007466:	e03b      	b.n	80074e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	885b      	ldrh	r3, [r3, #2]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d136      	bne.n	80074de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f003 ffaa 	bl	800b3d8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fd21 	bl	8007ecc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff fde2 	bl	8007058 <USBD_CoreFindEP>
 8007494:	4603      	mov	r3, r0
 8007496:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007498:	7b7b      	ldrb	r3, [r7, #13]
 800749a:	2bff      	cmp	r3, #255	; 0xff
 800749c:	d01f      	beq.n	80074de <USBD_StdEPReq+0x1c6>
 800749e:	7b7b      	ldrb	r3, [r7, #13]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d11c      	bne.n	80074de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80074a4:	7b7a      	ldrb	r2, [r7, #13]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80074ac:	7b7a      	ldrb	r2, [r7, #13]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	32ae      	adds	r2, #174	; 0xae
 80074b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d010      	beq.n	80074de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80074bc:	7b7a      	ldrb	r2, [r7, #13]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	32ae      	adds	r2, #174	; 0xae
 80074c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80074d2:	e004      	b.n	80074de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fc2d 	bl	8007d36 <USBD_CtlError>
              break;
 80074dc:	e000      	b.n	80074e0 <USBD_StdEPReq+0x1c8>
              break;
 80074de:	bf00      	nop
          }
          break;
 80074e0:	e0ab      	b.n	800763a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d002      	beq.n	80074f4 <USBD_StdEPReq+0x1dc>
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d032      	beq.n	8007558 <USBD_StdEPReq+0x240>
 80074f2:	e097      	b.n	8007624 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d007      	beq.n	800750a <USBD_StdEPReq+0x1f2>
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b80      	cmp	r3, #128	; 0x80
 80074fe:	d004      	beq.n	800750a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fc17 	bl	8007d36 <USBD_CtlError>
                break;
 8007508:	e091      	b.n	800762e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800750a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800750e:	2b00      	cmp	r3, #0
 8007510:	da0b      	bge.n	800752a <USBD_StdEPReq+0x212>
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007518:	4613      	mov	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	3310      	adds	r3, #16
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	4413      	add	r3, r2
 8007526:	3304      	adds	r3, #4
 8007528:	e00b      	b.n	8007542 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	4413      	add	r3, r2
 8007540:	3304      	adds	r3, #4
 8007542:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2202      	movs	r2, #2
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fc61 	bl	8007e18 <USBD_CtlSendData>
              break;
 8007556:	e06a      	b.n	800762e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800755c:	2b00      	cmp	r3, #0
 800755e:	da11      	bge.n	8007584 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	f003 020f 	and.w	r2, r3, #15
 8007566:	6879      	ldr	r1, [r7, #4]
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	440b      	add	r3, r1
 8007572:	3324      	adds	r3, #36	; 0x24
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d117      	bne.n	80075aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fbda 	bl	8007d36 <USBD_CtlError>
                  break;
 8007582:	e054      	b.n	800762e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	f003 020f 	and.w	r2, r3, #15
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	440b      	add	r3, r1
 8007596:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d104      	bne.n	80075aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fbc7 	bl	8007d36 <USBD_CtlError>
                  break;
 80075a8:	e041      	b.n	800762e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da0b      	bge.n	80075ca <USBD_StdEPReq+0x2b2>
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	3310      	adds	r3, #16
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	4413      	add	r3, r2
 80075c6:	3304      	adds	r3, #4
 80075c8:	e00b      	b.n	80075e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	3304      	adds	r3, #4
 80075e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <USBD_StdEPReq+0x2d8>
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d103      	bne.n	80075f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	e00e      	b.n	8007616 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f003 ff21 	bl	800b444 <USBD_LL_IsStallEP>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2201      	movs	r2, #1
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e002      	b.n	8007616 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2202      	movs	r2, #2
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fbfb 	bl	8007e18 <USBD_CtlSendData>
              break;
 8007622:	e004      	b.n	800762e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fb85 	bl	8007d36 <USBD_CtlError>
              break;
 800762c:	bf00      	nop
          }
          break;
 800762e:	e004      	b.n	800763a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fb7f 	bl	8007d36 <USBD_CtlError>
          break;
 8007638:	bf00      	nop
      }
      break;
 800763a:	e005      	b.n	8007648 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fb79 	bl	8007d36 <USBD_CtlError>
      break;
 8007644:	e000      	b.n	8007648 <USBD_StdEPReq+0x330>
      break;
 8007646:	bf00      	nop
  }

  return ret;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	885b      	ldrh	r3, [r3, #2]
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	2b0e      	cmp	r3, #14
 8007676:	f200 8152 	bhi.w	800791e <USBD_GetDescriptor+0x2ca>
 800767a:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <USBD_GetDescriptor+0x2c>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	080076f1 	.word	0x080076f1
 8007684:	08007709 	.word	0x08007709
 8007688:	08007749 	.word	0x08007749
 800768c:	0800791f 	.word	0x0800791f
 8007690:	0800791f 	.word	0x0800791f
 8007694:	080078bf 	.word	0x080078bf
 8007698:	080078eb 	.word	0x080078eb
 800769c:	0800791f 	.word	0x0800791f
 80076a0:	0800791f 	.word	0x0800791f
 80076a4:	0800791f 	.word	0x0800791f
 80076a8:	0800791f 	.word	0x0800791f
 80076ac:	0800791f 	.word	0x0800791f
 80076b0:	0800791f 	.word	0x0800791f
 80076b4:	0800791f 	.word	0x0800791f
 80076b8:	080076bd 	.word	0x080076bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00b      	beq.n	80076e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	7c12      	ldrb	r2, [r2, #16]
 80076d4:	f107 0108 	add.w	r1, r7, #8
 80076d8:	4610      	mov	r0, r2
 80076da:	4798      	blx	r3
 80076dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076de:	e126      	b.n	800792e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fb27 	bl	8007d36 <USBD_CtlError>
        err++;
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	3301      	adds	r3, #1
 80076ec:	72fb      	strb	r3, [r7, #11]
      break;
 80076ee:	e11e      	b.n	800792e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	7c12      	ldrb	r2, [r2, #16]
 80076fc:	f107 0108 	add.w	r1, r7, #8
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
 8007704:	60f8      	str	r0, [r7, #12]
      break;
 8007706:	e112      	b.n	800792e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	7c1b      	ldrb	r3, [r3, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10d      	bne.n	800772c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007718:	f107 0208 	add.w	r2, r7, #8
 800771c:	4610      	mov	r0, r2
 800771e:	4798      	blx	r3
 8007720:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3301      	adds	r3, #1
 8007726:	2202      	movs	r2, #2
 8007728:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800772a:	e100      	b.n	800792e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	f107 0208 	add.w	r2, r7, #8
 8007738:	4610      	mov	r0, r2
 800773a:	4798      	blx	r3
 800773c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3301      	adds	r3, #1
 8007742:	2202      	movs	r2, #2
 8007744:	701a      	strb	r2, [r3, #0]
      break;
 8007746:	e0f2      	b.n	800792e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	885b      	ldrh	r3, [r3, #2]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b05      	cmp	r3, #5
 8007750:	f200 80ac 	bhi.w	80078ac <USBD_GetDescriptor+0x258>
 8007754:	a201      	add	r2, pc, #4	; (adr r2, 800775c <USBD_GetDescriptor+0x108>)
 8007756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775a:	bf00      	nop
 800775c:	08007775 	.word	0x08007775
 8007760:	080077a9 	.word	0x080077a9
 8007764:	080077dd 	.word	0x080077dd
 8007768:	08007811 	.word	0x08007811
 800776c:	08007845 	.word	0x08007845
 8007770:	08007879 	.word	0x08007879
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00b      	beq.n	8007798 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	7c12      	ldrb	r2, [r2, #16]
 800778c:	f107 0108 	add.w	r1, r7, #8
 8007790:	4610      	mov	r0, r2
 8007792:	4798      	blx	r3
 8007794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007796:	e091      	b.n	80078bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 facb 	bl	8007d36 <USBD_CtlError>
            err++;
 80077a0:	7afb      	ldrb	r3, [r7, #11]
 80077a2:	3301      	adds	r3, #1
 80077a4:	72fb      	strb	r3, [r7, #11]
          break;
 80077a6:	e089      	b.n	80078bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	7c12      	ldrb	r2, [r2, #16]
 80077c0:	f107 0108 	add.w	r1, r7, #8
 80077c4:	4610      	mov	r0, r2
 80077c6:	4798      	blx	r3
 80077c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ca:	e077      	b.n	80078bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fab1 	bl	8007d36 <USBD_CtlError>
            err++;
 80077d4:	7afb      	ldrb	r3, [r7, #11]
 80077d6:	3301      	adds	r3, #1
 80077d8:	72fb      	strb	r3, [r7, #11]
          break;
 80077da:	e06f      	b.n	80078bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00b      	beq.n	8007800 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	7c12      	ldrb	r2, [r2, #16]
 80077f4:	f107 0108 	add.w	r1, r7, #8
 80077f8:	4610      	mov	r0, r2
 80077fa:	4798      	blx	r3
 80077fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fe:	e05d      	b.n	80078bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa97 	bl	8007d36 <USBD_CtlError>
            err++;
 8007808:	7afb      	ldrb	r3, [r7, #11]
 800780a:	3301      	adds	r3, #1
 800780c:	72fb      	strb	r3, [r7, #11]
          break;
 800780e:	e055      	b.n	80078bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	7c12      	ldrb	r2, [r2, #16]
 8007828:	f107 0108 	add.w	r1, r7, #8
 800782c:	4610      	mov	r0, r2
 800782e:	4798      	blx	r3
 8007830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007832:	e043      	b.n	80078bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa7d 	bl	8007d36 <USBD_CtlError>
            err++;
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	3301      	adds	r3, #1
 8007840:	72fb      	strb	r3, [r7, #11]
          break;
 8007842:	e03b      	b.n	80078bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00b      	beq.n	8007868 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	7c12      	ldrb	r2, [r2, #16]
 800785c:	f107 0108 	add.w	r1, r7, #8
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007866:	e029      	b.n	80078bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fa63 	bl	8007d36 <USBD_CtlError>
            err++;
 8007870:	7afb      	ldrb	r3, [r7, #11]
 8007872:	3301      	adds	r3, #1
 8007874:	72fb      	strb	r3, [r7, #11]
          break;
 8007876:	e021      	b.n	80078bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00b      	beq.n	800789c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	7c12      	ldrb	r2, [r2, #16]
 8007890:	f107 0108 	add.w	r1, r7, #8
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800789a:	e00f      	b.n	80078bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fa49 	bl	8007d36 <USBD_CtlError>
            err++;
 80078a4:	7afb      	ldrb	r3, [r7, #11]
 80078a6:	3301      	adds	r3, #1
 80078a8:	72fb      	strb	r3, [r7, #11]
          break;
 80078aa:	e007      	b.n	80078bc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa41 	bl	8007d36 <USBD_CtlError>
          err++;
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	3301      	adds	r3, #1
 80078b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80078ba:	bf00      	nop
      }
      break;
 80078bc:	e037      	b.n	800792e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	7c1b      	ldrb	r3, [r3, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d109      	bne.n	80078da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ce:	f107 0208 	add.w	r2, r7, #8
 80078d2:	4610      	mov	r0, r2
 80078d4:	4798      	blx	r3
 80078d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078d8:	e029      	b.n	800792e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fa2a 	bl	8007d36 <USBD_CtlError>
        err++;
 80078e2:	7afb      	ldrb	r3, [r7, #11]
 80078e4:	3301      	adds	r3, #1
 80078e6:	72fb      	strb	r3, [r7, #11]
      break;
 80078e8:	e021      	b.n	800792e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	7c1b      	ldrb	r3, [r3, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10d      	bne.n	800790e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fa:	f107 0208 	add.w	r2, r7, #8
 80078fe:	4610      	mov	r0, r2
 8007900:	4798      	blx	r3
 8007902:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3301      	adds	r3, #1
 8007908:	2207      	movs	r2, #7
 800790a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800790c:	e00f      	b.n	800792e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fa10 	bl	8007d36 <USBD_CtlError>
        err++;
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	3301      	adds	r3, #1
 800791a:	72fb      	strb	r3, [r7, #11]
      break;
 800791c:	e007      	b.n	800792e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fa08 	bl	8007d36 <USBD_CtlError>
      err++;
 8007926:	7afb      	ldrb	r3, [r7, #11]
 8007928:	3301      	adds	r3, #1
 800792a:	72fb      	strb	r3, [r7, #11]
      break;
 800792c:	bf00      	nop
  }

  if (err != 0U)
 800792e:	7afb      	ldrb	r3, [r7, #11]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d11e      	bne.n	8007972 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	88db      	ldrh	r3, [r3, #6]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d016      	beq.n	800796a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800793c:	893b      	ldrh	r3, [r7, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00e      	beq.n	8007960 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	88da      	ldrh	r2, [r3, #6]
 8007946:	893b      	ldrh	r3, [r7, #8]
 8007948:	4293      	cmp	r3, r2
 800794a:	bf28      	it	cs
 800794c:	4613      	movcs	r3, r2
 800794e:	b29b      	uxth	r3, r3
 8007950:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007952:	893b      	ldrh	r3, [r7, #8]
 8007954:	461a      	mov	r2, r3
 8007956:	68f9      	ldr	r1, [r7, #12]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fa5d 	bl	8007e18 <USBD_CtlSendData>
 800795e:	e009      	b.n	8007974 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f9e7 	bl	8007d36 <USBD_CtlError>
 8007968:	e004      	b.n	8007974 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 faae 	bl	8007ecc <USBD_CtlSendStatus>
 8007970:	e000      	b.n	8007974 <USBD_GetDescriptor+0x320>
    return;
 8007972:	bf00      	nop
  }
}
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop

0800797c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	889b      	ldrh	r3, [r3, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d131      	bne.n	80079f2 <USBD_SetAddress+0x76>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	88db      	ldrh	r3, [r3, #6]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d12d      	bne.n	80079f2 <USBD_SetAddress+0x76>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	885b      	ldrh	r3, [r3, #2]
 800799a:	2b7f      	cmp	r3, #127	; 0x7f
 800799c:	d829      	bhi.n	80079f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	885b      	ldrh	r3, [r3, #2]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d104      	bne.n	80079c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f9bc 	bl	8007d36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079be:	e01d      	b.n	80079fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	7bfa      	ldrb	r2, [r7, #15]
 80079c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f003 fd65 	bl	800b49c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa7a 	bl	8007ecc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2202      	movs	r2, #2
 80079e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e6:	e009      	b.n	80079fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f0:	e004      	b.n	80079fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f99e 	bl	8007d36 <USBD_CtlError>
  }
}
 80079fa:	bf00      	nop
 80079fc:	bf00      	nop
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	885b      	ldrh	r3, [r3, #2]
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	4b4e      	ldr	r3, [pc, #312]	; (8007b54 <USBD_SetConfig+0x150>)
 8007a1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a1c:	4b4d      	ldr	r3, [pc, #308]	; (8007b54 <USBD_SetConfig+0x150>)
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d905      	bls.n	8007a30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f985 	bl	8007d36 <USBD_CtlError>
    return USBD_FAIL;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e08c      	b.n	8007b4a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d002      	beq.n	8007a42 <USBD_SetConfig+0x3e>
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d029      	beq.n	8007a94 <USBD_SetConfig+0x90>
 8007a40:	e075      	b.n	8007b2e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a42:	4b44      	ldr	r3, [pc, #272]	; (8007b54 <USBD_SetConfig+0x150>)
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d020      	beq.n	8007a8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007a4a:	4b42      	ldr	r3, [pc, #264]	; (8007b54 <USBD_SetConfig+0x150>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a54:	4b3f      	ldr	r3, [pc, #252]	; (8007b54 <USBD_SetConfig+0x150>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7fe ffb7 	bl	80069ce <USBD_SetClassConfig>
 8007a60:	4603      	mov	r3, r0
 8007a62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f962 	bl	8007d36 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a7a:	e065      	b.n	8007b48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fa25 	bl	8007ecc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2203      	movs	r2, #3
 8007a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a8a:	e05d      	b.n	8007b48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fa1d 	bl	8007ecc <USBD_CtlSendStatus>
      break;
 8007a92:	e059      	b.n	8007b48 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a94:	4b2f      	ldr	r3, [pc, #188]	; (8007b54 <USBD_SetConfig+0x150>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d112      	bne.n	8007ac2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007aa4:	4b2b      	ldr	r3, [pc, #172]	; (8007b54 <USBD_SetConfig+0x150>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aae:	4b29      	ldr	r3, [pc, #164]	; (8007b54 <USBD_SetConfig+0x150>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7fe ffa6 	bl	8006a06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fa06 	bl	8007ecc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ac0:	e042      	b.n	8007b48 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007ac2:	4b24      	ldr	r3, [pc, #144]	; (8007b54 <USBD_SetConfig+0x150>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d02a      	beq.n	8007b26 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7fe ff94 	bl	8006a06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ade:	4b1d      	ldr	r3, [pc, #116]	; (8007b54 <USBD_SetConfig+0x150>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ae8:	4b1a      	ldr	r3, [pc, #104]	; (8007b54 <USBD_SetConfig+0x150>)
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7fe ff6d 	bl	80069ce <USBD_SetClassConfig>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00f      	beq.n	8007b1e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f918 	bl	8007d36 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7fe ff79 	bl	8006a06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b1c:	e014      	b.n	8007b48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f9d4 	bl	8007ecc <USBD_CtlSendStatus>
      break;
 8007b24:	e010      	b.n	8007b48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f9d0 	bl	8007ecc <USBD_CtlSendStatus>
      break;
 8007b2c:	e00c      	b.n	8007b48 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f900 	bl	8007d36 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b36:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <USBD_SetConfig+0x150>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7fe ff62 	bl	8006a06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b42:	2303      	movs	r3, #3
 8007b44:	73fb      	strb	r3, [r7, #15]
      break;
 8007b46:	bf00      	nop
  }

  return ret;
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20000258 	.word	0x20000258

08007b58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	88db      	ldrh	r3, [r3, #6]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d004      	beq.n	8007b74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f8e2 	bl	8007d36 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b72:	e023      	b.n	8007bbc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	dc02      	bgt.n	8007b86 <USBD_GetConfig+0x2e>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dc03      	bgt.n	8007b8c <USBD_GetConfig+0x34>
 8007b84:	e015      	b.n	8007bb2 <USBD_GetConfig+0x5a>
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d00b      	beq.n	8007ba2 <USBD_GetConfig+0x4a>
 8007b8a:	e012      	b.n	8007bb2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3308      	adds	r3, #8
 8007b96:	2201      	movs	r2, #1
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f93c 	bl	8007e18 <USBD_CtlSendData>
        break;
 8007ba0:	e00c      	b.n	8007bbc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f934 	bl	8007e18 <USBD_CtlSendData>
        break;
 8007bb0:	e004      	b.n	8007bbc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f8be 	bl	8007d36 <USBD_CtlError>
        break;
 8007bba:	bf00      	nop
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d81e      	bhi.n	8007c1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	88db      	ldrh	r3, [r3, #6]
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d004      	beq.n	8007bee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f8a5 	bl	8007d36 <USBD_CtlError>
        break;
 8007bec:	e01a      	b.n	8007c24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f043 0202 	orr.w	r2, r3, #2
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	330c      	adds	r3, #12
 8007c0e:	2202      	movs	r2, #2
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f900 	bl	8007e18 <USBD_CtlSendData>
      break;
 8007c18:	e004      	b.n	8007c24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f88a 	bl	8007d36 <USBD_CtlError>
      break;
 8007c22:	bf00      	nop
  }
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	885b      	ldrh	r3, [r3, #2]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d107      	bne.n	8007c4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f940 	bl	8007ecc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007c4c:	e013      	b.n	8007c76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	885b      	ldrh	r3, [r3, #2]
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d10b      	bne.n	8007c6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	889b      	ldrh	r3, [r3, #4]
 8007c5a:	0a1b      	lsrs	r3, r3, #8
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f930 	bl	8007ecc <USBD_CtlSendStatus>
}
 8007c6c:	e003      	b.n	8007c76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f860 	bl	8007d36 <USBD_CtlError>
}
 8007c76:	bf00      	nop
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	3b01      	subs	r3, #1
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d80b      	bhi.n	8007cae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	885b      	ldrh	r3, [r3, #2]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d10c      	bne.n	8007cb8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f910 	bl	8007ecc <USBD_CtlSendStatus>
      }
      break;
 8007cac:	e004      	b.n	8007cb8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f840 	bl	8007d36 <USBD_CtlError>
      break;
 8007cb6:	e000      	b.n	8007cba <USBD_ClrFeature+0x3c>
      break;
 8007cb8:	bf00      	nop
  }
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	781a      	ldrb	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	781a      	ldrb	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7ff fa17 	bl	8007120 <SWAPBYTE>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3301      	adds	r3, #1
 8007d04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f7ff fa0a 	bl	8007120 <SWAPBYTE>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	461a      	mov	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3301      	adds	r3, #1
 8007d18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f7ff f9fd 	bl	8007120 <SWAPBYTE>
 8007d26:	4603      	mov	r3, r0
 8007d28:	461a      	mov	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	80da      	strh	r2, [r3, #6]
}
 8007d2e:	bf00      	nop
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d40:	2180      	movs	r1, #128	; 0x80
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f003 fb12 	bl	800b36c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d48:	2100      	movs	r1, #0
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f003 fb0e 	bl	800b36c <USBD_LL_StallEP>
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d036      	beq.n	8007ddc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d72:	6938      	ldr	r0, [r7, #16]
 8007d74:	f000 f836 	bl	8007de4 <USBD_GetLen>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	7812      	ldrb	r2, [r2, #0]
 8007d90:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	3301      	adds	r3, #1
 8007d96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	2203      	movs	r2, #3
 8007da0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	3301      	adds	r3, #1
 8007da6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007da8:	e013      	b.n	8007dd2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	4413      	add	r3, r2
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	7812      	ldrb	r2, [r2, #0]
 8007db4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	3301      	adds	r3, #1
 8007dba:	613b      	str	r3, [r7, #16]
    idx++;
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	2200      	movs	r2, #0
 8007dca:	701a      	strb	r2, [r3, #0]
    idx++;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e7      	bne.n	8007daa <USBD_GetString+0x52>
 8007dda:	e000      	b.n	8007dde <USBD_GetString+0x86>
    return;
 8007ddc:	bf00      	nop
  }
}
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007df4:	e005      	b.n	8007e02 <USBD_GetLen+0x1e>
  {
    len++;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1f5      	bne.n	8007df6 <USBD_GetLen+0x12>
  }

  return len;
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f003 fb62 	bl	800b508 <USBD_LL_Transmit>

  return USBD_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	2100      	movs	r1, #0
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f003 fb51 	bl	800b508 <USBD_LL_Transmit>

  return USBD_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2203      	movs	r2, #3
 8007e80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f003 fb6c 	bl	800b578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	2100      	movs	r1, #0
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f003 fb5b 	bl	800b578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007edc:	2300      	movs	r3, #0
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f003 fb10 	bl	800b508 <USBD_LL_Transmit>

  return USBD_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2205      	movs	r2, #5
 8007efe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f02:	2300      	movs	r3, #0
 8007f04:	2200      	movs	r2, #0
 8007f06:	2100      	movs	r1, #0
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f003 fb35 	bl	800b578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <__NVIC_SetPriority>:
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	6039      	str	r1, [r7, #0]
 8007f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	db0a      	blt.n	8007f42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	490c      	ldr	r1, [pc, #48]	; (8007f64 <__NVIC_SetPriority+0x4c>)
 8007f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f36:	0112      	lsls	r2, r2, #4
 8007f38:	b2d2      	uxtb	r2, r2
 8007f3a:	440b      	add	r3, r1
 8007f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f40:	e00a      	b.n	8007f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	b2da      	uxtb	r2, r3
 8007f46:	4908      	ldr	r1, [pc, #32]	; (8007f68 <__NVIC_SetPriority+0x50>)
 8007f48:	79fb      	ldrb	r3, [r7, #7]
 8007f4a:	f003 030f 	and.w	r3, r3, #15
 8007f4e:	3b04      	subs	r3, #4
 8007f50:	0112      	lsls	r2, r2, #4
 8007f52:	b2d2      	uxtb	r2, r2
 8007f54:	440b      	add	r3, r1
 8007f56:	761a      	strb	r2, [r3, #24]
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	e000e100 	.word	0xe000e100
 8007f68:	e000ed00 	.word	0xe000ed00

08007f6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007f70:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <SysTick_Handler+0x1c>)
 8007f72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007f74:	f001 fd28 	bl	80099c8 <xTaskGetSchedulerState>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d001      	beq.n	8007f82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f7e:	f002 fb13 	bl	800a5a8 <xPortSysTickHandler>
  }
}
 8007f82:	bf00      	nop
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	e000e010 	.word	0xe000e010

08007f8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f90:	2100      	movs	r1, #0
 8007f92:	f06f 0004 	mvn.w	r0, #4
 8007f96:	f7ff ffbf 	bl	8007f18 <__NVIC_SetPriority>
#endif
}
 8007f9a:	bf00      	nop
 8007f9c:	bd80      	pop	{r7, pc}
	...

08007fa0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fa6:	f3ef 8305 	mrs	r3, IPSR
 8007faa:	603b      	str	r3, [r7, #0]
  return(result);
 8007fac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007fb2:	f06f 0305 	mvn.w	r3, #5
 8007fb6:	607b      	str	r3, [r7, #4]
 8007fb8:	e00c      	b.n	8007fd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007fba:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <osKernelInitialize+0x44>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d105      	bne.n	8007fce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007fc2:	4b08      	ldr	r3, [pc, #32]	; (8007fe4 <osKernelInitialize+0x44>)
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	607b      	str	r3, [r7, #4]
 8007fcc:	e002      	b.n	8007fd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007fce:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fd4:	687b      	ldr	r3, [r7, #4]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	2000025c 	.word	0x2000025c

08007fe8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fee:	f3ef 8305 	mrs	r3, IPSR
 8007ff2:	603b      	str	r3, [r7, #0]
  return(result);
 8007ff4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007ffa:	f06f 0305 	mvn.w	r3, #5
 8007ffe:	607b      	str	r3, [r7, #4]
 8008000:	e010      	b.n	8008024 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008002:	4b0b      	ldr	r3, [pc, #44]	; (8008030 <osKernelStart+0x48>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d109      	bne.n	800801e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800800a:	f7ff ffbf 	bl	8007f8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800800e:	4b08      	ldr	r3, [pc, #32]	; (8008030 <osKernelStart+0x48>)
 8008010:	2202      	movs	r2, #2
 8008012:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008014:	f001 f87c 	bl	8009110 <vTaskStartScheduler>
      stat = osOK;
 8008018:	2300      	movs	r3, #0
 800801a:	607b      	str	r3, [r7, #4]
 800801c:	e002      	b.n	8008024 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800801e:	f04f 33ff 	mov.w	r3, #4294967295
 8008022:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008024:	687b      	ldr	r3, [r7, #4]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	2000025c 	.word	0x2000025c

08008034 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008034:	b580      	push	{r7, lr}
 8008036:	b08e      	sub	sp, #56	; 0x38
 8008038:	af04      	add	r7, sp, #16
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008040:	2300      	movs	r3, #0
 8008042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008044:	f3ef 8305 	mrs	r3, IPSR
 8008048:	617b      	str	r3, [r7, #20]
  return(result);
 800804a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800804c:	2b00      	cmp	r3, #0
 800804e:	d17e      	bne.n	800814e <osThreadNew+0x11a>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d07b      	beq.n	800814e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008056:	2380      	movs	r3, #128	; 0x80
 8008058:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800805a:	2318      	movs	r3, #24
 800805c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008062:	f04f 33ff 	mov.w	r3, #4294967295
 8008066:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d045      	beq.n	80080fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d002      	beq.n	800807c <osThreadNew+0x48>
        name = attr->name;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d008      	beq.n	80080a2 <osThreadNew+0x6e>
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	2b38      	cmp	r3, #56	; 0x38
 8008094:	d805      	bhi.n	80080a2 <osThreadNew+0x6e>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <osThreadNew+0x72>
        return (NULL);
 80080a2:	2300      	movs	r3, #0
 80080a4:	e054      	b.n	8008150 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	089b      	lsrs	r3, r3, #2
 80080b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00e      	beq.n	80080dc <osThreadNew+0xa8>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	2ba7      	cmp	r3, #167	; 0xa7
 80080c4:	d90a      	bls.n	80080dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d006      	beq.n	80080dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <osThreadNew+0xa8>
        mem = 1;
 80080d6:	2301      	movs	r3, #1
 80080d8:	61bb      	str	r3, [r7, #24]
 80080da:	e010      	b.n	80080fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10c      	bne.n	80080fe <osThreadNew+0xca>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d108      	bne.n	80080fe <osThreadNew+0xca>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d104      	bne.n	80080fe <osThreadNew+0xca>
          mem = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	61bb      	str	r3, [r7, #24]
 80080f8:	e001      	b.n	80080fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d110      	bne.n	8008126 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800810c:	9202      	str	r2, [sp, #8]
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	6a3a      	ldr	r2, [r7, #32]
 8008118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 fe0c 	bl	8008d38 <xTaskCreateStatic>
 8008120:	4603      	mov	r3, r0
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	e013      	b.n	800814e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d110      	bne.n	800814e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	b29a      	uxth	r2, r3
 8008130:	f107 0310 	add.w	r3, r7, #16
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 fe57 	bl	8008df2 <xTaskCreate>
 8008144:	4603      	mov	r3, r0
 8008146:	2b01      	cmp	r3, #1
 8008148:	d001      	beq.n	800814e <osThreadNew+0x11a>
            hTask = NULL;
 800814a:	2300      	movs	r3, #0
 800814c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800814e:	693b      	ldr	r3, [r7, #16]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3728      	adds	r7, #40	; 0x28
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008160:	f3ef 8305 	mrs	r3, IPSR
 8008164:	60bb      	str	r3, [r7, #8]
  return(result);
 8008166:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <osDelay+0x1c>
    stat = osErrorISR;
 800816c:	f06f 0305 	mvn.w	r3, #5
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	e007      	b.n	8008184 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008174:	2300      	movs	r3, #0
 8008176:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <osDelay+0x2c>
      vTaskDelay(ticks);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 ff92 	bl	80090a8 <vTaskDelay>
    }
  }

  return (stat);
 8008184:	68fb      	ldr	r3, [r7, #12]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4a07      	ldr	r2, [pc, #28]	; (80081bc <vApplicationGetIdleTaskMemory+0x2c>)
 80081a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	4a06      	ldr	r2, [pc, #24]	; (80081c0 <vApplicationGetIdleTaskMemory+0x30>)
 80081a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2280      	movs	r2, #128	; 0x80
 80081ac:	601a      	str	r2, [r3, #0]
}
 80081ae:	bf00      	nop
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	20000260 	.word	0x20000260
 80081c0:	20000308 	.word	0x20000308

080081c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4a07      	ldr	r2, [pc, #28]	; (80081f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80081d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4a06      	ldr	r2, [pc, #24]	; (80081f4 <vApplicationGetTimerTaskMemory+0x30>)
 80081da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081e2:	601a      	str	r2, [r3, #0]
}
 80081e4:	bf00      	nop
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	20000508 	.word	0x20000508
 80081f4:	200005b0 	.word	0x200005b0

080081f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f103 0208 	add.w	r2, r3, #8
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f04f 32ff 	mov.w	r2, #4294967295
 8008210:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f103 0208 	add.w	r2, r3, #8
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f103 0208 	add.w	r2, r3, #8
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008246:	bf00      	nop
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008252:	b480      	push	{r7}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	689a      	ldr	r2, [r3, #8]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	601a      	str	r2, [r3, #0]
}
 800828e:	bf00      	nop
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800829a:	b480      	push	{r7}
 800829c:	b085      	sub	sp, #20
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d103      	bne.n	80082ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	e00c      	b.n	80082d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3308      	adds	r3, #8
 80082be:	60fb      	str	r3, [r7, #12]
 80082c0:	e002      	b.n	80082c8 <vListInsert+0x2e>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	60fb      	str	r3, [r7, #12]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d2f6      	bcs.n	80082c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	601a      	str	r2, [r3, #0]
}
 8008300:	bf00      	nop
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	6892      	ldr	r2, [r2, #8]
 8008322:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6852      	ldr	r2, [r2, #4]
 800832c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	429a      	cmp	r2, r3
 8008336:	d103      	bne.n	8008340 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689a      	ldr	r2, [r3, #8]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	1e5a      	subs	r2, r3, #1
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10a      	bne.n	800838a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008386:	bf00      	nop
 8008388:	e7fe      	b.n	8008388 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800838a:	f002 f87b 	bl	800a484 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008396:	68f9      	ldr	r1, [r7, #12]
 8008398:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800839a:	fb01 f303 	mul.w	r3, r1, r3
 800839e:	441a      	add	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ba:	3b01      	subs	r3, #1
 80083bc:	68f9      	ldr	r1, [r7, #12]
 80083be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083c0:	fb01 f303 	mul.w	r3, r1, r3
 80083c4:	441a      	add	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	22ff      	movs	r2, #255	; 0xff
 80083ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	22ff      	movs	r2, #255	; 0xff
 80083d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d114      	bne.n	800840a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01a      	beq.n	800841e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3310      	adds	r3, #16
 80083ec:	4618      	mov	r0, r3
 80083ee:	f001 f929 	bl	8009644 <xTaskRemoveFromEventList>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d012      	beq.n	800841e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083f8:	4b0c      	ldr	r3, [pc, #48]	; (800842c <xQueueGenericReset+0xcc>)
 80083fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	e009      	b.n	800841e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3310      	adds	r3, #16
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff fef2 	bl	80081f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3324      	adds	r3, #36	; 0x24
 8008418:	4618      	mov	r0, r3
 800841a:	f7ff feed 	bl	80081f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800841e:	f002 f861 	bl	800a4e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008422:	2301      	movs	r3, #1
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	e000ed04 	.word	0xe000ed04

08008430 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08e      	sub	sp, #56	; 0x38
 8008434:	af02      	add	r7, sp, #8
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10a      	bne.n	800845a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008456:	bf00      	nop
 8008458:	e7fe      	b.n	8008458 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10a      	bne.n	8008476 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008472:	bf00      	nop
 8008474:	e7fe      	b.n	8008474 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <xQueueGenericCreateStatic+0x52>
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <xQueueGenericCreateStatic+0x56>
 8008482:	2301      	movs	r3, #1
 8008484:	e000      	b.n	8008488 <xQueueGenericCreateStatic+0x58>
 8008486:	2300      	movs	r3, #0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10a      	bne.n	80084a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	623b      	str	r3, [r7, #32]
}
 800849e:	bf00      	nop
 80084a0:	e7fe      	b.n	80084a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d102      	bne.n	80084ae <xQueueGenericCreateStatic+0x7e>
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <xQueueGenericCreateStatic+0x82>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e000      	b.n	80084b4 <xQueueGenericCreateStatic+0x84>
 80084b2:	2300      	movs	r3, #0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10a      	bne.n	80084ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	61fb      	str	r3, [r7, #28]
}
 80084ca:	bf00      	nop
 80084cc:	e7fe      	b.n	80084cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084ce:	2350      	movs	r3, #80	; 0x50
 80084d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b50      	cmp	r3, #80	; 0x50
 80084d6:	d00a      	beq.n	80084ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	61bb      	str	r3, [r7, #24]
}
 80084ea:	bf00      	nop
 80084ec:	e7fe      	b.n	80084ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00d      	beq.n	8008516 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008502:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	4613      	mov	r3, r2
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	68b9      	ldr	r1, [r7, #8]
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 f805 	bl	8008520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008518:	4618      	mov	r0, r3
 800851a:	3730      	adds	r7, #48	; 0x30
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
 800852c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d103      	bne.n	800853c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	69ba      	ldr	r2, [r7, #24]
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	e002      	b.n	8008542 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800854e:	2101      	movs	r1, #1
 8008550:	69b8      	ldr	r0, [r7, #24]
 8008552:	f7ff ff05 	bl	8008360 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	78fa      	ldrb	r2, [r7, #3]
 800855a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08e      	sub	sp, #56	; 0x38
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008576:	2300      	movs	r3, #0
 8008578:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10a      	bne.n	800859a <xQueueGenericSend+0x32>
	__asm volatile
 8008584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008596:	bf00      	nop
 8008598:	e7fe      	b.n	8008598 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d103      	bne.n	80085a8 <xQueueGenericSend+0x40>
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <xQueueGenericSend+0x44>
 80085a8:	2301      	movs	r3, #1
 80085aa:	e000      	b.n	80085ae <xQueueGenericSend+0x46>
 80085ac:	2300      	movs	r3, #0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <xQueueGenericSend+0x60>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d103      	bne.n	80085d6 <xQueueGenericSend+0x6e>
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d101      	bne.n	80085da <xQueueGenericSend+0x72>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e000      	b.n	80085dc <xQueueGenericSend+0x74>
 80085da:	2300      	movs	r3, #0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	623b      	str	r3, [r7, #32]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085f6:	f001 f9e7 	bl	80099c8 <xTaskGetSchedulerState>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d102      	bne.n	8008606 <xQueueGenericSend+0x9e>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <xQueueGenericSend+0xa2>
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <xQueueGenericSend+0xa4>
 800860a:	2300      	movs	r3, #0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <xQueueGenericSend+0xbe>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	61fb      	str	r3, [r7, #28]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008626:	f001 ff2d 	bl	800a484 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008632:	429a      	cmp	r2, r3
 8008634:	d302      	bcc.n	800863c <xQueueGenericSend+0xd4>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	2b02      	cmp	r3, #2
 800863a:	d129      	bne.n	8008690 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008642:	f000 fa0b 	bl	8008a5c <prvCopyDataToQueue>
 8008646:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	2b00      	cmp	r3, #0
 800864e:	d010      	beq.n	8008672 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008652:	3324      	adds	r3, #36	; 0x24
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fff5 	bl	8009644 <xTaskRemoveFromEventList>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d013      	beq.n	8008688 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008660:	4b3f      	ldr	r3, [pc, #252]	; (8008760 <xQueueGenericSend+0x1f8>)
 8008662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	e00a      	b.n	8008688 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d007      	beq.n	8008688 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008678:	4b39      	ldr	r3, [pc, #228]	; (8008760 <xQueueGenericSend+0x1f8>)
 800867a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867e:	601a      	str	r2, [r3, #0]
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008688:	f001 ff2c 	bl	800a4e4 <vPortExitCritical>
				return pdPASS;
 800868c:	2301      	movs	r3, #1
 800868e:	e063      	b.n	8008758 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d103      	bne.n	800869e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008696:	f001 ff25 	bl	800a4e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800869a:	2300      	movs	r3, #0
 800869c:	e05c      	b.n	8008758 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800869e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d106      	bne.n	80086b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086a4:	f107 0314 	add.w	r3, r7, #20
 80086a8:	4618      	mov	r0, r3
 80086aa:	f001 f82f 	bl	800970c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086ae:	2301      	movs	r3, #1
 80086b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086b2:	f001 ff17 	bl	800a4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086b6:	f000 fd9b 	bl	80091f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086ba:	f001 fee3 	bl	800a484 <vPortEnterCritical>
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086c4:	b25b      	sxtb	r3, r3
 80086c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ca:	d103      	bne.n	80086d4 <xQueueGenericSend+0x16c>
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086da:	b25b      	sxtb	r3, r3
 80086dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e0:	d103      	bne.n	80086ea <xQueueGenericSend+0x182>
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086ea:	f001 fefb 	bl	800a4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086ee:	1d3a      	adds	r2, r7, #4
 80086f0:	f107 0314 	add.w	r3, r7, #20
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f001 f81e 	bl	8009738 <xTaskCheckForTimeOut>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d124      	bne.n	800874c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008704:	f000 faa2 	bl	8008c4c <prvIsQueueFull>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d018      	beq.n	8008740 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	3310      	adds	r3, #16
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	4611      	mov	r1, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f000 ff44 	bl	80095a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800871c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800871e:	f000 fa2d 	bl	8008b7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008722:	f000 fd73 	bl	800920c <xTaskResumeAll>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	f47f af7c 	bne.w	8008626 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800872e:	4b0c      	ldr	r3, [pc, #48]	; (8008760 <xQueueGenericSend+0x1f8>)
 8008730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	e772      	b.n	8008626 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008742:	f000 fa1b 	bl	8008b7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008746:	f000 fd61 	bl	800920c <xTaskResumeAll>
 800874a:	e76c      	b.n	8008626 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800874c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800874e:	f000 fa15 	bl	8008b7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008752:	f000 fd5b 	bl	800920c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008756:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008758:	4618      	mov	r0, r3
 800875a:	3738      	adds	r7, #56	; 0x38
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	e000ed04 	.word	0xe000ed04

08008764 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b090      	sub	sp, #64	; 0x40
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10a      	bne.n	8008792 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800878e:	bf00      	nop
 8008790:	e7fe      	b.n	8008790 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d103      	bne.n	80087a0 <xQueueGenericSendFromISR+0x3c>
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <xQueueGenericSendFromISR+0x40>
 80087a0:	2301      	movs	r3, #1
 80087a2:	e000      	b.n	80087a6 <xQueueGenericSendFromISR+0x42>
 80087a4:	2300      	movs	r3, #0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10a      	bne.n	80087c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087bc:	bf00      	nop
 80087be:	e7fe      	b.n	80087be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d103      	bne.n	80087ce <xQueueGenericSendFromISR+0x6a>
 80087c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d101      	bne.n	80087d2 <xQueueGenericSendFromISR+0x6e>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <xQueueGenericSendFromISR+0x70>
 80087d2:	2300      	movs	r3, #0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10a      	bne.n	80087ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80087d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087dc:	f383 8811 	msr	BASEPRI, r3
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	623b      	str	r3, [r7, #32]
}
 80087ea:	bf00      	nop
 80087ec:	e7fe      	b.n	80087ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087ee:	f001 ff2b 	bl	800a648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087f2:	f3ef 8211 	mrs	r2, BASEPRI
 80087f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	61fa      	str	r2, [r7, #28]
 8008808:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800880a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800880c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008816:	429a      	cmp	r2, r3
 8008818:	d302      	bcc.n	8008820 <xQueueGenericSendFromISR+0xbc>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b02      	cmp	r3, #2
 800881e:	d12f      	bne.n	8008880 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008836:	f000 f911 	bl	8008a5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800883a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d112      	bne.n	800886a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	2b00      	cmp	r3, #0
 800884a:	d016      	beq.n	800887a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800884c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884e:	3324      	adds	r3, #36	; 0x24
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fef7 	bl	8009644 <xTaskRemoveFromEventList>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00e      	beq.n	800887a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	e007      	b.n	800887a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800886a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800886e:	3301      	adds	r3, #1
 8008870:	b2db      	uxtb	r3, r3
 8008872:	b25a      	sxtb	r2, r3
 8008874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800887a:	2301      	movs	r3, #1
 800887c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800887e:	e001      	b.n	8008884 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008880:	2300      	movs	r3, #0
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008886:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800888e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008892:	4618      	mov	r0, r3
 8008894:	3740      	adds	r7, #64	; 0x40
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08c      	sub	sp, #48	; 0x30
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80088a8:	2300      	movs	r3, #0
 80088aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10a      	bne.n	80088cc <xQueueReceive+0x30>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	623b      	str	r3, [r7, #32]
}
 80088c8:	bf00      	nop
 80088ca:	e7fe      	b.n	80088ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d103      	bne.n	80088da <xQueueReceive+0x3e>
 80088d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <xQueueReceive+0x42>
 80088da:	2301      	movs	r3, #1
 80088dc:	e000      	b.n	80088e0 <xQueueReceive+0x44>
 80088de:	2300      	movs	r3, #0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10a      	bne.n	80088fa <xQueueReceive+0x5e>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	61fb      	str	r3, [r7, #28]
}
 80088f6:	bf00      	nop
 80088f8:	e7fe      	b.n	80088f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088fa:	f001 f865 	bl	80099c8 <xTaskGetSchedulerState>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d102      	bne.n	800890a <xQueueReceive+0x6e>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <xQueueReceive+0x72>
 800890a:	2301      	movs	r3, #1
 800890c:	e000      	b.n	8008910 <xQueueReceive+0x74>
 800890e:	2300      	movs	r3, #0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10a      	bne.n	800892a <xQueueReceive+0x8e>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	61bb      	str	r3, [r7, #24]
}
 8008926:	bf00      	nop
 8008928:	e7fe      	b.n	8008928 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800892a:	f001 fdab 	bl	800a484 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800892e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	2b00      	cmp	r3, #0
 8008938:	d01f      	beq.n	800897a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800893e:	f000 f8f7 	bl	8008b30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	1e5a      	subs	r2, r3, #1
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00f      	beq.n	8008972 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	3310      	adds	r3, #16
 8008956:	4618      	mov	r0, r3
 8008958:	f000 fe74 	bl	8009644 <xTaskRemoveFromEventList>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008962:	4b3d      	ldr	r3, [pc, #244]	; (8008a58 <xQueueReceive+0x1bc>)
 8008964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008972:	f001 fdb7 	bl	800a4e4 <vPortExitCritical>
				return pdPASS;
 8008976:	2301      	movs	r3, #1
 8008978:	e069      	b.n	8008a4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d103      	bne.n	8008988 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008980:	f001 fdb0 	bl	800a4e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008984:	2300      	movs	r3, #0
 8008986:	e062      	b.n	8008a4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898a:	2b00      	cmp	r3, #0
 800898c:	d106      	bne.n	800899c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800898e:	f107 0310 	add.w	r3, r7, #16
 8008992:	4618      	mov	r0, r3
 8008994:	f000 feba 	bl	800970c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008998:	2301      	movs	r3, #1
 800899a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800899c:	f001 fda2 	bl	800a4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089a0:	f000 fc26 	bl	80091f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089a4:	f001 fd6e 	bl	800a484 <vPortEnterCritical>
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089ae:	b25b      	sxtb	r3, r3
 80089b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b4:	d103      	bne.n	80089be <xQueueReceive+0x122>
 80089b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089c4:	b25b      	sxtb	r3, r3
 80089c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ca:	d103      	bne.n	80089d4 <xQueueReceive+0x138>
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089d4:	f001 fd86 	bl	800a4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089d8:	1d3a      	adds	r2, r7, #4
 80089da:	f107 0310 	add.w	r3, r7, #16
 80089de:	4611      	mov	r1, r2
 80089e0:	4618      	mov	r0, r3
 80089e2:	f000 fea9 	bl	8009738 <xTaskCheckForTimeOut>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d123      	bne.n	8008a34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ee:	f000 f917 	bl	8008c20 <prvIsQueueEmpty>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d017      	beq.n	8008a28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	3324      	adds	r3, #36	; 0x24
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	4611      	mov	r1, r2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 fdcf 	bl	80095a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a08:	f000 f8b8 	bl	8008b7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a0c:	f000 fbfe 	bl	800920c <xTaskResumeAll>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d189      	bne.n	800892a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008a16:	4b10      	ldr	r3, [pc, #64]	; (8008a58 <xQueueReceive+0x1bc>)
 8008a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	e780      	b.n	800892a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a2a:	f000 f8a7 	bl	8008b7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a2e:	f000 fbed 	bl	800920c <xTaskResumeAll>
 8008a32:	e77a      	b.n	800892a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a36:	f000 f8a1 	bl	8008b7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a3a:	f000 fbe7 	bl	800920c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a40:	f000 f8ee 	bl	8008c20 <prvIsQueueEmpty>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f43f af6f 	beq.w	800892a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3730      	adds	r7, #48	; 0x30
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10d      	bne.n	8008a96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d14d      	bne.n	8008b1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 ffbc 	bl	8009a04 <xTaskPriorityDisinherit>
 8008a8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	609a      	str	r2, [r3, #8]
 8008a94:	e043      	b.n	8008b1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d119      	bne.n	8008ad0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6858      	ldr	r0, [r3, #4]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	68b9      	ldr	r1, [r7, #8]
 8008aa8:	f002 fea2 	bl	800b7f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	685a      	ldr	r2, [r3, #4]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab4:	441a      	add	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d32b      	bcc.n	8008b1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	605a      	str	r2, [r3, #4]
 8008ace:	e026      	b.n	8008b1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	68d8      	ldr	r0, [r3, #12]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad8:	461a      	mov	r2, r3
 8008ada:	68b9      	ldr	r1, [r7, #8]
 8008adc:	f002 fe88 	bl	800b7f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae8:	425b      	negs	r3, r3
 8008aea:	441a      	add	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	68da      	ldr	r2, [r3, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d207      	bcs.n	8008b0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	689a      	ldr	r2, [r3, #8]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b04:	425b      	negs	r3, r3
 8008b06:	441a      	add	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d105      	bne.n	8008b1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d002      	beq.n	8008b1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	1c5a      	adds	r2, r3, #1
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b26:	697b      	ldr	r3, [r7, #20]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d018      	beq.n	8008b74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	441a      	add	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68da      	ldr	r2, [r3, #12]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d303      	bcc.n	8008b64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68d9      	ldr	r1, [r3, #12]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	6838      	ldr	r0, [r7, #0]
 8008b70:	f002 fe3e 	bl	800b7f0 <memcpy>
	}
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b84:	f001 fc7e 	bl	800a484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b90:	e011      	b.n	8008bb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d012      	beq.n	8008bc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	3324      	adds	r3, #36	; 0x24
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fd50 	bl	8009644 <xTaskRemoveFromEventList>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008baa:	f000 fe27 	bl	80097fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	dce9      	bgt.n	8008b92 <prvUnlockQueue+0x16>
 8008bbe:	e000      	b.n	8008bc2 <prvUnlockQueue+0x46>
					break;
 8008bc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	22ff      	movs	r2, #255	; 0xff
 8008bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008bca:	f001 fc8b 	bl	800a4e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bce:	f001 fc59 	bl	800a484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bda:	e011      	b.n	8008c00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d012      	beq.n	8008c0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3310      	adds	r3, #16
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 fd2b 	bl	8009644 <xTaskRemoveFromEventList>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008bf4:	f000 fe02 	bl	80097fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008bf8:	7bbb      	ldrb	r3, [r7, #14]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	dce9      	bgt.n	8008bdc <prvUnlockQueue+0x60>
 8008c08:	e000      	b.n	8008c0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	22ff      	movs	r2, #255	; 0xff
 8008c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c14:	f001 fc66 	bl	800a4e4 <vPortExitCritical>
}
 8008c18:	bf00      	nop
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c28:	f001 fc2c 	bl	800a484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d102      	bne.n	8008c3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c34:	2301      	movs	r3, #1
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	e001      	b.n	8008c3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c3e:	f001 fc51 	bl	800a4e4 <vPortExitCritical>

	return xReturn;
 8008c42:	68fb      	ldr	r3, [r7, #12]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c54:	f001 fc16 	bl	800a484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d102      	bne.n	8008c6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c64:	2301      	movs	r3, #1
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	e001      	b.n	8008c6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c6e:	f001 fc39 	bl	800a4e4 <vPortExitCritical>

	return xReturn;
 8008c72:	68fb      	ldr	r3, [r7, #12]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c86:	2300      	movs	r3, #0
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	e014      	b.n	8008cb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c8c:	4a0f      	ldr	r2, [pc, #60]	; (8008ccc <vQueueAddToRegistry+0x50>)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10b      	bne.n	8008cb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c98:	490c      	ldr	r1, [pc, #48]	; (8008ccc <vQueueAddToRegistry+0x50>)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ca2:	4a0a      	ldr	r2, [pc, #40]	; (8008ccc <vQueueAddToRegistry+0x50>)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	4413      	add	r3, r2
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008cae:	e006      	b.n	8008cbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	60fb      	str	r3, [r7, #12]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b07      	cmp	r3, #7
 8008cba:	d9e7      	bls.n	8008c8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	200009b0 	.word	0x200009b0

08008cd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ce0:	f001 fbd0 	bl	800a484 <vPortEnterCritical>
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cea:	b25b      	sxtb	r3, r3
 8008cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf0:	d103      	bne.n	8008cfa <vQueueWaitForMessageRestricted+0x2a>
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d00:	b25b      	sxtb	r3, r3
 8008d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d06:	d103      	bne.n	8008d10 <vQueueWaitForMessageRestricted+0x40>
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d10:	f001 fbe8 	bl	800a4e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d106      	bne.n	8008d2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	3324      	adds	r3, #36	; 0x24
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	68b9      	ldr	r1, [r7, #8]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 fc61 	bl	80095ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d2a:	6978      	ldr	r0, [r7, #20]
 8008d2c:	f7ff ff26 	bl	8008b7c <prvUnlockQueue>
	}
 8008d30:	bf00      	nop
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08e      	sub	sp, #56	; 0x38
 8008d3c:	af04      	add	r7, sp, #16
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10a      	bne.n	8008d62 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d50:	f383 8811 	msr	BASEPRI, r3
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	623b      	str	r3, [r7, #32]
}
 8008d5e:	bf00      	nop
 8008d60:	e7fe      	b.n	8008d60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10a      	bne.n	8008d7e <xTaskCreateStatic+0x46>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	61fb      	str	r3, [r7, #28]
}
 8008d7a:	bf00      	nop
 8008d7c:	e7fe      	b.n	8008d7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d7e:	23a8      	movs	r3, #168	; 0xa8
 8008d80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	2ba8      	cmp	r3, #168	; 0xa8
 8008d86:	d00a      	beq.n	8008d9e <xTaskCreateStatic+0x66>
	__asm volatile
 8008d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	61bb      	str	r3, [r7, #24]
}
 8008d9a:	bf00      	nop
 8008d9c:	e7fe      	b.n	8008d9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d01e      	beq.n	8008de4 <xTaskCreateStatic+0xac>
 8008da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01b      	beq.n	8008de4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008db4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	2202      	movs	r2, #2
 8008dba:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	9303      	str	r3, [sp, #12]
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	9302      	str	r3, [sp, #8]
 8008dc6:	f107 0314 	add.w	r3, r7, #20
 8008dca:	9301      	str	r3, [sp, #4]
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	68b9      	ldr	r1, [r7, #8]
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 f850 	bl	8008e7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dde:	f000 f8f3 	bl	8008fc8 <prvAddNewTaskToReadyList>
 8008de2:	e001      	b.n	8008de8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008de8:	697b      	ldr	r3, [r7, #20]
	}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3728      	adds	r7, #40	; 0x28
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b08c      	sub	sp, #48	; 0x30
 8008df6:	af04      	add	r7, sp, #16
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	603b      	str	r3, [r7, #0]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e02:	88fb      	ldrh	r3, [r7, #6]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 fc5e 	bl	800a6c8 <pvPortMalloc>
 8008e0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00e      	beq.n	8008e32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e14:	20a8      	movs	r0, #168	; 0xa8
 8008e16:	f001 fc57 	bl	800a6c8 <pvPortMalloc>
 8008e1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d003      	beq.n	8008e2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	631a      	str	r2, [r3, #48]	; 0x30
 8008e28:	e005      	b.n	8008e36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e2a:	6978      	ldr	r0, [r7, #20]
 8008e2c:	f001 fd18 	bl	800a860 <vPortFree>
 8008e30:	e001      	b.n	8008e36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e32:	2300      	movs	r3, #0
 8008e34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d017      	beq.n	8008e6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e44:	88fa      	ldrh	r2, [r7, #6]
 8008e46:	2300      	movs	r3, #0
 8008e48:	9303      	str	r3, [sp, #12]
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	9302      	str	r3, [sp, #8]
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	9301      	str	r3, [sp, #4]
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	68b9      	ldr	r1, [r7, #8]
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 f80e 	bl	8008e7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e60:	69f8      	ldr	r0, [r7, #28]
 8008e62:	f000 f8b1 	bl	8008fc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e66:	2301      	movs	r3, #1
 8008e68:	61bb      	str	r3, [r7, #24]
 8008e6a:	e002      	b.n	8008e72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e72:	69bb      	ldr	r3, [r7, #24]
	}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3720      	adds	r7, #32
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	461a      	mov	r2, r3
 8008e94:	21a5      	movs	r1, #165	; 0xa5
 8008e96:	f002 fc27 	bl	800b6e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	f023 0307 	bic.w	r3, r3, #7
 8008eb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	f003 0307 	and.w	r3, r3, #7
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00a      	beq.n	8008ed4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	617b      	str	r3, [r7, #20]
}
 8008ed0:	bf00      	nop
 8008ed2:	e7fe      	b.n	8008ed2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d01f      	beq.n	8008f1a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eda:	2300      	movs	r3, #0
 8008edc:	61fb      	str	r3, [r7, #28]
 8008ede:	e012      	b.n	8008f06 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	7819      	ldrb	r1, [r3, #0]
 8008ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	4413      	add	r3, r2
 8008eee:	3334      	adds	r3, #52	; 0x34
 8008ef0:	460a      	mov	r2, r1
 8008ef2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	4413      	add	r3, r2
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d006      	beq.n	8008f0e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	3301      	adds	r3, #1
 8008f04:	61fb      	str	r3, [r7, #28]
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	2b0f      	cmp	r3, #15
 8008f0a:	d9e9      	bls.n	8008ee0 <prvInitialiseNewTask+0x64>
 8008f0c:	e000      	b.n	8008f10 <prvInitialiseNewTask+0x94>
			{
				break;
 8008f0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f18:	e003      	b.n	8008f22 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	2b37      	cmp	r3, #55	; 0x37
 8008f26:	d901      	bls.n	8008f2c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f28:	2337      	movs	r3, #55	; 0x37
 8008f2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f40:	3304      	adds	r3, #4
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff f978 	bl	8008238 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	3318      	adds	r3, #24
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7ff f973 	bl	8008238 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	3354      	adds	r3, #84	; 0x54
 8008f7c:	224c      	movs	r2, #76	; 0x4c
 8008f7e:	2100      	movs	r1, #0
 8008f80:	4618      	mov	r0, r3
 8008f82:	f002 fbb1 	bl	800b6e8 <memset>
 8008f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f88:	4a0c      	ldr	r2, [pc, #48]	; (8008fbc <prvInitialiseNewTask+0x140>)
 8008f8a:	659a      	str	r2, [r3, #88]	; 0x58
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8e:	4a0c      	ldr	r2, [pc, #48]	; (8008fc0 <prvInitialiseNewTask+0x144>)
 8008f90:	65da      	str	r2, [r3, #92]	; 0x5c
 8008f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f94:	4a0b      	ldr	r2, [pc, #44]	; (8008fc4 <prvInitialiseNewTask+0x148>)
 8008f96:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	69b8      	ldr	r0, [r7, #24]
 8008f9e:	f001 f941 	bl	800a224 <pxPortInitialiseStack>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d002      	beq.n	8008fb4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fb2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fb4:	bf00      	nop
 8008fb6:	3720      	adds	r7, #32
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	20003804 	.word	0x20003804
 8008fc0:	2000386c 	.word	0x2000386c
 8008fc4:	200038d4 	.word	0x200038d4

08008fc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008fd0:	f001 fa58 	bl	800a484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008fd4:	4b2d      	ldr	r3, [pc, #180]	; (800908c <prvAddNewTaskToReadyList+0xc4>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	4a2c      	ldr	r2, [pc, #176]	; (800908c <prvAddNewTaskToReadyList+0xc4>)
 8008fdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fde:	4b2c      	ldr	r3, [pc, #176]	; (8009090 <prvAddNewTaskToReadyList+0xc8>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d109      	bne.n	8008ffa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008fe6:	4a2a      	ldr	r2, [pc, #168]	; (8009090 <prvAddNewTaskToReadyList+0xc8>)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fec:	4b27      	ldr	r3, [pc, #156]	; (800908c <prvAddNewTaskToReadyList+0xc4>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d110      	bne.n	8009016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ff4:	f000 fc26 	bl	8009844 <prvInitialiseTaskLists>
 8008ff8:	e00d      	b.n	8009016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ffa:	4b26      	ldr	r3, [pc, #152]	; (8009094 <prvAddNewTaskToReadyList+0xcc>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d109      	bne.n	8009016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009002:	4b23      	ldr	r3, [pc, #140]	; (8009090 <prvAddNewTaskToReadyList+0xc8>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900c:	429a      	cmp	r2, r3
 800900e:	d802      	bhi.n	8009016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009010:	4a1f      	ldr	r2, [pc, #124]	; (8009090 <prvAddNewTaskToReadyList+0xc8>)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009016:	4b20      	ldr	r3, [pc, #128]	; (8009098 <prvAddNewTaskToReadyList+0xd0>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3301      	adds	r3, #1
 800901c:	4a1e      	ldr	r2, [pc, #120]	; (8009098 <prvAddNewTaskToReadyList+0xd0>)
 800901e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009020:	4b1d      	ldr	r3, [pc, #116]	; (8009098 <prvAddNewTaskToReadyList+0xd0>)
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902c:	4b1b      	ldr	r3, [pc, #108]	; (800909c <prvAddNewTaskToReadyList+0xd4>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	d903      	bls.n	800903c <prvAddNewTaskToReadyList+0x74>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009038:	4a18      	ldr	r2, [pc, #96]	; (800909c <prvAddNewTaskToReadyList+0xd4>)
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009040:	4613      	mov	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4a15      	ldr	r2, [pc, #84]	; (80090a0 <prvAddNewTaskToReadyList+0xd8>)
 800904a:	441a      	add	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3304      	adds	r3, #4
 8009050:	4619      	mov	r1, r3
 8009052:	4610      	mov	r0, r2
 8009054:	f7ff f8fd 	bl	8008252 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009058:	f001 fa44 	bl	800a4e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800905c:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <prvAddNewTaskToReadyList+0xcc>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00e      	beq.n	8009082 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009064:	4b0a      	ldr	r3, [pc, #40]	; (8009090 <prvAddNewTaskToReadyList+0xc8>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906e:	429a      	cmp	r2, r3
 8009070:	d207      	bcs.n	8009082 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009072:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <prvAddNewTaskToReadyList+0xdc>)
 8009074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20000ec4 	.word	0x20000ec4
 8009090:	200009f0 	.word	0x200009f0
 8009094:	20000ed0 	.word	0x20000ed0
 8009098:	20000ee0 	.word	0x20000ee0
 800909c:	20000ecc 	.word	0x20000ecc
 80090a0:	200009f4 	.word	0x200009f4
 80090a4:	e000ed04 	.word	0xe000ed04

080090a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090b0:	2300      	movs	r3, #0
 80090b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d017      	beq.n	80090ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090ba:	4b13      	ldr	r3, [pc, #76]	; (8009108 <vTaskDelay+0x60>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00a      	beq.n	80090d8 <vTaskDelay+0x30>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	60bb      	str	r3, [r7, #8]
}
 80090d4:	bf00      	nop
 80090d6:	e7fe      	b.n	80090d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80090d8:	f000 f88a 	bl	80091f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090dc:	2100      	movs	r1, #0
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fcfe 	bl	8009ae0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090e4:	f000 f892 	bl	800920c <xTaskResumeAll>
 80090e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d107      	bne.n	8009100 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80090f0:	4b06      	ldr	r3, [pc, #24]	; (800910c <vTaskDelay+0x64>)
 80090f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009100:	bf00      	nop
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	20000eec 	.word	0x20000eec
 800910c:	e000ed04 	.word	0xe000ed04

08009110 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08a      	sub	sp, #40	; 0x28
 8009114:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009116:	2300      	movs	r3, #0
 8009118:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800911e:	463a      	mov	r2, r7
 8009120:	1d39      	adds	r1, r7, #4
 8009122:	f107 0308 	add.w	r3, r7, #8
 8009126:	4618      	mov	r0, r3
 8009128:	f7ff f832 	bl	8008190 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	9202      	str	r2, [sp, #8]
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	2300      	movs	r3, #0
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	2300      	movs	r3, #0
 800913c:	460a      	mov	r2, r1
 800913e:	4924      	ldr	r1, [pc, #144]	; (80091d0 <vTaskStartScheduler+0xc0>)
 8009140:	4824      	ldr	r0, [pc, #144]	; (80091d4 <vTaskStartScheduler+0xc4>)
 8009142:	f7ff fdf9 	bl	8008d38 <xTaskCreateStatic>
 8009146:	4603      	mov	r3, r0
 8009148:	4a23      	ldr	r2, [pc, #140]	; (80091d8 <vTaskStartScheduler+0xc8>)
 800914a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800914c:	4b22      	ldr	r3, [pc, #136]	; (80091d8 <vTaskStartScheduler+0xc8>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009154:	2301      	movs	r3, #1
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	e001      	b.n	800915e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800915a:	2300      	movs	r3, #0
 800915c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d102      	bne.n	800916a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009164:	f000 fd10 	bl	8009b88 <xTimerCreateTimerTask>
 8009168:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d11b      	bne.n	80091a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	613b      	str	r3, [r7, #16]
}
 8009182:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009184:	4b15      	ldr	r3, [pc, #84]	; (80091dc <vTaskStartScheduler+0xcc>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3354      	adds	r3, #84	; 0x54
 800918a:	4a15      	ldr	r2, [pc, #84]	; (80091e0 <vTaskStartScheduler+0xd0>)
 800918c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800918e:	4b15      	ldr	r3, [pc, #84]	; (80091e4 <vTaskStartScheduler+0xd4>)
 8009190:	f04f 32ff 	mov.w	r2, #4294967295
 8009194:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009196:	4b14      	ldr	r3, [pc, #80]	; (80091e8 <vTaskStartScheduler+0xd8>)
 8009198:	2201      	movs	r2, #1
 800919a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800919c:	4b13      	ldr	r3, [pc, #76]	; (80091ec <vTaskStartScheduler+0xdc>)
 800919e:	2200      	movs	r2, #0
 80091a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091a2:	f001 f8cd 	bl	800a340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091a6:	e00e      	b.n	80091c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ae:	d10a      	bne.n	80091c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	60fb      	str	r3, [r7, #12]
}
 80091c2:	bf00      	nop
 80091c4:	e7fe      	b.n	80091c4 <vTaskStartScheduler+0xb4>
}
 80091c6:	bf00      	nop
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	0800b8e0 	.word	0x0800b8e0
 80091d4:	08009815 	.word	0x08009815
 80091d8:	20000ee8 	.word	0x20000ee8
 80091dc:	200009f0 	.word	0x200009f0
 80091e0:	2000015c 	.word	0x2000015c
 80091e4:	20000ee4 	.word	0x20000ee4
 80091e8:	20000ed0 	.word	0x20000ed0
 80091ec:	20000ec8 	.word	0x20000ec8

080091f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091f0:	b480      	push	{r7}
 80091f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091f4:	4b04      	ldr	r3, [pc, #16]	; (8009208 <vTaskSuspendAll+0x18>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3301      	adds	r3, #1
 80091fa:	4a03      	ldr	r2, [pc, #12]	; (8009208 <vTaskSuspendAll+0x18>)
 80091fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091fe:	bf00      	nop
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	20000eec 	.word	0x20000eec

0800920c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009216:	2300      	movs	r3, #0
 8009218:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800921a:	4b42      	ldr	r3, [pc, #264]	; (8009324 <xTaskResumeAll+0x118>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10a      	bne.n	8009238 <xTaskResumeAll+0x2c>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	603b      	str	r3, [r7, #0]
}
 8009234:	bf00      	nop
 8009236:	e7fe      	b.n	8009236 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009238:	f001 f924 	bl	800a484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800923c:	4b39      	ldr	r3, [pc, #228]	; (8009324 <xTaskResumeAll+0x118>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3b01      	subs	r3, #1
 8009242:	4a38      	ldr	r2, [pc, #224]	; (8009324 <xTaskResumeAll+0x118>)
 8009244:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009246:	4b37      	ldr	r3, [pc, #220]	; (8009324 <xTaskResumeAll+0x118>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d162      	bne.n	8009314 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800924e:	4b36      	ldr	r3, [pc, #216]	; (8009328 <xTaskResumeAll+0x11c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d05e      	beq.n	8009314 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009256:	e02f      	b.n	80092b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009258:	4b34      	ldr	r3, [pc, #208]	; (800932c <xTaskResumeAll+0x120>)
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3318      	adds	r3, #24
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff f851 	bl	800830c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3304      	adds	r3, #4
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff f84c 	bl	800830c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009278:	4b2d      	ldr	r3, [pc, #180]	; (8009330 <xTaskResumeAll+0x124>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	429a      	cmp	r2, r3
 800927e:	d903      	bls.n	8009288 <xTaskResumeAll+0x7c>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009284:	4a2a      	ldr	r2, [pc, #168]	; (8009330 <xTaskResumeAll+0x124>)
 8009286:	6013      	str	r3, [r2, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928c:	4613      	mov	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4a27      	ldr	r2, [pc, #156]	; (8009334 <xTaskResumeAll+0x128>)
 8009296:	441a      	add	r2, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3304      	adds	r3, #4
 800929c:	4619      	mov	r1, r3
 800929e:	4610      	mov	r0, r2
 80092a0:	f7fe ffd7 	bl	8008252 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a8:	4b23      	ldr	r3, [pc, #140]	; (8009338 <xTaskResumeAll+0x12c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d302      	bcc.n	80092b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80092b2:	4b22      	ldr	r3, [pc, #136]	; (800933c <xTaskResumeAll+0x130>)
 80092b4:	2201      	movs	r2, #1
 80092b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092b8:	4b1c      	ldr	r3, [pc, #112]	; (800932c <xTaskResumeAll+0x120>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1cb      	bne.n	8009258 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092c6:	f000 fb5f 	bl	8009988 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80092ca:	4b1d      	ldr	r3, [pc, #116]	; (8009340 <xTaskResumeAll+0x134>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d010      	beq.n	80092f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092d6:	f000 f847 	bl	8009368 <xTaskIncrementTick>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80092e0:	4b16      	ldr	r3, [pc, #88]	; (800933c <xTaskResumeAll+0x130>)
 80092e2:	2201      	movs	r2, #1
 80092e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1f1      	bne.n	80092d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80092f2:	4b13      	ldr	r3, [pc, #76]	; (8009340 <xTaskResumeAll+0x134>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092f8:	4b10      	ldr	r3, [pc, #64]	; (800933c <xTaskResumeAll+0x130>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d009      	beq.n	8009314 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009300:	2301      	movs	r3, #1
 8009302:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009304:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <xTaskResumeAll+0x138>)
 8009306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009314:	f001 f8e6 	bl	800a4e4 <vPortExitCritical>

	return xAlreadyYielded;
 8009318:	68bb      	ldr	r3, [r7, #8]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	20000eec 	.word	0x20000eec
 8009328:	20000ec4 	.word	0x20000ec4
 800932c:	20000e84 	.word	0x20000e84
 8009330:	20000ecc 	.word	0x20000ecc
 8009334:	200009f4 	.word	0x200009f4
 8009338:	200009f0 	.word	0x200009f0
 800933c:	20000ed8 	.word	0x20000ed8
 8009340:	20000ed4 	.word	0x20000ed4
 8009344:	e000ed04 	.word	0xe000ed04

08009348 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800934e:	4b05      	ldr	r3, [pc, #20]	; (8009364 <xTaskGetTickCount+0x1c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009354:	687b      	ldr	r3, [r7, #4]
}
 8009356:	4618      	mov	r0, r3
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	20000ec8 	.word	0x20000ec8

08009368 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800936e:	2300      	movs	r3, #0
 8009370:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009372:	4b4f      	ldr	r3, [pc, #316]	; (80094b0 <xTaskIncrementTick+0x148>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	f040 808f 	bne.w	800949a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800937c:	4b4d      	ldr	r3, [pc, #308]	; (80094b4 <xTaskIncrementTick+0x14c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3301      	adds	r3, #1
 8009382:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009384:	4a4b      	ldr	r2, [pc, #300]	; (80094b4 <xTaskIncrementTick+0x14c>)
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d120      	bne.n	80093d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009390:	4b49      	ldr	r3, [pc, #292]	; (80094b8 <xTaskIncrementTick+0x150>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00a      	beq.n	80093b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	603b      	str	r3, [r7, #0]
}
 80093ac:	bf00      	nop
 80093ae:	e7fe      	b.n	80093ae <xTaskIncrementTick+0x46>
 80093b0:	4b41      	ldr	r3, [pc, #260]	; (80094b8 <xTaskIncrementTick+0x150>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	60fb      	str	r3, [r7, #12]
 80093b6:	4b41      	ldr	r3, [pc, #260]	; (80094bc <xTaskIncrementTick+0x154>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a3f      	ldr	r2, [pc, #252]	; (80094b8 <xTaskIncrementTick+0x150>)
 80093bc:	6013      	str	r3, [r2, #0]
 80093be:	4a3f      	ldr	r2, [pc, #252]	; (80094bc <xTaskIncrementTick+0x154>)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6013      	str	r3, [r2, #0]
 80093c4:	4b3e      	ldr	r3, [pc, #248]	; (80094c0 <xTaskIncrementTick+0x158>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3301      	adds	r3, #1
 80093ca:	4a3d      	ldr	r2, [pc, #244]	; (80094c0 <xTaskIncrementTick+0x158>)
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	f000 fadb 	bl	8009988 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093d2:	4b3c      	ldr	r3, [pc, #240]	; (80094c4 <xTaskIncrementTick+0x15c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d349      	bcc.n	8009470 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093dc:	4b36      	ldr	r3, [pc, #216]	; (80094b8 <xTaskIncrementTick+0x150>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d104      	bne.n	80093f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093e6:	4b37      	ldr	r3, [pc, #220]	; (80094c4 <xTaskIncrementTick+0x15c>)
 80093e8:	f04f 32ff 	mov.w	r2, #4294967295
 80093ec:	601a      	str	r2, [r3, #0]
					break;
 80093ee:	e03f      	b.n	8009470 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093f0:	4b31      	ldr	r3, [pc, #196]	; (80094b8 <xTaskIncrementTick+0x150>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	429a      	cmp	r2, r3
 8009406:	d203      	bcs.n	8009410 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009408:	4a2e      	ldr	r2, [pc, #184]	; (80094c4 <xTaskIncrementTick+0x15c>)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800940e:	e02f      	b.n	8009470 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	3304      	adds	r3, #4
 8009414:	4618      	mov	r0, r3
 8009416:	f7fe ff79 	bl	800830c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941e:	2b00      	cmp	r3, #0
 8009420:	d004      	beq.n	800942c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	3318      	adds	r3, #24
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe ff70 	bl	800830c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009430:	4b25      	ldr	r3, [pc, #148]	; (80094c8 <xTaskIncrementTick+0x160>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d903      	bls.n	8009440 <xTaskIncrementTick+0xd8>
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943c:	4a22      	ldr	r2, [pc, #136]	; (80094c8 <xTaskIncrementTick+0x160>)
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009444:	4613      	mov	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	4a1f      	ldr	r2, [pc, #124]	; (80094cc <xTaskIncrementTick+0x164>)
 800944e:	441a      	add	r2, r3
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	3304      	adds	r3, #4
 8009454:	4619      	mov	r1, r3
 8009456:	4610      	mov	r0, r2
 8009458:	f7fe fefb 	bl	8008252 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009460:	4b1b      	ldr	r3, [pc, #108]	; (80094d0 <xTaskIncrementTick+0x168>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009466:	429a      	cmp	r2, r3
 8009468:	d3b8      	bcc.n	80093dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800946a:	2301      	movs	r3, #1
 800946c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800946e:	e7b5      	b.n	80093dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009470:	4b17      	ldr	r3, [pc, #92]	; (80094d0 <xTaskIncrementTick+0x168>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009476:	4915      	ldr	r1, [pc, #84]	; (80094cc <xTaskIncrementTick+0x164>)
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	440b      	add	r3, r1
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d901      	bls.n	800948c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009488:	2301      	movs	r3, #1
 800948a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800948c:	4b11      	ldr	r3, [pc, #68]	; (80094d4 <xTaskIncrementTick+0x16c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d007      	beq.n	80094a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009494:	2301      	movs	r3, #1
 8009496:	617b      	str	r3, [r7, #20]
 8009498:	e004      	b.n	80094a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800949a:	4b0f      	ldr	r3, [pc, #60]	; (80094d8 <xTaskIncrementTick+0x170>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3301      	adds	r3, #1
 80094a0:	4a0d      	ldr	r2, [pc, #52]	; (80094d8 <xTaskIncrementTick+0x170>)
 80094a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094a4:	697b      	ldr	r3, [r7, #20]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	20000eec 	.word	0x20000eec
 80094b4:	20000ec8 	.word	0x20000ec8
 80094b8:	20000e7c 	.word	0x20000e7c
 80094bc:	20000e80 	.word	0x20000e80
 80094c0:	20000edc 	.word	0x20000edc
 80094c4:	20000ee4 	.word	0x20000ee4
 80094c8:	20000ecc 	.word	0x20000ecc
 80094cc:	200009f4 	.word	0x200009f4
 80094d0:	200009f0 	.word	0x200009f0
 80094d4:	20000ed8 	.word	0x20000ed8
 80094d8:	20000ed4 	.word	0x20000ed4

080094dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094e2:	4b2a      	ldr	r3, [pc, #168]	; (800958c <vTaskSwitchContext+0xb0>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094ea:	4b29      	ldr	r3, [pc, #164]	; (8009590 <vTaskSwitchContext+0xb4>)
 80094ec:	2201      	movs	r2, #1
 80094ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094f0:	e046      	b.n	8009580 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80094f2:	4b27      	ldr	r3, [pc, #156]	; (8009590 <vTaskSwitchContext+0xb4>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094f8:	4b26      	ldr	r3, [pc, #152]	; (8009594 <vTaskSwitchContext+0xb8>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	e010      	b.n	8009522 <vTaskSwitchContext+0x46>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10a      	bne.n	800951c <vTaskSwitchContext+0x40>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	607b      	str	r3, [r7, #4]
}
 8009518:	bf00      	nop
 800951a:	e7fe      	b.n	800951a <vTaskSwitchContext+0x3e>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3b01      	subs	r3, #1
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	491d      	ldr	r1, [pc, #116]	; (8009598 <vTaskSwitchContext+0xbc>)
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	4613      	mov	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	440b      	add	r3, r1
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0e4      	beq.n	8009500 <vTaskSwitchContext+0x24>
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	4613      	mov	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4a15      	ldr	r2, [pc, #84]	; (8009598 <vTaskSwitchContext+0xbc>)
 8009542:	4413      	add	r3, r2
 8009544:	60bb      	str	r3, [r7, #8]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	605a      	str	r2, [r3, #4]
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	3308      	adds	r3, #8
 8009558:	429a      	cmp	r2, r3
 800955a:	d104      	bne.n	8009566 <vTaskSwitchContext+0x8a>
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	605a      	str	r2, [r3, #4]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	4a0b      	ldr	r2, [pc, #44]	; (800959c <vTaskSwitchContext+0xc0>)
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	4a08      	ldr	r2, [pc, #32]	; (8009594 <vTaskSwitchContext+0xb8>)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009576:	4b09      	ldr	r3, [pc, #36]	; (800959c <vTaskSwitchContext+0xc0>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3354      	adds	r3, #84	; 0x54
 800957c:	4a08      	ldr	r2, [pc, #32]	; (80095a0 <vTaskSwitchContext+0xc4>)
 800957e:	6013      	str	r3, [r2, #0]
}
 8009580:	bf00      	nop
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	20000eec 	.word	0x20000eec
 8009590:	20000ed8 	.word	0x20000ed8
 8009594:	20000ecc 	.word	0x20000ecc
 8009598:	200009f4 	.word	0x200009f4
 800959c:	200009f0 	.word	0x200009f0
 80095a0:	2000015c 	.word	0x2000015c

080095a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10a      	bne.n	80095ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	60fb      	str	r3, [r7, #12]
}
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095ca:	4b07      	ldr	r3, [pc, #28]	; (80095e8 <vTaskPlaceOnEventList+0x44>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3318      	adds	r3, #24
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7fe fe61 	bl	800829a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095d8:	2101      	movs	r1, #1
 80095da:	6838      	ldr	r0, [r7, #0]
 80095dc:	f000 fa80 	bl	8009ae0 <prvAddCurrentTaskToDelayedList>
}
 80095e0:	bf00      	nop
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	200009f0 	.word	0x200009f0

080095ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10a      	bne.n	8009614 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	617b      	str	r3, [r7, #20]
}
 8009610:	bf00      	nop
 8009612:	e7fe      	b.n	8009612 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009614:	4b0a      	ldr	r3, [pc, #40]	; (8009640 <vTaskPlaceOnEventListRestricted+0x54>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3318      	adds	r3, #24
 800961a:	4619      	mov	r1, r3
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f7fe fe18 	bl	8008252 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009628:	f04f 33ff 	mov.w	r3, #4294967295
 800962c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	68b8      	ldr	r0, [r7, #8]
 8009632:	f000 fa55 	bl	8009ae0 <prvAddCurrentTaskToDelayedList>
	}
 8009636:	bf00      	nop
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	200009f0 	.word	0x200009f0

08009644 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10a      	bne.n	8009670 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800965a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	60fb      	str	r3, [r7, #12]
}
 800966c:	bf00      	nop
 800966e:	e7fe      	b.n	800966e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	3318      	adds	r3, #24
 8009674:	4618      	mov	r0, r3
 8009676:	f7fe fe49 	bl	800830c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800967a:	4b1e      	ldr	r3, [pc, #120]	; (80096f4 <xTaskRemoveFromEventList+0xb0>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d11d      	bne.n	80096be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	3304      	adds	r3, #4
 8009686:	4618      	mov	r0, r3
 8009688:	f7fe fe40 	bl	800830c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009690:	4b19      	ldr	r3, [pc, #100]	; (80096f8 <xTaskRemoveFromEventList+0xb4>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d903      	bls.n	80096a0 <xTaskRemoveFromEventList+0x5c>
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969c:	4a16      	ldr	r2, [pc, #88]	; (80096f8 <xTaskRemoveFromEventList+0xb4>)
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4a13      	ldr	r2, [pc, #76]	; (80096fc <xTaskRemoveFromEventList+0xb8>)
 80096ae:	441a      	add	r2, r3
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4619      	mov	r1, r3
 80096b6:	4610      	mov	r0, r2
 80096b8:	f7fe fdcb 	bl	8008252 <vListInsertEnd>
 80096bc:	e005      	b.n	80096ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	3318      	adds	r3, #24
 80096c2:	4619      	mov	r1, r3
 80096c4:	480e      	ldr	r0, [pc, #56]	; (8009700 <xTaskRemoveFromEventList+0xbc>)
 80096c6:	f7fe fdc4 	bl	8008252 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ce:	4b0d      	ldr	r3, [pc, #52]	; (8009704 <xTaskRemoveFromEventList+0xc0>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d905      	bls.n	80096e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096d8:	2301      	movs	r3, #1
 80096da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096dc:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <xTaskRemoveFromEventList+0xc4>)
 80096de:	2201      	movs	r2, #1
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	e001      	b.n	80096e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80096e4:	2300      	movs	r3, #0
 80096e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80096e8:	697b      	ldr	r3, [r7, #20]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	20000eec 	.word	0x20000eec
 80096f8:	20000ecc 	.word	0x20000ecc
 80096fc:	200009f4 	.word	0x200009f4
 8009700:	20000e84 	.word	0x20000e84
 8009704:	200009f0 	.word	0x200009f0
 8009708:	20000ed8 	.word	0x20000ed8

0800970c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009714:	4b06      	ldr	r3, [pc, #24]	; (8009730 <vTaskInternalSetTimeOutState+0x24>)
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800971c:	4b05      	ldr	r3, [pc, #20]	; (8009734 <vTaskInternalSetTimeOutState+0x28>)
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	605a      	str	r2, [r3, #4]
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	20000edc 	.word	0x20000edc
 8009734:	20000ec8 	.word	0x20000ec8

08009738 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10a      	bne.n	800975e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	613b      	str	r3, [r7, #16]
}
 800975a:	bf00      	nop
 800975c:	e7fe      	b.n	800975c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10a      	bne.n	800977a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	60fb      	str	r3, [r7, #12]
}
 8009776:	bf00      	nop
 8009778:	e7fe      	b.n	8009778 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800977a:	f000 fe83 	bl	800a484 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800977e:	4b1d      	ldr	r3, [pc, #116]	; (80097f4 <xTaskCheckForTimeOut+0xbc>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009796:	d102      	bne.n	800979e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009798:	2300      	movs	r3, #0
 800979a:	61fb      	str	r3, [r7, #28]
 800979c:	e023      	b.n	80097e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	4b15      	ldr	r3, [pc, #84]	; (80097f8 <xTaskCheckForTimeOut+0xc0>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d007      	beq.n	80097ba <xTaskCheckForTimeOut+0x82>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d302      	bcc.n	80097ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097b4:	2301      	movs	r3, #1
 80097b6:	61fb      	str	r3, [r7, #28]
 80097b8:	e015      	b.n	80097e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d20b      	bcs.n	80097dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	1ad2      	subs	r2, r2, r3
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7ff ff9b 	bl	800970c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097d6:	2300      	movs	r3, #0
 80097d8:	61fb      	str	r3, [r7, #28]
 80097da:	e004      	b.n	80097e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2200      	movs	r2, #0
 80097e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097e2:	2301      	movs	r3, #1
 80097e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097e6:	f000 fe7d 	bl	800a4e4 <vPortExitCritical>

	return xReturn;
 80097ea:	69fb      	ldr	r3, [r7, #28]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3720      	adds	r7, #32
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	20000ec8 	.word	0x20000ec8
 80097f8:	20000edc 	.word	0x20000edc

080097fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80097fc:	b480      	push	{r7}
 80097fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009800:	4b03      	ldr	r3, [pc, #12]	; (8009810 <vTaskMissedYield+0x14>)
 8009802:	2201      	movs	r2, #1
 8009804:	601a      	str	r2, [r3, #0]
}
 8009806:	bf00      	nop
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	20000ed8 	.word	0x20000ed8

08009814 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800981c:	f000 f852 	bl	80098c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009820:	4b06      	ldr	r3, [pc, #24]	; (800983c <prvIdleTask+0x28>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d9f9      	bls.n	800981c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009828:	4b05      	ldr	r3, [pc, #20]	; (8009840 <prvIdleTask+0x2c>)
 800982a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009838:	e7f0      	b.n	800981c <prvIdleTask+0x8>
 800983a:	bf00      	nop
 800983c:	200009f4 	.word	0x200009f4
 8009840:	e000ed04 	.word	0xe000ed04

08009844 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800984a:	2300      	movs	r3, #0
 800984c:	607b      	str	r3, [r7, #4]
 800984e:	e00c      	b.n	800986a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	4613      	mov	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4a12      	ldr	r2, [pc, #72]	; (80098a4 <prvInitialiseTaskLists+0x60>)
 800985c:	4413      	add	r3, r2
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe fcca 	bl	80081f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	3301      	adds	r3, #1
 8009868:	607b      	str	r3, [r7, #4]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b37      	cmp	r3, #55	; 0x37
 800986e:	d9ef      	bls.n	8009850 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009870:	480d      	ldr	r0, [pc, #52]	; (80098a8 <prvInitialiseTaskLists+0x64>)
 8009872:	f7fe fcc1 	bl	80081f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009876:	480d      	ldr	r0, [pc, #52]	; (80098ac <prvInitialiseTaskLists+0x68>)
 8009878:	f7fe fcbe 	bl	80081f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800987c:	480c      	ldr	r0, [pc, #48]	; (80098b0 <prvInitialiseTaskLists+0x6c>)
 800987e:	f7fe fcbb 	bl	80081f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009882:	480c      	ldr	r0, [pc, #48]	; (80098b4 <prvInitialiseTaskLists+0x70>)
 8009884:	f7fe fcb8 	bl	80081f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009888:	480b      	ldr	r0, [pc, #44]	; (80098b8 <prvInitialiseTaskLists+0x74>)
 800988a:	f7fe fcb5 	bl	80081f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800988e:	4b0b      	ldr	r3, [pc, #44]	; (80098bc <prvInitialiseTaskLists+0x78>)
 8009890:	4a05      	ldr	r2, [pc, #20]	; (80098a8 <prvInitialiseTaskLists+0x64>)
 8009892:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009894:	4b0a      	ldr	r3, [pc, #40]	; (80098c0 <prvInitialiseTaskLists+0x7c>)
 8009896:	4a05      	ldr	r2, [pc, #20]	; (80098ac <prvInitialiseTaskLists+0x68>)
 8009898:	601a      	str	r2, [r3, #0]
}
 800989a:	bf00      	nop
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	200009f4 	.word	0x200009f4
 80098a8:	20000e54 	.word	0x20000e54
 80098ac:	20000e68 	.word	0x20000e68
 80098b0:	20000e84 	.word	0x20000e84
 80098b4:	20000e98 	.word	0x20000e98
 80098b8:	20000eb0 	.word	0x20000eb0
 80098bc:	20000e7c 	.word	0x20000e7c
 80098c0:	20000e80 	.word	0x20000e80

080098c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098ca:	e019      	b.n	8009900 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098cc:	f000 fdda 	bl	800a484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098d0:	4b10      	ldr	r3, [pc, #64]	; (8009914 <prvCheckTasksWaitingTermination+0x50>)
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3304      	adds	r3, #4
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fe fd15 	bl	800830c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098e2:	4b0d      	ldr	r3, [pc, #52]	; (8009918 <prvCheckTasksWaitingTermination+0x54>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3b01      	subs	r3, #1
 80098e8:	4a0b      	ldr	r2, [pc, #44]	; (8009918 <prvCheckTasksWaitingTermination+0x54>)
 80098ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098ec:	4b0b      	ldr	r3, [pc, #44]	; (800991c <prvCheckTasksWaitingTermination+0x58>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	4a0a      	ldr	r2, [pc, #40]	; (800991c <prvCheckTasksWaitingTermination+0x58>)
 80098f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098f6:	f000 fdf5 	bl	800a4e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f810 	bl	8009920 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009900:	4b06      	ldr	r3, [pc, #24]	; (800991c <prvCheckTasksWaitingTermination+0x58>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1e1      	bne.n	80098cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009908:	bf00      	nop
 800990a:	bf00      	nop
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	20000e98 	.word	0x20000e98
 8009918:	20000ec4 	.word	0x20000ec4
 800991c:	20000eac 	.word	0x20000eac

08009920 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3354      	adds	r3, #84	; 0x54
 800992c:	4618      	mov	r0, r3
 800992e:	f001 fee3 	bl	800b6f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009938:	2b00      	cmp	r3, #0
 800993a:	d108      	bne.n	800994e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009940:	4618      	mov	r0, r3
 8009942:	f000 ff8d 	bl	800a860 <vPortFree>
				vPortFree( pxTCB );
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 ff8a 	bl	800a860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800994c:	e018      	b.n	8009980 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009954:	2b01      	cmp	r3, #1
 8009956:	d103      	bne.n	8009960 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 ff81 	bl	800a860 <vPortFree>
	}
 800995e:	e00f      	b.n	8009980 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009966:	2b02      	cmp	r3, #2
 8009968:	d00a      	beq.n	8009980 <prvDeleteTCB+0x60>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	60fb      	str	r3, [r7, #12]
}
 800997c:	bf00      	nop
 800997e:	e7fe      	b.n	800997e <prvDeleteTCB+0x5e>
	}
 8009980:	bf00      	nop
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800998e:	4b0c      	ldr	r3, [pc, #48]	; (80099c0 <prvResetNextTaskUnblockTime+0x38>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d104      	bne.n	80099a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009998:	4b0a      	ldr	r3, [pc, #40]	; (80099c4 <prvResetNextTaskUnblockTime+0x3c>)
 800999a:	f04f 32ff 	mov.w	r2, #4294967295
 800999e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099a0:	e008      	b.n	80099b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099a2:	4b07      	ldr	r3, [pc, #28]	; (80099c0 <prvResetNextTaskUnblockTime+0x38>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	4a04      	ldr	r2, [pc, #16]	; (80099c4 <prvResetNextTaskUnblockTime+0x3c>)
 80099b2:	6013      	str	r3, [r2, #0]
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	20000e7c 	.word	0x20000e7c
 80099c4:	20000ee4 	.word	0x20000ee4

080099c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80099ce:	4b0b      	ldr	r3, [pc, #44]	; (80099fc <xTaskGetSchedulerState+0x34>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d102      	bne.n	80099dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099d6:	2301      	movs	r3, #1
 80099d8:	607b      	str	r3, [r7, #4]
 80099da:	e008      	b.n	80099ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099dc:	4b08      	ldr	r3, [pc, #32]	; (8009a00 <xTaskGetSchedulerState+0x38>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d102      	bne.n	80099ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099e4:	2302      	movs	r3, #2
 80099e6:	607b      	str	r3, [r7, #4]
 80099e8:	e001      	b.n	80099ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099ea:	2300      	movs	r3, #0
 80099ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099ee:	687b      	ldr	r3, [r7, #4]
	}
 80099f0:	4618      	mov	r0, r3
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	20000ed0 	.word	0x20000ed0
 8009a00:	20000eec 	.word	0x20000eec

08009a04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a10:	2300      	movs	r3, #0
 8009a12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d056      	beq.n	8009ac8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a1a:	4b2e      	ldr	r3, [pc, #184]	; (8009ad4 <xTaskPriorityDisinherit+0xd0>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d00a      	beq.n	8009a3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	60fb      	str	r3, [r7, #12]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10a      	bne.n	8009a58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	60bb      	str	r3, [r7, #8]
}
 8009a54:	bf00      	nop
 8009a56:	e7fe      	b.n	8009a56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a5c:	1e5a      	subs	r2, r3, #1
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d02c      	beq.n	8009ac8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d128      	bne.n	8009ac8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fe fc46 	bl	800830c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a98:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <xTaskPriorityDisinherit+0xd4>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d903      	bls.n	8009aa8 <xTaskPriorityDisinherit+0xa4>
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa4:	4a0c      	ldr	r2, [pc, #48]	; (8009ad8 <xTaskPriorityDisinherit+0xd4>)
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4a09      	ldr	r2, [pc, #36]	; (8009adc <xTaskPriorityDisinherit+0xd8>)
 8009ab6:	441a      	add	r2, r3
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4619      	mov	r1, r3
 8009abe:	4610      	mov	r0, r2
 8009ac0:	f7fe fbc7 	bl	8008252 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ac8:	697b      	ldr	r3, [r7, #20]
	}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	200009f0 	.word	0x200009f0
 8009ad8:	20000ecc 	.word	0x20000ecc
 8009adc:	200009f4 	.word	0x200009f4

08009ae0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009aea:	4b21      	ldr	r3, [pc, #132]	; (8009b70 <prvAddCurrentTaskToDelayedList+0x90>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009af0:	4b20      	ldr	r3, [pc, #128]	; (8009b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3304      	adds	r3, #4
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe fc08 	bl	800830c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b02:	d10a      	bne.n	8009b1a <prvAddCurrentTaskToDelayedList+0x3a>
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d007      	beq.n	8009b1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b0a:	4b1a      	ldr	r3, [pc, #104]	; (8009b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	3304      	adds	r3, #4
 8009b10:	4619      	mov	r1, r3
 8009b12:	4819      	ldr	r0, [pc, #100]	; (8009b78 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b14:	f7fe fb9d 	bl	8008252 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b18:	e026      	b.n	8009b68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4413      	add	r3, r2
 8009b20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b22:	4b14      	ldr	r3, [pc, #80]	; (8009b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d209      	bcs.n	8009b46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b32:	4b12      	ldr	r3, [pc, #72]	; (8009b7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	4b0f      	ldr	r3, [pc, #60]	; (8009b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4610      	mov	r0, r2
 8009b40:	f7fe fbab 	bl	800829a <vListInsert>
}
 8009b44:	e010      	b.n	8009b68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b46:	4b0e      	ldr	r3, [pc, #56]	; (8009b80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	4b0a      	ldr	r3, [pc, #40]	; (8009b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	4619      	mov	r1, r3
 8009b52:	4610      	mov	r0, r2
 8009b54:	f7fe fba1 	bl	800829a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b58:	4b0a      	ldr	r3, [pc, #40]	; (8009b84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d202      	bcs.n	8009b68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b62:	4a08      	ldr	r2, [pc, #32]	; (8009b84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	6013      	str	r3, [r2, #0]
}
 8009b68:	bf00      	nop
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	20000ec8 	.word	0x20000ec8
 8009b74:	200009f0 	.word	0x200009f0
 8009b78:	20000eb0 	.word	0x20000eb0
 8009b7c:	20000e80 	.word	0x20000e80
 8009b80:	20000e7c 	.word	0x20000e7c
 8009b84:	20000ee4 	.word	0x20000ee4

08009b88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08a      	sub	sp, #40	; 0x28
 8009b8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b92:	f000 fb07 	bl	800a1a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b96:	4b1c      	ldr	r3, [pc, #112]	; (8009c08 <xTimerCreateTimerTask+0x80>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d021      	beq.n	8009be2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009ba6:	1d3a      	adds	r2, r7, #4
 8009ba8:	f107 0108 	add.w	r1, r7, #8
 8009bac:	f107 030c 	add.w	r3, r7, #12
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fe fb07 	bl	80081c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009bb6:	6879      	ldr	r1, [r7, #4]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	9202      	str	r2, [sp, #8]
 8009bbe:	9301      	str	r3, [sp, #4]
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	460a      	mov	r2, r1
 8009bc8:	4910      	ldr	r1, [pc, #64]	; (8009c0c <xTimerCreateTimerTask+0x84>)
 8009bca:	4811      	ldr	r0, [pc, #68]	; (8009c10 <xTimerCreateTimerTask+0x88>)
 8009bcc:	f7ff f8b4 	bl	8008d38 <xTaskCreateStatic>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	4a10      	ldr	r2, [pc, #64]	; (8009c14 <xTimerCreateTimerTask+0x8c>)
 8009bd4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009bd6:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <xTimerCreateTimerTask+0x8c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009bde:	2301      	movs	r3, #1
 8009be0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10a      	bne.n	8009bfe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	613b      	str	r3, [r7, #16]
}
 8009bfa:	bf00      	nop
 8009bfc:	e7fe      	b.n	8009bfc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009bfe:	697b      	ldr	r3, [r7, #20]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	20000f20 	.word	0x20000f20
 8009c0c:	0800b8e8 	.word	0x0800b8e8
 8009c10:	08009d4d 	.word	0x08009d4d
 8009c14:	20000f24 	.word	0x20000f24

08009c18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b08a      	sub	sp, #40	; 0x28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
 8009c24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c26:	2300      	movs	r3, #0
 8009c28:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10a      	bne.n	8009c46 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	623b      	str	r3, [r7, #32]
}
 8009c42:	bf00      	nop
 8009c44:	e7fe      	b.n	8009c44 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c46:	4b1a      	ldr	r3, [pc, #104]	; (8009cb0 <xTimerGenericCommand+0x98>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d02a      	beq.n	8009ca4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	2b05      	cmp	r3, #5
 8009c5e:	dc18      	bgt.n	8009c92 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c60:	f7ff feb2 	bl	80099c8 <xTaskGetSchedulerState>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d109      	bne.n	8009c7e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c6a:	4b11      	ldr	r3, [pc, #68]	; (8009cb0 <xTimerGenericCommand+0x98>)
 8009c6c:	6818      	ldr	r0, [r3, #0]
 8009c6e:	f107 0110 	add.w	r1, r7, #16
 8009c72:	2300      	movs	r3, #0
 8009c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c76:	f7fe fc77 	bl	8008568 <xQueueGenericSend>
 8009c7a:	6278      	str	r0, [r7, #36]	; 0x24
 8009c7c:	e012      	b.n	8009ca4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c7e:	4b0c      	ldr	r3, [pc, #48]	; (8009cb0 <xTimerGenericCommand+0x98>)
 8009c80:	6818      	ldr	r0, [r3, #0]
 8009c82:	f107 0110 	add.w	r1, r7, #16
 8009c86:	2300      	movs	r3, #0
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f7fe fc6d 	bl	8008568 <xQueueGenericSend>
 8009c8e:	6278      	str	r0, [r7, #36]	; 0x24
 8009c90:	e008      	b.n	8009ca4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c92:	4b07      	ldr	r3, [pc, #28]	; (8009cb0 <xTimerGenericCommand+0x98>)
 8009c94:	6818      	ldr	r0, [r3, #0]
 8009c96:	f107 0110 	add.w	r1, r7, #16
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	f7fe fd61 	bl	8008764 <xQueueGenericSendFromISR>
 8009ca2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3728      	adds	r7, #40	; 0x28
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000f20 	.word	0x20000f20

08009cb4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af02      	add	r7, sp, #8
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cbe:	4b22      	ldr	r3, [pc, #136]	; (8009d48 <prvProcessExpiredTimer+0x94>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fe fb1d 	bl	800830c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cd8:	f003 0304 	and.w	r3, r3, #4
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d022      	beq.n	8009d26 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	699a      	ldr	r2, [r3, #24]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	18d1      	adds	r1, r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	6978      	ldr	r0, [r7, #20]
 8009cee:	f000 f8d1 	bl	8009e94 <prvInsertTimerInActiveList>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d01f      	beq.n	8009d38 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	2100      	movs	r1, #0
 8009d02:	6978      	ldr	r0, [r7, #20]
 8009d04:	f7ff ff88 	bl	8009c18 <xTimerGenericCommand>
 8009d08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d113      	bne.n	8009d38 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	60fb      	str	r3, [r7, #12]
}
 8009d22:	bf00      	nop
 8009d24:	e7fe      	b.n	8009d24 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d2c:	f023 0301 	bic.w	r3, r3, #1
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	6a1b      	ldr	r3, [r3, #32]
 8009d3c:	6978      	ldr	r0, [r7, #20]
 8009d3e:	4798      	blx	r3
}
 8009d40:	bf00      	nop
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	20000f18 	.word	0x20000f18

08009d4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d54:	f107 0308 	add.w	r3, r7, #8
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 f857 	bl	8009e0c <prvGetNextExpireTime>
 8009d5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	4619      	mov	r1, r3
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f000 f803 	bl	8009d70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d6a:	f000 f8d5 	bl	8009f18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d6e:	e7f1      	b.n	8009d54 <prvTimerTask+0x8>

08009d70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d7a:	f7ff fa39 	bl	80091f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d7e:	f107 0308 	add.w	r3, r7, #8
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 f866 	bl	8009e54 <prvSampleTimeNow>
 8009d88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d130      	bne.n	8009df2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10a      	bne.n	8009dac <prvProcessTimerOrBlockTask+0x3c>
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d806      	bhi.n	8009dac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d9e:	f7ff fa35 	bl	800920c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009da2:	68f9      	ldr	r1, [r7, #12]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7ff ff85 	bl	8009cb4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009daa:	e024      	b.n	8009df6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d008      	beq.n	8009dc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009db2:	4b13      	ldr	r3, [pc, #76]	; (8009e00 <prvProcessTimerOrBlockTask+0x90>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <prvProcessTimerOrBlockTask+0x50>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e000      	b.n	8009dc2 <prvProcessTimerOrBlockTask+0x52>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009dc4:	4b0f      	ldr	r3, [pc, #60]	; (8009e04 <prvProcessTimerOrBlockTask+0x94>)
 8009dc6:	6818      	ldr	r0, [r3, #0]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	f7fe ff7d 	bl	8008cd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009dd6:	f7ff fa19 	bl	800920c <xTaskResumeAll>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d10a      	bne.n	8009df6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009de0:	4b09      	ldr	r3, [pc, #36]	; (8009e08 <prvProcessTimerOrBlockTask+0x98>)
 8009de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de6:	601a      	str	r2, [r3, #0]
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	f3bf 8f6f 	isb	sy
}
 8009df0:	e001      	b.n	8009df6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009df2:	f7ff fa0b 	bl	800920c <xTaskResumeAll>
}
 8009df6:	bf00      	nop
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	20000f1c 	.word	0x20000f1c
 8009e04:	20000f20 	.word	0x20000f20
 8009e08:	e000ed04 	.word	0xe000ed04

08009e0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e14:	4b0e      	ldr	r3, [pc, #56]	; (8009e50 <prvGetNextExpireTime+0x44>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <prvGetNextExpireTime+0x16>
 8009e1e:	2201      	movs	r2, #1
 8009e20:	e000      	b.n	8009e24 <prvGetNextExpireTime+0x18>
 8009e22:	2200      	movs	r2, #0
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d105      	bne.n	8009e3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e30:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <prvGetNextExpireTime+0x44>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	60fb      	str	r3, [r7, #12]
 8009e3a:	e001      	b.n	8009e40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e40:	68fb      	ldr	r3, [r7, #12]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	20000f18 	.word	0x20000f18

08009e54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e5c:	f7ff fa74 	bl	8009348 <xTaskGetTickCount>
 8009e60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e62:	4b0b      	ldr	r3, [pc, #44]	; (8009e90 <prvSampleTimeNow+0x3c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d205      	bcs.n	8009e78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e6c:	f000 f936 	bl	800a0dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	e002      	b.n	8009e7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e7e:	4a04      	ldr	r2, [pc, #16]	; (8009e90 <prvSampleTimeNow+0x3c>)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e84:	68fb      	ldr	r3, [r7, #12]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20000f28 	.word	0x20000f28

08009e94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d812      	bhi.n	8009ee0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	1ad2      	subs	r2, r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d302      	bcc.n	8009ece <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	617b      	str	r3, [r7, #20]
 8009ecc:	e01b      	b.n	8009f06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ece:	4b10      	ldr	r3, [pc, #64]	; (8009f10 <prvInsertTimerInActiveList+0x7c>)
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	4610      	mov	r0, r2
 8009eda:	f7fe f9de 	bl	800829a <vListInsert>
 8009ede:	e012      	b.n	8009f06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d206      	bcs.n	8009ef6 <prvInsertTimerInActiveList+0x62>
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d302      	bcc.n	8009ef6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	e007      	b.n	8009f06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ef6:	4b07      	ldr	r3, [pc, #28]	; (8009f14 <prvInsertTimerInActiveList+0x80>)
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4619      	mov	r1, r3
 8009f00:	4610      	mov	r0, r2
 8009f02:	f7fe f9ca 	bl	800829a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f06:	697b      	ldr	r3, [r7, #20]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	20000f1c 	.word	0x20000f1c
 8009f14:	20000f18 	.word	0x20000f18

08009f18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08e      	sub	sp, #56	; 0x38
 8009f1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f1e:	e0ca      	b.n	800a0b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	da18      	bge.n	8009f58 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f26:	1d3b      	adds	r3, r7, #4
 8009f28:	3304      	adds	r3, #4
 8009f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10a      	bne.n	8009f48 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	61fb      	str	r3, [r7, #28]
}
 8009f44:	bf00      	nop
 8009f46:	e7fe      	b.n	8009f46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f4e:	6850      	ldr	r0, [r2, #4]
 8009f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f52:	6892      	ldr	r2, [r2, #8]
 8009f54:	4611      	mov	r1, r2
 8009f56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f2c0 80ab 	blt.w	800a0b6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	695b      	ldr	r3, [r3, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d004      	beq.n	8009f76 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	3304      	adds	r3, #4
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fe f9cb 	bl	800830c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f76:	463b      	mov	r3, r7
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7ff ff6b 	bl	8009e54 <prvSampleTimeNow>
 8009f7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b09      	cmp	r3, #9
 8009f84:	f200 8096 	bhi.w	800a0b4 <prvProcessReceivedCommands+0x19c>
 8009f88:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <prvProcessReceivedCommands+0x78>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	08009fb9 	.word	0x08009fb9
 8009f94:	08009fb9 	.word	0x08009fb9
 8009f98:	08009fb9 	.word	0x08009fb9
 8009f9c:	0800a02d 	.word	0x0800a02d
 8009fa0:	0800a041 	.word	0x0800a041
 8009fa4:	0800a08b 	.word	0x0800a08b
 8009fa8:	08009fb9 	.word	0x08009fb9
 8009fac:	08009fb9 	.word	0x08009fb9
 8009fb0:	0800a02d 	.word	0x0800a02d
 8009fb4:	0800a041 	.word	0x0800a041
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fbe:	f043 0301 	orr.w	r3, r3, #1
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	18d1      	adds	r1, r2, r3
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fd8:	f7ff ff5c 	bl	8009e94 <prvInsertTimerInActiveList>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d069      	beq.n	800a0b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fe8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ff0:	f003 0304 	and.w	r3, r3, #4
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d05e      	beq.n	800a0b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	441a      	add	r2, r3
 800a000:	2300      	movs	r3, #0
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	2300      	movs	r3, #0
 800a006:	2100      	movs	r1, #0
 800a008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a00a:	f7ff fe05 	bl	8009c18 <xTimerGenericCommand>
 800a00e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a010:	6a3b      	ldr	r3, [r7, #32]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d14f      	bne.n	800a0b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	61bb      	str	r3, [r7, #24]
}
 800a028:	bf00      	nop
 800a02a:	e7fe      	b.n	800a02a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a032:	f023 0301 	bic.w	r3, r3, #1
 800a036:	b2da      	uxtb	r2, r3
 800a038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a03e:	e03a      	b.n	800a0b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a046:	f043 0301 	orr.w	r3, r3, #1
 800a04a:	b2da      	uxtb	r2, r3
 800a04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a056:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10a      	bne.n	800a076 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	617b      	str	r3, [r7, #20]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	699a      	ldr	r2, [r3, #24]
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	18d1      	adds	r1, r2, r3
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a084:	f7ff ff06 	bl	8009e94 <prvInsertTimerInActiveList>
					break;
 800a088:	e015      	b.n	800a0b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a090:	f003 0302 	and.w	r3, r3, #2
 800a094:	2b00      	cmp	r3, #0
 800a096:	d103      	bne.n	800a0a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a09a:	f000 fbe1 	bl	800a860 <vPortFree>
 800a09e:	e00a      	b.n	800a0b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0a6:	f023 0301 	bic.w	r3, r3, #1
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a0b2:	e000      	b.n	800a0b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a0b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0b6:	4b08      	ldr	r3, [pc, #32]	; (800a0d8 <prvProcessReceivedCommands+0x1c0>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	1d39      	adds	r1, r7, #4
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fbec 	bl	800889c <xQueueReceive>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f47f af2a 	bne.w	8009f20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a0cc:	bf00      	nop
 800a0ce:	bf00      	nop
 800a0d0:	3730      	adds	r7, #48	; 0x30
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	20000f20 	.word	0x20000f20

0800a0dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0e2:	e048      	b.n	800a176 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0e4:	4b2d      	ldr	r3, [pc, #180]	; (800a19c <prvSwitchTimerLists+0xc0>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ee:	4b2b      	ldr	r3, [pc, #172]	; (800a19c <prvSwitchTimerLists+0xc0>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fe f905 	bl	800830c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b00      	cmp	r3, #0
 800a116:	d02e      	beq.n	800a176 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	4413      	add	r3, r2
 800a120:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	429a      	cmp	r2, r3
 800a128:	d90e      	bls.n	800a148 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a136:	4b19      	ldr	r3, [pc, #100]	; (800a19c <prvSwitchTimerLists+0xc0>)
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4619      	mov	r1, r3
 800a140:	4610      	mov	r0, r2
 800a142:	f7fe f8aa 	bl	800829a <vListInsert>
 800a146:	e016      	b.n	800a176 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a148:	2300      	movs	r3, #0
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	2300      	movs	r3, #0
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	2100      	movs	r1, #0
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7ff fd60 	bl	8009c18 <xTimerGenericCommand>
 800a158:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	603b      	str	r3, [r7, #0]
}
 800a172:	bf00      	nop
 800a174:	e7fe      	b.n	800a174 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a176:	4b09      	ldr	r3, [pc, #36]	; (800a19c <prvSwitchTimerLists+0xc0>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1b1      	bne.n	800a0e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a180:	4b06      	ldr	r3, [pc, #24]	; (800a19c <prvSwitchTimerLists+0xc0>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a186:	4b06      	ldr	r3, [pc, #24]	; (800a1a0 <prvSwitchTimerLists+0xc4>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a04      	ldr	r2, [pc, #16]	; (800a19c <prvSwitchTimerLists+0xc0>)
 800a18c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a18e:	4a04      	ldr	r2, [pc, #16]	; (800a1a0 <prvSwitchTimerLists+0xc4>)
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	6013      	str	r3, [r2, #0]
}
 800a194:	bf00      	nop
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	20000f18 	.word	0x20000f18
 800a1a0:	20000f1c 	.word	0x20000f1c

0800a1a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a1aa:	f000 f96b 	bl	800a484 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a1ae:	4b15      	ldr	r3, [pc, #84]	; (800a204 <prvCheckForValidListAndQueue+0x60>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d120      	bne.n	800a1f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a1b6:	4814      	ldr	r0, [pc, #80]	; (800a208 <prvCheckForValidListAndQueue+0x64>)
 800a1b8:	f7fe f81e 	bl	80081f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a1bc:	4813      	ldr	r0, [pc, #76]	; (800a20c <prvCheckForValidListAndQueue+0x68>)
 800a1be:	f7fe f81b 	bl	80081f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a1c2:	4b13      	ldr	r3, [pc, #76]	; (800a210 <prvCheckForValidListAndQueue+0x6c>)
 800a1c4:	4a10      	ldr	r2, [pc, #64]	; (800a208 <prvCheckForValidListAndQueue+0x64>)
 800a1c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a1c8:	4b12      	ldr	r3, [pc, #72]	; (800a214 <prvCheckForValidListAndQueue+0x70>)
 800a1ca:	4a10      	ldr	r2, [pc, #64]	; (800a20c <prvCheckForValidListAndQueue+0x68>)
 800a1cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	4b11      	ldr	r3, [pc, #68]	; (800a218 <prvCheckForValidListAndQueue+0x74>)
 800a1d4:	4a11      	ldr	r2, [pc, #68]	; (800a21c <prvCheckForValidListAndQueue+0x78>)
 800a1d6:	2110      	movs	r1, #16
 800a1d8:	200a      	movs	r0, #10
 800a1da:	f7fe f929 	bl	8008430 <xQueueGenericCreateStatic>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	4a08      	ldr	r2, [pc, #32]	; (800a204 <prvCheckForValidListAndQueue+0x60>)
 800a1e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a1e4:	4b07      	ldr	r3, [pc, #28]	; (800a204 <prvCheckForValidListAndQueue+0x60>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d005      	beq.n	800a1f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a1ec:	4b05      	ldr	r3, [pc, #20]	; (800a204 <prvCheckForValidListAndQueue+0x60>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	490b      	ldr	r1, [pc, #44]	; (800a220 <prvCheckForValidListAndQueue+0x7c>)
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe fd42 	bl	8008c7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1f8:	f000 f974 	bl	800a4e4 <vPortExitCritical>
}
 800a1fc:	bf00      	nop
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20000f20 	.word	0x20000f20
 800a208:	20000ef0 	.word	0x20000ef0
 800a20c:	20000f04 	.word	0x20000f04
 800a210:	20000f18 	.word	0x20000f18
 800a214:	20000f1c 	.word	0x20000f1c
 800a218:	20000fcc 	.word	0x20000fcc
 800a21c:	20000f2c 	.word	0x20000f2c
 800a220:	0800b8f0 	.word	0x0800b8f0

0800a224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	3b04      	subs	r3, #4
 800a234:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a23c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3b04      	subs	r3, #4
 800a242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f023 0201 	bic.w	r2, r3, #1
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3b04      	subs	r3, #4
 800a252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a254:	4a0c      	ldr	r2, [pc, #48]	; (800a288 <pxPortInitialiseStack+0x64>)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3b14      	subs	r3, #20
 800a25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	3b04      	subs	r3, #4
 800a26a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f06f 0202 	mvn.w	r2, #2
 800a272:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	3b20      	subs	r3, #32
 800a278:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a27a:	68fb      	ldr	r3, [r7, #12]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	0800a28d 	.word	0x0800a28d

0800a28c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a296:	4b12      	ldr	r3, [pc, #72]	; (800a2e0 <prvTaskExitError+0x54>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29e:	d00a      	beq.n	800a2b6 <prvTaskExitError+0x2a>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	60fb      	str	r3, [r7, #12]
}
 800a2b2:	bf00      	nop
 800a2b4:	e7fe      	b.n	800a2b4 <prvTaskExitError+0x28>
	__asm volatile
 800a2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	60bb      	str	r3, [r7, #8]
}
 800a2c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a2ca:	bf00      	nop
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d0fc      	beq.n	800a2cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a2d2:	bf00      	nop
 800a2d4:	bf00      	nop
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	20000098 	.word	0x20000098
	...

0800a2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2f0:	4b07      	ldr	r3, [pc, #28]	; (800a310 <pxCurrentTCBConst2>)
 800a2f2:	6819      	ldr	r1, [r3, #0]
 800a2f4:	6808      	ldr	r0, [r1, #0]
 800a2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fa:	f380 8809 	msr	PSP, r0
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f04f 0000 	mov.w	r0, #0
 800a306:	f380 8811 	msr	BASEPRI, r0
 800a30a:	4770      	bx	lr
 800a30c:	f3af 8000 	nop.w

0800a310 <pxCurrentTCBConst2>:
 800a310:	200009f0 	.word	0x200009f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a314:	bf00      	nop
 800a316:	bf00      	nop

0800a318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a318:	4808      	ldr	r0, [pc, #32]	; (800a33c <prvPortStartFirstTask+0x24>)
 800a31a:	6800      	ldr	r0, [r0, #0]
 800a31c:	6800      	ldr	r0, [r0, #0]
 800a31e:	f380 8808 	msr	MSP, r0
 800a322:	f04f 0000 	mov.w	r0, #0
 800a326:	f380 8814 	msr	CONTROL, r0
 800a32a:	b662      	cpsie	i
 800a32c:	b661      	cpsie	f
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	df00      	svc	0
 800a338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a33a:	bf00      	nop
 800a33c:	e000ed08 	.word	0xe000ed08

0800a340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a346:	4b46      	ldr	r3, [pc, #280]	; (800a460 <xPortStartScheduler+0x120>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a46      	ldr	r2, [pc, #280]	; (800a464 <xPortStartScheduler+0x124>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d10a      	bne.n	800a366 <xPortStartScheduler+0x26>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	613b      	str	r3, [r7, #16]
}
 800a362:	bf00      	nop
 800a364:	e7fe      	b.n	800a364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a366:	4b3e      	ldr	r3, [pc, #248]	; (800a460 <xPortStartScheduler+0x120>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a3f      	ldr	r2, [pc, #252]	; (800a468 <xPortStartScheduler+0x128>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d10a      	bne.n	800a386 <xPortStartScheduler+0x46>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	60fb      	str	r3, [r7, #12]
}
 800a382:	bf00      	nop
 800a384:	e7fe      	b.n	800a384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a386:	4b39      	ldr	r3, [pc, #228]	; (800a46c <xPortStartScheduler+0x12c>)
 800a388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	22ff      	movs	r2, #255	; 0xff
 800a396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3a0:	78fb      	ldrb	r3, [r7, #3]
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	4b31      	ldr	r3, [pc, #196]	; (800a470 <xPortStartScheduler+0x130>)
 800a3ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3ae:	4b31      	ldr	r3, [pc, #196]	; (800a474 <xPortStartScheduler+0x134>)
 800a3b0:	2207      	movs	r2, #7
 800a3b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3b4:	e009      	b.n	800a3ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a3b6:	4b2f      	ldr	r3, [pc, #188]	; (800a474 <xPortStartScheduler+0x134>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	4a2d      	ldr	r2, [pc, #180]	; (800a474 <xPortStartScheduler+0x134>)
 800a3be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a3c0:	78fb      	ldrb	r3, [r7, #3]
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3ca:	78fb      	ldrb	r3, [r7, #3]
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3d2:	2b80      	cmp	r3, #128	; 0x80
 800a3d4:	d0ef      	beq.n	800a3b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a3d6:	4b27      	ldr	r3, [pc, #156]	; (800a474 <xPortStartScheduler+0x134>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f1c3 0307 	rsb	r3, r3, #7
 800a3de:	2b04      	cmp	r3, #4
 800a3e0:	d00a      	beq.n	800a3f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	60bb      	str	r3, [r7, #8]
}
 800a3f4:	bf00      	nop
 800a3f6:	e7fe      	b.n	800a3f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3f8:	4b1e      	ldr	r3, [pc, #120]	; (800a474 <xPortStartScheduler+0x134>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	021b      	lsls	r3, r3, #8
 800a3fe:	4a1d      	ldr	r2, [pc, #116]	; (800a474 <xPortStartScheduler+0x134>)
 800a400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a402:	4b1c      	ldr	r3, [pc, #112]	; (800a474 <xPortStartScheduler+0x134>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a40a:	4a1a      	ldr	r2, [pc, #104]	; (800a474 <xPortStartScheduler+0x134>)
 800a40c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	b2da      	uxtb	r2, r3
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a416:	4b18      	ldr	r3, [pc, #96]	; (800a478 <xPortStartScheduler+0x138>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a17      	ldr	r2, [pc, #92]	; (800a478 <xPortStartScheduler+0x138>)
 800a41c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a422:	4b15      	ldr	r3, [pc, #84]	; (800a478 <xPortStartScheduler+0x138>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a14      	ldr	r2, [pc, #80]	; (800a478 <xPortStartScheduler+0x138>)
 800a428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a42c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a42e:	f000 f8dd 	bl	800a5ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a432:	4b12      	ldr	r3, [pc, #72]	; (800a47c <xPortStartScheduler+0x13c>)
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a438:	f000 f8fc 	bl	800a634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a43c:	4b10      	ldr	r3, [pc, #64]	; (800a480 <xPortStartScheduler+0x140>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a0f      	ldr	r2, [pc, #60]	; (800a480 <xPortStartScheduler+0x140>)
 800a442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a448:	f7ff ff66 	bl	800a318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a44c:	f7ff f846 	bl	80094dc <vTaskSwitchContext>
	prvTaskExitError();
 800a450:	f7ff ff1c 	bl	800a28c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	e000ed00 	.word	0xe000ed00
 800a464:	410fc271 	.word	0x410fc271
 800a468:	410fc270 	.word	0x410fc270
 800a46c:	e000e400 	.word	0xe000e400
 800a470:	2000101c 	.word	0x2000101c
 800a474:	20001020 	.word	0x20001020
 800a478:	e000ed20 	.word	0xe000ed20
 800a47c:	20000098 	.word	0x20000098
 800a480:	e000ef34 	.word	0xe000ef34

0800a484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	607b      	str	r3, [r7, #4]
}
 800a49c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a49e:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <vPortEnterCritical+0x58>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	4a0d      	ldr	r2, [pc, #52]	; (800a4dc <vPortEnterCritical+0x58>)
 800a4a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a4a8:	4b0c      	ldr	r3, [pc, #48]	; (800a4dc <vPortEnterCritical+0x58>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d10f      	bne.n	800a4d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4b0:	4b0b      	ldr	r3, [pc, #44]	; (800a4e0 <vPortEnterCritical+0x5c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4be:	f383 8811 	msr	BASEPRI, r3
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	603b      	str	r3, [r7, #0]
}
 800a4cc:	bf00      	nop
 800a4ce:	e7fe      	b.n	800a4ce <vPortEnterCritical+0x4a>
	}
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	20000098 	.word	0x20000098
 800a4e0:	e000ed04 	.word	0xe000ed04

0800a4e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4ea:	4b12      	ldr	r3, [pc, #72]	; (800a534 <vPortExitCritical+0x50>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10a      	bne.n	800a508 <vPortExitCritical+0x24>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	607b      	str	r3, [r7, #4]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a508:	4b0a      	ldr	r3, [pc, #40]	; (800a534 <vPortExitCritical+0x50>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3b01      	subs	r3, #1
 800a50e:	4a09      	ldr	r2, [pc, #36]	; (800a534 <vPortExitCritical+0x50>)
 800a510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a512:	4b08      	ldr	r3, [pc, #32]	; (800a534 <vPortExitCritical+0x50>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d105      	bne.n	800a526 <vPortExitCritical+0x42>
 800a51a:	2300      	movs	r3, #0
 800a51c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	f383 8811 	msr	BASEPRI, r3
}
 800a524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a526:	bf00      	nop
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	20000098 	.word	0x20000098
	...

0800a540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a540:	f3ef 8009 	mrs	r0, PSP
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	4b15      	ldr	r3, [pc, #84]	; (800a5a0 <pxCurrentTCBConst>)
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	f01e 0f10 	tst.w	lr, #16
 800a550:	bf08      	it	eq
 800a552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55a:	6010      	str	r0, [r2, #0]
 800a55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a560:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a564:	f380 8811 	msr	BASEPRI, r0
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f7fe ffb4 	bl	80094dc <vTaskSwitchContext>
 800a574:	f04f 0000 	mov.w	r0, #0
 800a578:	f380 8811 	msr	BASEPRI, r0
 800a57c:	bc09      	pop	{r0, r3}
 800a57e:	6819      	ldr	r1, [r3, #0]
 800a580:	6808      	ldr	r0, [r1, #0]
 800a582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a586:	f01e 0f10 	tst.w	lr, #16
 800a58a:	bf08      	it	eq
 800a58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a590:	f380 8809 	msr	PSP, r0
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	f3af 8000 	nop.w

0800a5a0 <pxCurrentTCBConst>:
 800a5a0:	200009f0 	.word	0x200009f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop

0800a5a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	607b      	str	r3, [r7, #4]
}
 800a5c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a5c2:	f7fe fed1 	bl	8009368 <xTaskIncrementTick>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5cc:	4b06      	ldr	r3, [pc, #24]	; (800a5e8 <xPortSysTickHandler+0x40>)
 800a5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	f383 8811 	msr	BASEPRI, r3
}
 800a5de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5e0:	bf00      	nop
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	e000ed04 	.word	0xe000ed04

0800a5ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5f0:	4b0b      	ldr	r3, [pc, #44]	; (800a620 <vPortSetupTimerInterrupt+0x34>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5f6:	4b0b      	ldr	r3, [pc, #44]	; (800a624 <vPortSetupTimerInterrupt+0x38>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <vPortSetupTimerInterrupt+0x3c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a0a      	ldr	r2, [pc, #40]	; (800a62c <vPortSetupTimerInterrupt+0x40>)
 800a602:	fba2 2303 	umull	r2, r3, r2, r3
 800a606:	099b      	lsrs	r3, r3, #6
 800a608:	4a09      	ldr	r2, [pc, #36]	; (800a630 <vPortSetupTimerInterrupt+0x44>)
 800a60a:	3b01      	subs	r3, #1
 800a60c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a60e:	4b04      	ldr	r3, [pc, #16]	; (800a620 <vPortSetupTimerInterrupt+0x34>)
 800a610:	2207      	movs	r2, #7
 800a612:	601a      	str	r2, [r3, #0]
}
 800a614:	bf00      	nop
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	e000e010 	.word	0xe000e010
 800a624:	e000e018 	.word	0xe000e018
 800a628:	20000000 	.word	0x20000000
 800a62c:	10624dd3 	.word	0x10624dd3
 800a630:	e000e014 	.word	0xe000e014

0800a634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a644 <vPortEnableVFP+0x10>
 800a638:	6801      	ldr	r1, [r0, #0]
 800a63a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a63e:	6001      	str	r1, [r0, #0]
 800a640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a642:	bf00      	nop
 800a644:	e000ed88 	.word	0xe000ed88

0800a648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a64e:	f3ef 8305 	mrs	r3, IPSR
 800a652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2b0f      	cmp	r3, #15
 800a658:	d914      	bls.n	800a684 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a65a:	4a17      	ldr	r2, [pc, #92]	; (800a6b8 <vPortValidateInterruptPriority+0x70>)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4413      	add	r3, r2
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a664:	4b15      	ldr	r3, [pc, #84]	; (800a6bc <vPortValidateInterruptPriority+0x74>)
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	7afa      	ldrb	r2, [r7, #11]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d20a      	bcs.n	800a684 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	607b      	str	r3, [r7, #4]
}
 800a680:	bf00      	nop
 800a682:	e7fe      	b.n	800a682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a684:	4b0e      	ldr	r3, [pc, #56]	; (800a6c0 <vPortValidateInterruptPriority+0x78>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a68c:	4b0d      	ldr	r3, [pc, #52]	; (800a6c4 <vPortValidateInterruptPriority+0x7c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	429a      	cmp	r2, r3
 800a692:	d90a      	bls.n	800a6aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	603b      	str	r3, [r7, #0]
}
 800a6a6:	bf00      	nop
 800a6a8:	e7fe      	b.n	800a6a8 <vPortValidateInterruptPriority+0x60>
	}
 800a6aa:	bf00      	nop
 800a6ac:	3714      	adds	r7, #20
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	e000e3f0 	.word	0xe000e3f0
 800a6bc:	2000101c 	.word	0x2000101c
 800a6c0:	e000ed0c 	.word	0xe000ed0c
 800a6c4:	20001020 	.word	0x20001020

0800a6c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08a      	sub	sp, #40	; 0x28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6d4:	f7fe fd8c 	bl	80091f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6d8:	4b5b      	ldr	r3, [pc, #364]	; (800a848 <pvPortMalloc+0x180>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6e0:	f000 f920 	bl	800a924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6e4:	4b59      	ldr	r3, [pc, #356]	; (800a84c <pvPortMalloc+0x184>)
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f040 8093 	bne.w	800a818 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d01d      	beq.n	800a734 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a6f8:	2208      	movs	r2, #8
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f003 0307 	and.w	r3, r3, #7
 800a706:	2b00      	cmp	r3, #0
 800a708:	d014      	beq.n	800a734 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f023 0307 	bic.w	r3, r3, #7
 800a710:	3308      	adds	r3, #8
 800a712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f003 0307 	and.w	r3, r3, #7
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00a      	beq.n	800a734 <pvPortMalloc+0x6c>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	617b      	str	r3, [r7, #20]
}
 800a730:	bf00      	nop
 800a732:	e7fe      	b.n	800a732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d06e      	beq.n	800a818 <pvPortMalloc+0x150>
 800a73a:	4b45      	ldr	r3, [pc, #276]	; (800a850 <pvPortMalloc+0x188>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	429a      	cmp	r2, r3
 800a742:	d869      	bhi.n	800a818 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a744:	4b43      	ldr	r3, [pc, #268]	; (800a854 <pvPortMalloc+0x18c>)
 800a746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a748:	4b42      	ldr	r3, [pc, #264]	; (800a854 <pvPortMalloc+0x18c>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a74e:	e004      	b.n	800a75a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	429a      	cmp	r2, r3
 800a762:	d903      	bls.n	800a76c <pvPortMalloc+0xa4>
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1f1      	bne.n	800a750 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a76c:	4b36      	ldr	r3, [pc, #216]	; (800a848 <pvPortMalloc+0x180>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a772:	429a      	cmp	r2, r3
 800a774:	d050      	beq.n	800a818 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a776:	6a3b      	ldr	r3, [r7, #32]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2208      	movs	r2, #8
 800a77c:	4413      	add	r3, r2
 800a77e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	6a3b      	ldr	r3, [r7, #32]
 800a786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	1ad2      	subs	r2, r2, r3
 800a790:	2308      	movs	r3, #8
 800a792:	005b      	lsls	r3, r3, #1
 800a794:	429a      	cmp	r2, r3
 800a796:	d91f      	bls.n	800a7d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4413      	add	r3, r2
 800a79e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00a      	beq.n	800a7c0 <pvPortMalloc+0xf8>
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	613b      	str	r3, [r7, #16]
}
 800a7bc:	bf00      	nop
 800a7be:	e7fe      	b.n	800a7be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	1ad2      	subs	r2, r2, r3
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7d2:	69b8      	ldr	r0, [r7, #24]
 800a7d4:	f000 f908 	bl	800a9e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7d8:	4b1d      	ldr	r3, [pc, #116]	; (800a850 <pvPortMalloc+0x188>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	4a1b      	ldr	r2, [pc, #108]	; (800a850 <pvPortMalloc+0x188>)
 800a7e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7e6:	4b1a      	ldr	r3, [pc, #104]	; (800a850 <pvPortMalloc+0x188>)
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	4b1b      	ldr	r3, [pc, #108]	; (800a858 <pvPortMalloc+0x190>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d203      	bcs.n	800a7fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7f2:	4b17      	ldr	r3, [pc, #92]	; (800a850 <pvPortMalloc+0x188>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a18      	ldr	r2, [pc, #96]	; (800a858 <pvPortMalloc+0x190>)
 800a7f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	685a      	ldr	r2, [r3, #4]
 800a7fe:	4b13      	ldr	r3, [pc, #76]	; (800a84c <pvPortMalloc+0x184>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	431a      	orrs	r2, r3
 800a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80a:	2200      	movs	r2, #0
 800a80c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a80e:	4b13      	ldr	r3, [pc, #76]	; (800a85c <pvPortMalloc+0x194>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3301      	adds	r3, #1
 800a814:	4a11      	ldr	r2, [pc, #68]	; (800a85c <pvPortMalloc+0x194>)
 800a816:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a818:	f7fe fcf8 	bl	800920c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	f003 0307 	and.w	r3, r3, #7
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00a      	beq.n	800a83c <pvPortMalloc+0x174>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82a:	f383 8811 	msr	BASEPRI, r3
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	60fb      	str	r3, [r7, #12]
}
 800a838:	bf00      	nop
 800a83a:	e7fe      	b.n	800a83a <pvPortMalloc+0x172>
	return pvReturn;
 800a83c:	69fb      	ldr	r3, [r7, #28]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3728      	adds	r7, #40	; 0x28
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	20001be4 	.word	0x20001be4
 800a84c:	20001bf8 	.word	0x20001bf8
 800a850:	20001be8 	.word	0x20001be8
 800a854:	20001bdc 	.word	0x20001bdc
 800a858:	20001bec 	.word	0x20001bec
 800a85c:	20001bf0 	.word	0x20001bf0

0800a860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d04d      	beq.n	800a90e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a872:	2308      	movs	r3, #8
 800a874:	425b      	negs	r3, r3
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	4413      	add	r3, r2
 800a87a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	4b24      	ldr	r3, [pc, #144]	; (800a918 <vPortFree+0xb8>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4013      	ands	r3, r2
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10a      	bne.n	800a8a4 <vPortFree+0x44>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	60fb      	str	r3, [r7, #12]
}
 800a8a0:	bf00      	nop
 800a8a2:	e7fe      	b.n	800a8a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00a      	beq.n	800a8c2 <vPortFree+0x62>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	60bb      	str	r3, [r7, #8]
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	685a      	ldr	r2, [r3, #4]
 800a8c6:	4b14      	ldr	r3, [pc, #80]	; (800a918 <vPortFree+0xb8>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d01e      	beq.n	800a90e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d11a      	bne.n	800a90e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	4b0e      	ldr	r3, [pc, #56]	; (800a918 <vPortFree+0xb8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	43db      	mvns	r3, r3
 800a8e2:	401a      	ands	r2, r3
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8e8:	f7fe fc82 	bl	80091f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	4b0a      	ldr	r3, [pc, #40]	; (800a91c <vPortFree+0xbc>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	4a09      	ldr	r2, [pc, #36]	; (800a91c <vPortFree+0xbc>)
 800a8f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8fa:	6938      	ldr	r0, [r7, #16]
 800a8fc:	f000 f874 	bl	800a9e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <vPortFree+0xc0>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3301      	adds	r3, #1
 800a906:	4a06      	ldr	r2, [pc, #24]	; (800a920 <vPortFree+0xc0>)
 800a908:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a90a:	f7fe fc7f 	bl	800920c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a90e:	bf00      	nop
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	20001bf8 	.word	0x20001bf8
 800a91c:	20001be8 	.word	0x20001be8
 800a920:	20001bf4 	.word	0x20001bf4

0800a924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a92a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a92e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a930:	4b27      	ldr	r3, [pc, #156]	; (800a9d0 <prvHeapInit+0xac>)
 800a932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f003 0307 	and.w	r3, r3, #7
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00c      	beq.n	800a958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3307      	adds	r3, #7
 800a942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f023 0307 	bic.w	r3, r3, #7
 800a94a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	4a1f      	ldr	r2, [pc, #124]	; (800a9d0 <prvHeapInit+0xac>)
 800a954:	4413      	add	r3, r2
 800a956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a95c:	4a1d      	ldr	r2, [pc, #116]	; (800a9d4 <prvHeapInit+0xb0>)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a962:	4b1c      	ldr	r3, [pc, #112]	; (800a9d4 <prvHeapInit+0xb0>)
 800a964:	2200      	movs	r2, #0
 800a966:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	4413      	add	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a970:	2208      	movs	r2, #8
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	1a9b      	subs	r3, r3, r2
 800a976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f023 0307 	bic.w	r3, r3, #7
 800a97e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4a15      	ldr	r2, [pc, #84]	; (800a9d8 <prvHeapInit+0xb4>)
 800a984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a986:	4b14      	ldr	r3, [pc, #80]	; (800a9d8 <prvHeapInit+0xb4>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2200      	movs	r2, #0
 800a98c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a98e:	4b12      	ldr	r3, [pc, #72]	; (800a9d8 <prvHeapInit+0xb4>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	1ad2      	subs	r2, r2, r3
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9a4:	4b0c      	ldr	r3, [pc, #48]	; (800a9d8 <prvHeapInit+0xb4>)
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	4a0a      	ldr	r2, [pc, #40]	; (800a9dc <prvHeapInit+0xb8>)
 800a9b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	4a09      	ldr	r2, [pc, #36]	; (800a9e0 <prvHeapInit+0xbc>)
 800a9ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9bc:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <prvHeapInit+0xc0>)
 800a9be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9c2:	601a      	str	r2, [r3, #0]
}
 800a9c4:	bf00      	nop
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	20001024 	.word	0x20001024
 800a9d4:	20001bdc 	.word	0x20001bdc
 800a9d8:	20001be4 	.word	0x20001be4
 800a9dc:	20001bec 	.word	0x20001bec
 800a9e0:	20001be8 	.word	0x20001be8
 800a9e4:	20001bf8 	.word	0x20001bf8

0800a9e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9f0:	4b28      	ldr	r3, [pc, #160]	; (800aa94 <prvInsertBlockIntoFreeList+0xac>)
 800a9f2:	60fb      	str	r3, [r7, #12]
 800a9f4:	e002      	b.n	800a9fc <prvInsertBlockIntoFreeList+0x14>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60fb      	str	r3, [r7, #12]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d8f7      	bhi.n	800a9f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	4413      	add	r3, r2
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d108      	bne.n	800aa2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	685a      	ldr	r2, [r3, #4]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	441a      	add	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	441a      	add	r2, r3
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d118      	bne.n	800aa70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	4b15      	ldr	r3, [pc, #84]	; (800aa98 <prvInsertBlockIntoFreeList+0xb0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d00d      	beq.n	800aa66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685a      	ldr	r2, [r3, #4]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	441a      	add	r2, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	e008      	b.n	800aa78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa66:	4b0c      	ldr	r3, [pc, #48]	; (800aa98 <prvInsertBlockIntoFreeList+0xb0>)
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	601a      	str	r2, [r3, #0]
 800aa6e:	e003      	b.n	800aa78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d002      	beq.n	800aa86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa86:	bf00      	nop
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	20001bdc 	.word	0x20001bdc
 800aa98:	20001be4 	.word	0x20001be4

0800aa9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	4912      	ldr	r1, [pc, #72]	; (800aaec <MX_USB_DEVICE_Init+0x50>)
 800aaa4:	4812      	ldr	r0, [pc, #72]	; (800aaf0 <MX_USB_DEVICE_Init+0x54>)
 800aaa6:	f7fb ff15 	bl	80068d4 <USBD_Init>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aab0:	f7f5 fe84 	bl	80007bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aab4:	490f      	ldr	r1, [pc, #60]	; (800aaf4 <MX_USB_DEVICE_Init+0x58>)
 800aab6:	480e      	ldr	r0, [pc, #56]	; (800aaf0 <MX_USB_DEVICE_Init+0x54>)
 800aab8:	f7fb ff3c 	bl	8006934 <USBD_RegisterClass>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aac2:	f7f5 fe7b 	bl	80007bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aac6:	490c      	ldr	r1, [pc, #48]	; (800aaf8 <MX_USB_DEVICE_Init+0x5c>)
 800aac8:	4809      	ldr	r0, [pc, #36]	; (800aaf0 <MX_USB_DEVICE_Init+0x54>)
 800aaca:	f7fb fe73 	bl	80067b4 <USBD_CDC_RegisterInterface>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aad4:	f7f5 fe72 	bl	80007bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aad8:	4805      	ldr	r0, [pc, #20]	; (800aaf0 <MX_USB_DEVICE_Init+0x54>)
 800aada:	f7fb ff61 	bl	80069a0 <USBD_Start>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d001      	beq.n	800aae8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aae4:	f7f5 fe6a 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aae8:	bf00      	nop
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	200000b0 	.word	0x200000b0
 800aaf0:	20001bfc 	.word	0x20001bfc
 800aaf4:	20000018 	.word	0x20000018
 800aaf8:	2000009c 	.word	0x2000009c

0800aafc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ab00:	2200      	movs	r2, #0
 800ab02:	4905      	ldr	r1, [pc, #20]	; (800ab18 <CDC_Init_FS+0x1c>)
 800ab04:	4805      	ldr	r0, [pc, #20]	; (800ab1c <CDC_Init_FS+0x20>)
 800ab06:	f7fb fe6f 	bl	80067e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ab0a:	4905      	ldr	r1, [pc, #20]	; (800ab20 <CDC_Init_FS+0x24>)
 800ab0c:	4803      	ldr	r0, [pc, #12]	; (800ab1c <CDC_Init_FS+0x20>)
 800ab0e:	f7fb fe8d 	bl	800682c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ab12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	200026d8 	.word	0x200026d8
 800ab1c:	20001bfc 	.word	0x20001bfc
 800ab20:	20001ed8 	.word	0x20001ed8

0800ab24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ab24:	b480      	push	{r7}
 800ab26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ab28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	6039      	str	r1, [r7, #0]
 800ab3e:	71fb      	strb	r3, [r7, #7]
 800ab40:	4613      	mov	r3, r2
 800ab42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ab44:	79fb      	ldrb	r3, [r7, #7]
 800ab46:	2b23      	cmp	r3, #35	; 0x23
 800ab48:	d84a      	bhi.n	800abe0 <CDC_Control_FS+0xac>
 800ab4a:	a201      	add	r2, pc, #4	; (adr r2, 800ab50 <CDC_Control_FS+0x1c>)
 800ab4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab50:	0800abe1 	.word	0x0800abe1
 800ab54:	0800abe1 	.word	0x0800abe1
 800ab58:	0800abe1 	.word	0x0800abe1
 800ab5c:	0800abe1 	.word	0x0800abe1
 800ab60:	0800abe1 	.word	0x0800abe1
 800ab64:	0800abe1 	.word	0x0800abe1
 800ab68:	0800abe1 	.word	0x0800abe1
 800ab6c:	0800abe1 	.word	0x0800abe1
 800ab70:	0800abe1 	.word	0x0800abe1
 800ab74:	0800abe1 	.word	0x0800abe1
 800ab78:	0800abe1 	.word	0x0800abe1
 800ab7c:	0800abe1 	.word	0x0800abe1
 800ab80:	0800abe1 	.word	0x0800abe1
 800ab84:	0800abe1 	.word	0x0800abe1
 800ab88:	0800abe1 	.word	0x0800abe1
 800ab8c:	0800abe1 	.word	0x0800abe1
 800ab90:	0800abe1 	.word	0x0800abe1
 800ab94:	0800abe1 	.word	0x0800abe1
 800ab98:	0800abe1 	.word	0x0800abe1
 800ab9c:	0800abe1 	.word	0x0800abe1
 800aba0:	0800abe1 	.word	0x0800abe1
 800aba4:	0800abe1 	.word	0x0800abe1
 800aba8:	0800abe1 	.word	0x0800abe1
 800abac:	0800abe1 	.word	0x0800abe1
 800abb0:	0800abe1 	.word	0x0800abe1
 800abb4:	0800abe1 	.word	0x0800abe1
 800abb8:	0800abe1 	.word	0x0800abe1
 800abbc:	0800abe1 	.word	0x0800abe1
 800abc0:	0800abe1 	.word	0x0800abe1
 800abc4:	0800abe1 	.word	0x0800abe1
 800abc8:	0800abe1 	.word	0x0800abe1
 800abcc:	0800abe1 	.word	0x0800abe1
 800abd0:	0800abe1 	.word	0x0800abe1
 800abd4:	0800abe1 	.word	0x0800abe1
 800abd8:	0800abe1 	.word	0x0800abe1
 800abdc:	0800abe1 	.word	0x0800abe1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800abe0:	bf00      	nop
  }

  return (USBD_OK);
 800abe2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800abfa:	6879      	ldr	r1, [r7, #4]
 800abfc:	4805      	ldr	r0, [pc, #20]	; (800ac14 <CDC_Receive_FS+0x24>)
 800abfe:	f7fb fe15 	bl	800682c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac02:	4804      	ldr	r0, [pc, #16]	; (800ac14 <CDC_Receive_FS+0x24>)
 800ac04:	f7fb fe30 	bl	8006868 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ac08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20001bfc 	.word	0x20001bfc

0800ac18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b087      	sub	sp, #28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	4613      	mov	r3, r2
 800ac24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ac2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	371c      	adds	r7, #28
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
	...

0800ac3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	4603      	mov	r3, r0
 800ac44:	6039      	str	r1, [r7, #0]
 800ac46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2212      	movs	r2, #18
 800ac4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ac4e:	4b03      	ldr	r3, [pc, #12]	; (800ac5c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	200000d0 	.word	0x200000d0

0800ac60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	4603      	mov	r3, r0
 800ac68:	6039      	str	r1, [r7, #0]
 800ac6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	2204      	movs	r2, #4
 800ac70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac72:	4b03      	ldr	r3, [pc, #12]	; (800ac80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	200000f0 	.word	0x200000f0

0800ac84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	6039      	str	r1, [r7, #0]
 800ac8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac90:	79fb      	ldrb	r3, [r7, #7]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d105      	bne.n	800aca2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	4907      	ldr	r1, [pc, #28]	; (800acb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac9a:	4808      	ldr	r0, [pc, #32]	; (800acbc <USBD_FS_ProductStrDescriptor+0x38>)
 800ac9c:	f7fd f85c 	bl	8007d58 <USBD_GetString>
 800aca0:	e004      	b.n	800acac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	4904      	ldr	r1, [pc, #16]	; (800acb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800aca6:	4805      	ldr	r0, [pc, #20]	; (800acbc <USBD_FS_ProductStrDescriptor+0x38>)
 800aca8:	f7fd f856 	bl	8007d58 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acac:	4b02      	ldr	r3, [pc, #8]	; (800acb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20002ed8 	.word	0x20002ed8
 800acbc:	0800b8f8 	.word	0x0800b8f8

0800acc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	4603      	mov	r3, r0
 800acc8:	6039      	str	r1, [r7, #0]
 800acca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	4904      	ldr	r1, [pc, #16]	; (800ace0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800acd0:	4804      	ldr	r0, [pc, #16]	; (800ace4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800acd2:	f7fd f841 	bl	8007d58 <USBD_GetString>
  return USBD_StrDesc;
 800acd6:	4b02      	ldr	r3, [pc, #8]	; (800ace0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	20002ed8 	.word	0x20002ed8
 800ace4:	0800b910 	.word	0x0800b910

0800ace8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	6039      	str	r1, [r7, #0]
 800acf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	221a      	movs	r2, #26
 800acf8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800acfa:	f000 f855 	bl	800ada8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800acfe:	4b02      	ldr	r3, [pc, #8]	; (800ad08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	200000f4 	.word	0x200000f4

0800ad0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	4603      	mov	r3, r0
 800ad14:	6039      	str	r1, [r7, #0]
 800ad16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad18:	79fb      	ldrb	r3, [r7, #7]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d105      	bne.n	800ad2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	4907      	ldr	r1, [pc, #28]	; (800ad40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad22:	4808      	ldr	r0, [pc, #32]	; (800ad44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad24:	f7fd f818 	bl	8007d58 <USBD_GetString>
 800ad28:	e004      	b.n	800ad34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad2a:	683a      	ldr	r2, [r7, #0]
 800ad2c:	4904      	ldr	r1, [pc, #16]	; (800ad40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad2e:	4805      	ldr	r0, [pc, #20]	; (800ad44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad30:	f7fd f812 	bl	8007d58 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad34:	4b02      	ldr	r3, [pc, #8]	; (800ad40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	20002ed8 	.word	0x20002ed8
 800ad44:	0800b924 	.word	0x0800b924

0800ad48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	4603      	mov	r3, r0
 800ad50:	6039      	str	r1, [r7, #0]
 800ad52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad54:	79fb      	ldrb	r3, [r7, #7]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d105      	bne.n	800ad66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	4907      	ldr	r1, [pc, #28]	; (800ad7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad5e:	4808      	ldr	r0, [pc, #32]	; (800ad80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad60:	f7fc fffa 	bl	8007d58 <USBD_GetString>
 800ad64:	e004      	b.n	800ad70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad66:	683a      	ldr	r2, [r7, #0]
 800ad68:	4904      	ldr	r1, [pc, #16]	; (800ad7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad6a:	4805      	ldr	r0, [pc, #20]	; (800ad80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad6c:	f7fc fff4 	bl	8007d58 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad70:	4b02      	ldr	r3, [pc, #8]	; (800ad7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	20002ed8 	.word	0x20002ed8
 800ad80:	0800b930 	.word	0x0800b930

0800ad84 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	6039      	str	r1, [r7, #0]
 800ad8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	220c      	movs	r2, #12
 800ad94:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ad96:	4b03      	ldr	r3, [pc, #12]	; (800ada4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	200000e4 	.word	0x200000e4

0800ada8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800adae:	4b0f      	ldr	r3, [pc, #60]	; (800adec <Get_SerialNum+0x44>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800adb4:	4b0e      	ldr	r3, [pc, #56]	; (800adf0 <Get_SerialNum+0x48>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800adba:	4b0e      	ldr	r3, [pc, #56]	; (800adf4 <Get_SerialNum+0x4c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4413      	add	r3, r2
 800adc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d009      	beq.n	800ade2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800adce:	2208      	movs	r2, #8
 800add0:	4909      	ldr	r1, [pc, #36]	; (800adf8 <Get_SerialNum+0x50>)
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f000 f814 	bl	800ae00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800add8:	2204      	movs	r2, #4
 800adda:	4908      	ldr	r1, [pc, #32]	; (800adfc <Get_SerialNum+0x54>)
 800addc:	68b8      	ldr	r0, [r7, #8]
 800adde:	f000 f80f 	bl	800ae00 <IntToUnicode>
  }
}
 800ade2:	bf00      	nop
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	1fff7590 	.word	0x1fff7590
 800adf0:	1fff7594 	.word	0x1fff7594
 800adf4:	1fff7598 	.word	0x1fff7598
 800adf8:	200000f6 	.word	0x200000f6
 800adfc:	20000106 	.word	0x20000106

0800ae00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b087      	sub	sp, #28
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae12:	2300      	movs	r3, #0
 800ae14:	75fb      	strb	r3, [r7, #23]
 800ae16:	e027      	b.n	800ae68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	0f1b      	lsrs	r3, r3, #28
 800ae1c:	2b09      	cmp	r3, #9
 800ae1e:	d80b      	bhi.n	800ae38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	0f1b      	lsrs	r3, r3, #28
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
 800ae28:	005b      	lsls	r3, r3, #1
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	440b      	add	r3, r1
 800ae30:	3230      	adds	r2, #48	; 0x30
 800ae32:	b2d2      	uxtb	r2, r2
 800ae34:	701a      	strb	r2, [r3, #0]
 800ae36:	e00a      	b.n	800ae4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	0f1b      	lsrs	r3, r3, #28
 800ae3c:	b2da      	uxtb	r2, r3
 800ae3e:	7dfb      	ldrb	r3, [r7, #23]
 800ae40:	005b      	lsls	r3, r3, #1
 800ae42:	4619      	mov	r1, r3
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	440b      	add	r3, r1
 800ae48:	3237      	adds	r2, #55	; 0x37
 800ae4a:	b2d2      	uxtb	r2, r2
 800ae4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	011b      	lsls	r3, r3, #4
 800ae52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ae54:	7dfb      	ldrb	r3, [r7, #23]
 800ae56:	005b      	lsls	r3, r3, #1
 800ae58:	3301      	adds	r3, #1
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	2200      	movs	r2, #0
 800ae60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ae62:	7dfb      	ldrb	r3, [r7, #23]
 800ae64:	3301      	adds	r3, #1
 800ae66:	75fb      	strb	r3, [r7, #23]
 800ae68:	7dfa      	ldrb	r2, [r7, #23]
 800ae6a:	79fb      	ldrb	r3, [r7, #7]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d3d3      	bcc.n	800ae18 <IntToUnicode+0x18>
  }
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	371c      	adds	r7, #28
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
	...

0800ae80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b0ae      	sub	sp, #184	; 0xb8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	601a      	str	r2, [r3, #0]
 800ae90:	605a      	str	r2, [r3, #4]
 800ae92:	609a      	str	r2, [r3, #8]
 800ae94:	60da      	str	r2, [r3, #12]
 800ae96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ae98:	f107 0318 	add.w	r3, r7, #24
 800ae9c:	228c      	movs	r2, #140	; 0x8c
 800ae9e:	2100      	movs	r1, #0
 800aea0:	4618      	mov	r0, r3
 800aea2:	f000 fc21 	bl	800b6e8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aeae:	d163      	bne.n	800af78 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800aeb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aeb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aebc:	f107 0318 	add.w	r3, r7, #24
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7f8 f97b 	bl	80031bc <HAL_RCCEx_PeriphCLKConfig>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d001      	beq.n	800aed0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800aecc:	f7f5 fc76 	bl	80007bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aed0:	4b2b      	ldr	r3, [pc, #172]	; (800af80 <HAL_PCD_MspInit+0x100>)
 800aed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aed4:	4a2a      	ldr	r2, [pc, #168]	; (800af80 <HAL_PCD_MspInit+0x100>)
 800aed6:	f043 0301 	orr.w	r3, r3, #1
 800aeda:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aedc:	4b28      	ldr	r3, [pc, #160]	; (800af80 <HAL_PCD_MspInit+0x100>)
 800aede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	617b      	str	r3, [r7, #20]
 800aee6:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800aee8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800aeec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aef0:	2302      	movs	r3, #2
 800aef2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aef6:	2300      	movs	r3, #0
 800aef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aefc:	2303      	movs	r3, #3
 800aefe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af02:	230a      	movs	r3, #10
 800af04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800af0c:	4619      	mov	r1, r3
 800af0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af12:	f7f5 fef3 	bl	8000cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af16:	4b1a      	ldr	r3, [pc, #104]	; (800af80 <HAL_PCD_MspInit+0x100>)
 800af18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af1a:	4a19      	ldr	r2, [pc, #100]	; (800af80 <HAL_PCD_MspInit+0x100>)
 800af1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800af20:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af22:	4b17      	ldr	r3, [pc, #92]	; (800af80 <HAL_PCD_MspInit+0x100>)
 800af24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af2a:	613b      	str	r3, [r7, #16]
 800af2c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af2e:	4b14      	ldr	r3, [pc, #80]	; (800af80 <HAL_PCD_MspInit+0x100>)
 800af30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af36:	2b00      	cmp	r3, #0
 800af38:	d114      	bne.n	800af64 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af3a:	4b11      	ldr	r3, [pc, #68]	; (800af80 <HAL_PCD_MspInit+0x100>)
 800af3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af3e:	4a10      	ldr	r2, [pc, #64]	; (800af80 <HAL_PCD_MspInit+0x100>)
 800af40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af44:	6593      	str	r3, [r2, #88]	; 0x58
 800af46:	4b0e      	ldr	r3, [pc, #56]	; (800af80 <HAL_PCD_MspInit+0x100>)
 800af48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af4e:	60fb      	str	r3, [r7, #12]
 800af50:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800af52:	f7f7 faa3 	bl	800249c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800af56:	4b0a      	ldr	r3, [pc, #40]	; (800af80 <HAL_PCD_MspInit+0x100>)
 800af58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af5a:	4a09      	ldr	r2, [pc, #36]	; (800af80 <HAL_PCD_MspInit+0x100>)
 800af5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af60:	6593      	str	r3, [r2, #88]	; 0x58
 800af62:	e001      	b.n	800af68 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800af64:	f7f7 fa9a 	bl	800249c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800af68:	2200      	movs	r2, #0
 800af6a:	2105      	movs	r1, #5
 800af6c:	2043      	movs	r0, #67	; 0x43
 800af6e:	f7f5 fe9b 	bl	8000ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800af72:	2043      	movs	r0, #67	; 0x43
 800af74:	f7f5 feb4 	bl	8000ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800af78:	bf00      	nop
 800af7a:	37b8      	adds	r7, #184	; 0xb8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	40021000 	.word	0x40021000

0800af84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800af98:	4619      	mov	r1, r3
 800af9a:	4610      	mov	r0, r2
 800af9c:	f7fb fd4d 	bl	8006a3a <USBD_LL_SetupStage>
}
 800afa0:	bf00      	nop
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	460b      	mov	r3, r1
 800afb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800afba:	78fa      	ldrb	r2, [r7, #3]
 800afbc:	6879      	ldr	r1, [r7, #4]
 800afbe:	4613      	mov	r3, r2
 800afc0:	00db      	lsls	r3, r3, #3
 800afc2:	4413      	add	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	440b      	add	r3, r1
 800afc8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	78fb      	ldrb	r3, [r7, #3]
 800afd0:	4619      	mov	r1, r3
 800afd2:	f7fb fd87 	bl	8006ae4 <USBD_LL_DataOutStage>
}
 800afd6:	bf00      	nop
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b082      	sub	sp, #8
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	460b      	mov	r3, r1
 800afe8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800aff0:	78fa      	ldrb	r2, [r7, #3]
 800aff2:	6879      	ldr	r1, [r7, #4]
 800aff4:	4613      	mov	r3, r2
 800aff6:	00db      	lsls	r3, r3, #3
 800aff8:	4413      	add	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	440b      	add	r3, r1
 800affe:	3348      	adds	r3, #72	; 0x48
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	78fb      	ldrb	r3, [r7, #3]
 800b004:	4619      	mov	r1, r3
 800b006:	f7fb fe20 	bl	8006c4a <USBD_LL_DataInStage>
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b020:	4618      	mov	r0, r3
 800b022:	f7fb ff5a 	bl	8006eda <USBD_LL_SOF>
}
 800b026:	bf00      	nop
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b084      	sub	sp, #16
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b036:	2301      	movs	r3, #1
 800b038:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d001      	beq.n	800b046 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b042:	f7f5 fbbb 	bl	80007bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b04c:	7bfa      	ldrb	r2, [r7, #15]
 800b04e:	4611      	mov	r1, r2
 800b050:	4618      	mov	r0, r3
 800b052:	f7fb fefe 	bl	8006e52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fb fea6 	bl	8006dae <USBD_LL_Reset>
}
 800b062:	bf00      	nop
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
	...

0800b06c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	6812      	ldr	r2, [r2, #0]
 800b082:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b086:	f043 0301 	orr.w	r3, r3, #1
 800b08a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b092:	4618      	mov	r0, r3
 800b094:	f7fb feed 	bl	8006e72 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a1b      	ldr	r3, [r3, #32]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d005      	beq.n	800b0ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0a0:	4b04      	ldr	r3, [pc, #16]	; (800b0b4 <HAL_PCD_SuspendCallback+0x48>)
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	4a03      	ldr	r2, [pc, #12]	; (800b0b4 <HAL_PCD_SuspendCallback+0x48>)
 800b0a6:	f043 0306 	orr.w	r3, r3, #6
 800b0aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b0ac:	bf00      	nop
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	e000ed00 	.word	0xe000ed00

0800b0b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	6812      	ldr	r2, [r2, #0]
 800b0ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0d2:	f023 0301 	bic.w	r3, r3, #1
 800b0d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a1b      	ldr	r3, [r3, #32]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d007      	beq.n	800b0f0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0e0:	4b08      	ldr	r3, [pc, #32]	; (800b104 <HAL_PCD_ResumeCallback+0x4c>)
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	4a07      	ldr	r2, [pc, #28]	; (800b104 <HAL_PCD_ResumeCallback+0x4c>)
 800b0e6:	f023 0306 	bic.w	r3, r3, #6
 800b0ea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b0ec:	f000 faf6 	bl	800b6dc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fb fed7 	bl	8006eaa <USBD_LL_Resume>
}
 800b0fc:	bf00      	nop
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	e000ed00 	.word	0xe000ed00

0800b108 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	460b      	mov	r3, r1
 800b112:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b11a:	78fa      	ldrb	r2, [r7, #3]
 800b11c:	4611      	mov	r1, r2
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fb ff2d 	bl	8006f7e <USBD_LL_IsoOUTIncomplete>
}
 800b124:	bf00      	nop
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b13e:	78fa      	ldrb	r2, [r7, #3]
 800b140:	4611      	mov	r1, r2
 800b142:	4618      	mov	r0, r3
 800b144:	f7fb fee9 	bl	8006f1a <USBD_LL_IsoINIncomplete>
}
 800b148:	bf00      	nop
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fb ff3f 	bl	8006fe2 <USBD_LL_DevConnected>
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fb ff3c 	bl	8006ff8 <USBD_LL_DevDisconnected>
}
 800b180:	bf00      	nop
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d13c      	bne.n	800b212 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b198:	4a20      	ldr	r2, [pc, #128]	; (800b21c <USBD_LL_Init+0x94>)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a1e      	ldr	r2, [pc, #120]	; (800b21c <USBD_LL_Init+0x94>)
 800b1a4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b1a8:	4b1c      	ldr	r3, [pc, #112]	; (800b21c <USBD_LL_Init+0x94>)
 800b1aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b1ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b1b0:	4b1a      	ldr	r3, [pc, #104]	; (800b21c <USBD_LL_Init+0x94>)
 800b1b2:	2206      	movs	r2, #6
 800b1b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b1b6:	4b19      	ldr	r3, [pc, #100]	; (800b21c <USBD_LL_Init+0x94>)
 800b1b8:	2202      	movs	r2, #2
 800b1ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b1bc:	4b17      	ldr	r3, [pc, #92]	; (800b21c <USBD_LL_Init+0x94>)
 800b1be:	2202      	movs	r2, #2
 800b1c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b1c2:	4b16      	ldr	r3, [pc, #88]	; (800b21c <USBD_LL_Init+0x94>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b1c8:	4b14      	ldr	r3, [pc, #80]	; (800b21c <USBD_LL_Init+0x94>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b1ce:	4b13      	ldr	r3, [pc, #76]	; (800b21c <USBD_LL_Init+0x94>)
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b1d4:	4b11      	ldr	r3, [pc, #68]	; (800b21c <USBD_LL_Init+0x94>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b1da:	4b10      	ldr	r3, [pc, #64]	; (800b21c <USBD_LL_Init+0x94>)
 800b1dc:	2200      	movs	r2, #0
 800b1de:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b1e0:	4b0e      	ldr	r3, [pc, #56]	; (800b21c <USBD_LL_Init+0x94>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b1e6:	480d      	ldr	r0, [pc, #52]	; (800b21c <USBD_LL_Init+0x94>)
 800b1e8:	f7f5 ff4c 	bl	8001084 <HAL_PCD_Init>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b1f2:	f7f5 fae3 	bl	80007bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b1f6:	2180      	movs	r1, #128	; 0x80
 800b1f8:	4808      	ldr	r0, [pc, #32]	; (800b21c <USBD_LL_Init+0x94>)
 800b1fa:	f7f7 f8b6 	bl	800236a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b1fe:	2240      	movs	r2, #64	; 0x40
 800b200:	2100      	movs	r1, #0
 800b202:	4806      	ldr	r0, [pc, #24]	; (800b21c <USBD_LL_Init+0x94>)
 800b204:	f7f7 f86a 	bl	80022dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b208:	2280      	movs	r2, #128	; 0x80
 800b20a:	2101      	movs	r1, #1
 800b20c:	4803      	ldr	r0, [pc, #12]	; (800b21c <USBD_LL_Init+0x94>)
 800b20e:	f7f7 f865 	bl	80022dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	200030d8 	.word	0x200030d8

0800b220 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b236:	4618      	mov	r0, r3
 800b238:	f7f6 f848 	bl	80012cc <HAL_PCD_Start>
 800b23c:	4603      	mov	r3, r0
 800b23e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b240:	7bbb      	ldrb	r3, [r7, #14]
 800b242:	2b03      	cmp	r3, #3
 800b244:	d816      	bhi.n	800b274 <USBD_LL_Start+0x54>
 800b246:	a201      	add	r2, pc, #4	; (adr r2, 800b24c <USBD_LL_Start+0x2c>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b25d 	.word	0x0800b25d
 800b250:	0800b263 	.word	0x0800b263
 800b254:	0800b269 	.word	0x0800b269
 800b258:	0800b26f 	.word	0x0800b26f
    case HAL_OK :
      usb_status = USBD_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	73fb      	strb	r3, [r7, #15]
    break;
 800b260:	e00b      	b.n	800b27a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b262:	2303      	movs	r3, #3
 800b264:	73fb      	strb	r3, [r7, #15]
    break;
 800b266:	e008      	b.n	800b27a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b268:	2301      	movs	r3, #1
 800b26a:	73fb      	strb	r3, [r7, #15]
    break;
 800b26c:	e005      	b.n	800b27a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b26e:	2303      	movs	r3, #3
 800b270:	73fb      	strb	r3, [r7, #15]
    break;
 800b272:	e002      	b.n	800b27a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b274:	2303      	movs	r3, #3
 800b276:	73fb      	strb	r3, [r7, #15]
    break;
 800b278:	bf00      	nop
  }
  return usb_status;
 800b27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	4608      	mov	r0, r1
 800b28e:	4611      	mov	r1, r2
 800b290:	461a      	mov	r2, r3
 800b292:	4603      	mov	r3, r0
 800b294:	70fb      	strb	r3, [r7, #3]
 800b296:	460b      	mov	r3, r1
 800b298:	70bb      	strb	r3, [r7, #2]
 800b29a:	4613      	mov	r3, r2
 800b29c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b2ac:	78bb      	ldrb	r3, [r7, #2]
 800b2ae:	883a      	ldrh	r2, [r7, #0]
 800b2b0:	78f9      	ldrb	r1, [r7, #3]
 800b2b2:	f7f6 fcf2 	bl	8001c9a <HAL_PCD_EP_Open>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b2ba:	7bbb      	ldrb	r3, [r7, #14]
 800b2bc:	2b03      	cmp	r3, #3
 800b2be:	d817      	bhi.n	800b2f0 <USBD_LL_OpenEP+0x6c>
 800b2c0:	a201      	add	r2, pc, #4	; (adr r2, 800b2c8 <USBD_LL_OpenEP+0x44>)
 800b2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c6:	bf00      	nop
 800b2c8:	0800b2d9 	.word	0x0800b2d9
 800b2cc:	0800b2df 	.word	0x0800b2df
 800b2d0:	0800b2e5 	.word	0x0800b2e5
 800b2d4:	0800b2eb 	.word	0x0800b2eb
    case HAL_OK :
      usb_status = USBD_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	73fb      	strb	r3, [r7, #15]
    break;
 800b2dc:	e00b      	b.n	800b2f6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e2:	e008      	b.n	800b2f6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e8:	e005      	b.n	800b2f6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ee:	e002      	b.n	800b2f6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f4:	bf00      	nop
  }
  return usb_status;
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b310:	2300      	movs	r3, #0
 800b312:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b31a:	78fa      	ldrb	r2, [r7, #3]
 800b31c:	4611      	mov	r1, r2
 800b31e:	4618      	mov	r0, r3
 800b320:	f7f6 fd23 	bl	8001d6a <HAL_PCD_EP_Close>
 800b324:	4603      	mov	r3, r0
 800b326:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b328:	7bbb      	ldrb	r3, [r7, #14]
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d816      	bhi.n	800b35c <USBD_LL_CloseEP+0x5c>
 800b32e:	a201      	add	r2, pc, #4	; (adr r2, 800b334 <USBD_LL_CloseEP+0x34>)
 800b330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b334:	0800b345 	.word	0x0800b345
 800b338:	0800b34b 	.word	0x0800b34b
 800b33c:	0800b351 	.word	0x0800b351
 800b340:	0800b357 	.word	0x0800b357
    case HAL_OK :
      usb_status = USBD_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	73fb      	strb	r3, [r7, #15]
    break;
 800b348:	e00b      	b.n	800b362 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b34a:	2303      	movs	r3, #3
 800b34c:	73fb      	strb	r3, [r7, #15]
    break;
 800b34e:	e008      	b.n	800b362 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b350:	2301      	movs	r3, #1
 800b352:	73fb      	strb	r3, [r7, #15]
    break;
 800b354:	e005      	b.n	800b362 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b356:	2303      	movs	r3, #3
 800b358:	73fb      	strb	r3, [r7, #15]
    break;
 800b35a:	e002      	b.n	800b362 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b35c:	2303      	movs	r3, #3
 800b35e:	73fb      	strb	r3, [r7, #15]
    break;
 800b360:	bf00      	nop
  }
  return usb_status;
 800b362:	7bfb      	ldrb	r3, [r7, #15]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	460b      	mov	r3, r1
 800b376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b37c:	2300      	movs	r3, #0
 800b37e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b386:	78fa      	ldrb	r2, [r7, #3]
 800b388:	4611      	mov	r1, r2
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7f6 fdb2 	bl	8001ef4 <HAL_PCD_EP_SetStall>
 800b390:	4603      	mov	r3, r0
 800b392:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b394:	7bbb      	ldrb	r3, [r7, #14]
 800b396:	2b03      	cmp	r3, #3
 800b398:	d816      	bhi.n	800b3c8 <USBD_LL_StallEP+0x5c>
 800b39a:	a201      	add	r2, pc, #4	; (adr r2, 800b3a0 <USBD_LL_StallEP+0x34>)
 800b39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a0:	0800b3b1 	.word	0x0800b3b1
 800b3a4:	0800b3b7 	.word	0x0800b3b7
 800b3a8:	0800b3bd 	.word	0x0800b3bd
 800b3ac:	0800b3c3 	.word	0x0800b3c3
    case HAL_OK :
      usb_status = USBD_OK;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b4:	e00b      	b.n	800b3ce <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ba:	e008      	b.n	800b3ce <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c0:	e005      	b.n	800b3ce <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c6:	e002      	b.n	800b3ce <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b3cc:	bf00      	nop
  }
  return usb_status;
 800b3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3f2:	78fa      	ldrb	r2, [r7, #3]
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7f6 fdde 	bl	8001fb8 <HAL_PCD_EP_ClrStall>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b400:	7bbb      	ldrb	r3, [r7, #14]
 800b402:	2b03      	cmp	r3, #3
 800b404:	d816      	bhi.n	800b434 <USBD_LL_ClearStallEP+0x5c>
 800b406:	a201      	add	r2, pc, #4	; (adr r2, 800b40c <USBD_LL_ClearStallEP+0x34>)
 800b408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b40c:	0800b41d 	.word	0x0800b41d
 800b410:	0800b423 	.word	0x0800b423
 800b414:	0800b429 	.word	0x0800b429
 800b418:	0800b42f 	.word	0x0800b42f
    case HAL_OK :
      usb_status = USBD_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73fb      	strb	r3, [r7, #15]
    break;
 800b420:	e00b      	b.n	800b43a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b422:	2303      	movs	r3, #3
 800b424:	73fb      	strb	r3, [r7, #15]
    break;
 800b426:	e008      	b.n	800b43a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b428:	2301      	movs	r3, #1
 800b42a:	73fb      	strb	r3, [r7, #15]
    break;
 800b42c:	e005      	b.n	800b43a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b42e:	2303      	movs	r3, #3
 800b430:	73fb      	strb	r3, [r7, #15]
    break;
 800b432:	e002      	b.n	800b43a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b434:	2303      	movs	r3, #3
 800b436:	73fb      	strb	r3, [r7, #15]
    break;
 800b438:	bf00      	nop
  }
  return usb_status;
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	460b      	mov	r3, r1
 800b44e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b456:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	da0b      	bge.n	800b478 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b460:	78fb      	ldrb	r3, [r7, #3]
 800b462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b466:	68f9      	ldr	r1, [r7, #12]
 800b468:	4613      	mov	r3, r2
 800b46a:	00db      	lsls	r3, r3, #3
 800b46c:	4413      	add	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	440b      	add	r3, r1
 800b472:	333e      	adds	r3, #62	; 0x3e
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	e00b      	b.n	800b490 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b478:	78fb      	ldrb	r3, [r7, #3]
 800b47a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b47e:	68f9      	ldr	r1, [r7, #12]
 800b480:	4613      	mov	r3, r2
 800b482:	00db      	lsls	r3, r3, #3
 800b484:	4413      	add	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	440b      	add	r3, r1
 800b48a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b48e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b490:	4618      	mov	r0, r3
 800b492:	3714      	adds	r7, #20
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4b6:	78fa      	ldrb	r2, [r7, #3]
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7f6 fbc8 	bl	8001c50 <HAL_PCD_SetAddress>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b4c4:	7bbb      	ldrb	r3, [r7, #14]
 800b4c6:	2b03      	cmp	r3, #3
 800b4c8:	d816      	bhi.n	800b4f8 <USBD_LL_SetUSBAddress+0x5c>
 800b4ca:	a201      	add	r2, pc, #4	; (adr r2, 800b4d0 <USBD_LL_SetUSBAddress+0x34>)
 800b4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d0:	0800b4e1 	.word	0x0800b4e1
 800b4d4:	0800b4e7 	.word	0x0800b4e7
 800b4d8:	0800b4ed 	.word	0x0800b4ed
 800b4dc:	0800b4f3 	.word	0x0800b4f3
    case HAL_OK :
      usb_status = USBD_OK;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4e4:	e00b      	b.n	800b4fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ea:	e008      	b.n	800b4fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f0:	e005      	b.n	800b4fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f6:	e002      	b.n	800b4fe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b4f8:	2303      	movs	r3, #3
 800b4fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b4fc:	bf00      	nop
  }
  return usb_status;
 800b4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	607a      	str	r2, [r7, #4]
 800b512:	603b      	str	r3, [r7, #0]
 800b514:	460b      	mov	r3, r1
 800b516:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b518:	2300      	movs	r3, #0
 800b51a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b526:	7af9      	ldrb	r1, [r7, #11]
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	f7f6 fcb1 	bl	8001e92 <HAL_PCD_EP_Transmit>
 800b530:	4603      	mov	r3, r0
 800b532:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b534:	7dbb      	ldrb	r3, [r7, #22]
 800b536:	2b03      	cmp	r3, #3
 800b538:	d816      	bhi.n	800b568 <USBD_LL_Transmit+0x60>
 800b53a:	a201      	add	r2, pc, #4	; (adr r2, 800b540 <USBD_LL_Transmit+0x38>)
 800b53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b540:	0800b551 	.word	0x0800b551
 800b544:	0800b557 	.word	0x0800b557
 800b548:	0800b55d 	.word	0x0800b55d
 800b54c:	0800b563 	.word	0x0800b563
    case HAL_OK :
      usb_status = USBD_OK;
 800b550:	2300      	movs	r3, #0
 800b552:	75fb      	strb	r3, [r7, #23]
    break;
 800b554:	e00b      	b.n	800b56e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b556:	2303      	movs	r3, #3
 800b558:	75fb      	strb	r3, [r7, #23]
    break;
 800b55a:	e008      	b.n	800b56e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b55c:	2301      	movs	r3, #1
 800b55e:	75fb      	strb	r3, [r7, #23]
    break;
 800b560:	e005      	b.n	800b56e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b562:	2303      	movs	r3, #3
 800b564:	75fb      	strb	r3, [r7, #23]
    break;
 800b566:	e002      	b.n	800b56e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b568:	2303      	movs	r3, #3
 800b56a:	75fb      	strb	r3, [r7, #23]
    break;
 800b56c:	bf00      	nop
  }
  return usb_status;
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3718      	adds	r7, #24
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	607a      	str	r2, [r7, #4]
 800b582:	603b      	str	r3, [r7, #0]
 800b584:	460b      	mov	r3, r1
 800b586:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b588:	2300      	movs	r3, #0
 800b58a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b596:	7af9      	ldrb	r1, [r7, #11]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	f7f6 fc2f 	bl	8001dfe <HAL_PCD_EP_Receive>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b5a4:	7dbb      	ldrb	r3, [r7, #22]
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d816      	bhi.n	800b5d8 <USBD_LL_PrepareReceive+0x60>
 800b5aa:	a201      	add	r2, pc, #4	; (adr r2, 800b5b0 <USBD_LL_PrepareReceive+0x38>)
 800b5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b0:	0800b5c1 	.word	0x0800b5c1
 800b5b4:	0800b5c7 	.word	0x0800b5c7
 800b5b8:	0800b5cd 	.word	0x0800b5cd
 800b5bc:	0800b5d3 	.word	0x0800b5d3
    case HAL_OK :
      usb_status = USBD_OK;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	75fb      	strb	r3, [r7, #23]
    break;
 800b5c4:	e00b      	b.n	800b5de <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	75fb      	strb	r3, [r7, #23]
    break;
 800b5ca:	e008      	b.n	800b5de <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	75fb      	strb	r3, [r7, #23]
    break;
 800b5d0:	e005      	b.n	800b5de <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	75fb      	strb	r3, [r7, #23]
    break;
 800b5d6:	e002      	b.n	800b5de <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b5d8:	2303      	movs	r3, #3
 800b5da:	75fb      	strb	r3, [r7, #23]
    break;
 800b5dc:	bf00      	nop
  }
  return usb_status;
 800b5de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5fa:	78fa      	ldrb	r2, [r7, #3]
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7f6 fc2f 	bl	8001e62 <HAL_PCD_EP_GetRxCount>
 800b604:	4603      	mov	r3, r0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
	...

0800b610 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b61c:	78fb      	ldrb	r3, [r7, #3]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d002      	beq.n	800b628 <HAL_PCDEx_LPM_Callback+0x18>
 800b622:	2b01      	cmp	r3, #1
 800b624:	d01f      	beq.n	800b666 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b626:	e03b      	b.n	800b6a0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a1b      	ldr	r3, [r3, #32]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d007      	beq.n	800b640 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b630:	f000 f854 	bl	800b6dc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b634:	4b1c      	ldr	r3, [pc, #112]	; (800b6a8 <HAL_PCDEx_LPM_Callback+0x98>)
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	4a1b      	ldr	r2, [pc, #108]	; (800b6a8 <HAL_PCDEx_LPM_Callback+0x98>)
 800b63a:	f023 0306 	bic.w	r3, r3, #6
 800b63e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	6812      	ldr	r2, [r2, #0]
 800b64e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b652:	f023 0301 	bic.w	r3, r3, #1
 800b656:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fb fc23 	bl	8006eaa <USBD_LL_Resume>
    break;
 800b664:	e01c      	b.n	800b6a0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	6812      	ldr	r2, [r2, #0]
 800b674:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b678:	f043 0301 	orr.w	r3, r3, #1
 800b67c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b684:	4618      	mov	r0, r3
 800b686:	f7fb fbf4 	bl	8006e72 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d005      	beq.n	800b69e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b692:	4b05      	ldr	r3, [pc, #20]	; (800b6a8 <HAL_PCDEx_LPM_Callback+0x98>)
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	4a04      	ldr	r2, [pc, #16]	; (800b6a8 <HAL_PCDEx_LPM_Callback+0x98>)
 800b698:	f043 0306 	orr.w	r3, r3, #6
 800b69c:	6113      	str	r3, [r2, #16]
    break;
 800b69e:	bf00      	nop
}
 800b6a0:	bf00      	nop
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	e000ed00 	.word	0xe000ed00

0800b6ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b6b4:	4b03      	ldr	r3, [pc, #12]	; (800b6c4 <USBD_static_malloc+0x18>)
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	200035e4 	.word	0x200035e4

0800b6c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]

}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b6e0:	f7f4 ff22 	bl	8000528 <SystemClock_Config>
}
 800b6e4:	bf00      	nop
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <memset>:
 800b6e8:	4402      	add	r2, r0
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d100      	bne.n	800b6f2 <memset+0xa>
 800b6f0:	4770      	bx	lr
 800b6f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b6f6:	e7f9      	b.n	800b6ec <memset+0x4>

0800b6f8 <_reclaim_reent>:
 800b6f8:	4b29      	ldr	r3, [pc, #164]	; (800b7a0 <_reclaim_reent+0xa8>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4283      	cmp	r3, r0
 800b6fe:	b570      	push	{r4, r5, r6, lr}
 800b700:	4604      	mov	r4, r0
 800b702:	d04b      	beq.n	800b79c <_reclaim_reent+0xa4>
 800b704:	69c3      	ldr	r3, [r0, #28]
 800b706:	b143      	cbz	r3, 800b71a <_reclaim_reent+0x22>
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d144      	bne.n	800b798 <_reclaim_reent+0xa0>
 800b70e:	69e3      	ldr	r3, [r4, #28]
 800b710:	6819      	ldr	r1, [r3, #0]
 800b712:	b111      	cbz	r1, 800b71a <_reclaim_reent+0x22>
 800b714:	4620      	mov	r0, r4
 800b716:	f000 f879 	bl	800b80c <_free_r>
 800b71a:	6961      	ldr	r1, [r4, #20]
 800b71c:	b111      	cbz	r1, 800b724 <_reclaim_reent+0x2c>
 800b71e:	4620      	mov	r0, r4
 800b720:	f000 f874 	bl	800b80c <_free_r>
 800b724:	69e1      	ldr	r1, [r4, #28]
 800b726:	b111      	cbz	r1, 800b72e <_reclaim_reent+0x36>
 800b728:	4620      	mov	r0, r4
 800b72a:	f000 f86f 	bl	800b80c <_free_r>
 800b72e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b730:	b111      	cbz	r1, 800b738 <_reclaim_reent+0x40>
 800b732:	4620      	mov	r0, r4
 800b734:	f000 f86a 	bl	800b80c <_free_r>
 800b738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b73a:	b111      	cbz	r1, 800b742 <_reclaim_reent+0x4a>
 800b73c:	4620      	mov	r0, r4
 800b73e:	f000 f865 	bl	800b80c <_free_r>
 800b742:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b744:	b111      	cbz	r1, 800b74c <_reclaim_reent+0x54>
 800b746:	4620      	mov	r0, r4
 800b748:	f000 f860 	bl	800b80c <_free_r>
 800b74c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b74e:	b111      	cbz	r1, 800b756 <_reclaim_reent+0x5e>
 800b750:	4620      	mov	r0, r4
 800b752:	f000 f85b 	bl	800b80c <_free_r>
 800b756:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b758:	b111      	cbz	r1, 800b760 <_reclaim_reent+0x68>
 800b75a:	4620      	mov	r0, r4
 800b75c:	f000 f856 	bl	800b80c <_free_r>
 800b760:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b762:	b111      	cbz	r1, 800b76a <_reclaim_reent+0x72>
 800b764:	4620      	mov	r0, r4
 800b766:	f000 f851 	bl	800b80c <_free_r>
 800b76a:	6a23      	ldr	r3, [r4, #32]
 800b76c:	b1b3      	cbz	r3, 800b79c <_reclaim_reent+0xa4>
 800b76e:	4620      	mov	r0, r4
 800b770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b774:	4718      	bx	r3
 800b776:	5949      	ldr	r1, [r1, r5]
 800b778:	b941      	cbnz	r1, 800b78c <_reclaim_reent+0x94>
 800b77a:	3504      	adds	r5, #4
 800b77c:	69e3      	ldr	r3, [r4, #28]
 800b77e:	2d80      	cmp	r5, #128	; 0x80
 800b780:	68d9      	ldr	r1, [r3, #12]
 800b782:	d1f8      	bne.n	800b776 <_reclaim_reent+0x7e>
 800b784:	4620      	mov	r0, r4
 800b786:	f000 f841 	bl	800b80c <_free_r>
 800b78a:	e7c0      	b.n	800b70e <_reclaim_reent+0x16>
 800b78c:	680e      	ldr	r6, [r1, #0]
 800b78e:	4620      	mov	r0, r4
 800b790:	f000 f83c 	bl	800b80c <_free_r>
 800b794:	4631      	mov	r1, r6
 800b796:	e7ef      	b.n	800b778 <_reclaim_reent+0x80>
 800b798:	2500      	movs	r5, #0
 800b79a:	e7ef      	b.n	800b77c <_reclaim_reent+0x84>
 800b79c:	bd70      	pop	{r4, r5, r6, pc}
 800b79e:	bf00      	nop
 800b7a0:	2000015c 	.word	0x2000015c

0800b7a4 <__libc_init_array>:
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	4d0d      	ldr	r5, [pc, #52]	; (800b7dc <__libc_init_array+0x38>)
 800b7a8:	4c0d      	ldr	r4, [pc, #52]	; (800b7e0 <__libc_init_array+0x3c>)
 800b7aa:	1b64      	subs	r4, r4, r5
 800b7ac:	10a4      	asrs	r4, r4, #2
 800b7ae:	2600      	movs	r6, #0
 800b7b0:	42a6      	cmp	r6, r4
 800b7b2:	d109      	bne.n	800b7c8 <__libc_init_array+0x24>
 800b7b4:	4d0b      	ldr	r5, [pc, #44]	; (800b7e4 <__libc_init_array+0x40>)
 800b7b6:	4c0c      	ldr	r4, [pc, #48]	; (800b7e8 <__libc_init_array+0x44>)
 800b7b8:	f000 f880 	bl	800b8bc <_init>
 800b7bc:	1b64      	subs	r4, r4, r5
 800b7be:	10a4      	asrs	r4, r4, #2
 800b7c0:	2600      	movs	r6, #0
 800b7c2:	42a6      	cmp	r6, r4
 800b7c4:	d105      	bne.n	800b7d2 <__libc_init_array+0x2e>
 800b7c6:	bd70      	pop	{r4, r5, r6, pc}
 800b7c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7cc:	4798      	blx	r3
 800b7ce:	3601      	adds	r6, #1
 800b7d0:	e7ee      	b.n	800b7b0 <__libc_init_array+0xc>
 800b7d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7d6:	4798      	blx	r3
 800b7d8:	3601      	adds	r6, #1
 800b7da:	e7f2      	b.n	800b7c2 <__libc_init_array+0x1e>
 800b7dc:	0800b9b4 	.word	0x0800b9b4
 800b7e0:	0800b9b4 	.word	0x0800b9b4
 800b7e4:	0800b9b4 	.word	0x0800b9b4
 800b7e8:	0800b9b8 	.word	0x0800b9b8

0800b7ec <__retarget_lock_acquire_recursive>:
 800b7ec:	4770      	bx	lr

0800b7ee <__retarget_lock_release_recursive>:
 800b7ee:	4770      	bx	lr

0800b7f0 <memcpy>:
 800b7f0:	440a      	add	r2, r1
 800b7f2:	4291      	cmp	r1, r2
 800b7f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7f8:	d100      	bne.n	800b7fc <memcpy+0xc>
 800b7fa:	4770      	bx	lr
 800b7fc:	b510      	push	{r4, lr}
 800b7fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b802:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b806:	4291      	cmp	r1, r2
 800b808:	d1f9      	bne.n	800b7fe <memcpy+0xe>
 800b80a:	bd10      	pop	{r4, pc}

0800b80c <_free_r>:
 800b80c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b80e:	2900      	cmp	r1, #0
 800b810:	d044      	beq.n	800b89c <_free_r+0x90>
 800b812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b816:	9001      	str	r0, [sp, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f1a1 0404 	sub.w	r4, r1, #4
 800b81e:	bfb8      	it	lt
 800b820:	18e4      	addlt	r4, r4, r3
 800b822:	f000 f83f 	bl	800b8a4 <__malloc_lock>
 800b826:	4a1e      	ldr	r2, [pc, #120]	; (800b8a0 <_free_r+0x94>)
 800b828:	9801      	ldr	r0, [sp, #4]
 800b82a:	6813      	ldr	r3, [r2, #0]
 800b82c:	b933      	cbnz	r3, 800b83c <_free_r+0x30>
 800b82e:	6063      	str	r3, [r4, #4]
 800b830:	6014      	str	r4, [r2, #0]
 800b832:	b003      	add	sp, #12
 800b834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b838:	f000 b83a 	b.w	800b8b0 <__malloc_unlock>
 800b83c:	42a3      	cmp	r3, r4
 800b83e:	d908      	bls.n	800b852 <_free_r+0x46>
 800b840:	6825      	ldr	r5, [r4, #0]
 800b842:	1961      	adds	r1, r4, r5
 800b844:	428b      	cmp	r3, r1
 800b846:	bf01      	itttt	eq
 800b848:	6819      	ldreq	r1, [r3, #0]
 800b84a:	685b      	ldreq	r3, [r3, #4]
 800b84c:	1949      	addeq	r1, r1, r5
 800b84e:	6021      	streq	r1, [r4, #0]
 800b850:	e7ed      	b.n	800b82e <_free_r+0x22>
 800b852:	461a      	mov	r2, r3
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	b10b      	cbz	r3, 800b85c <_free_r+0x50>
 800b858:	42a3      	cmp	r3, r4
 800b85a:	d9fa      	bls.n	800b852 <_free_r+0x46>
 800b85c:	6811      	ldr	r1, [r2, #0]
 800b85e:	1855      	adds	r5, r2, r1
 800b860:	42a5      	cmp	r5, r4
 800b862:	d10b      	bne.n	800b87c <_free_r+0x70>
 800b864:	6824      	ldr	r4, [r4, #0]
 800b866:	4421      	add	r1, r4
 800b868:	1854      	adds	r4, r2, r1
 800b86a:	42a3      	cmp	r3, r4
 800b86c:	6011      	str	r1, [r2, #0]
 800b86e:	d1e0      	bne.n	800b832 <_free_r+0x26>
 800b870:	681c      	ldr	r4, [r3, #0]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	6053      	str	r3, [r2, #4]
 800b876:	440c      	add	r4, r1
 800b878:	6014      	str	r4, [r2, #0]
 800b87a:	e7da      	b.n	800b832 <_free_r+0x26>
 800b87c:	d902      	bls.n	800b884 <_free_r+0x78>
 800b87e:	230c      	movs	r3, #12
 800b880:	6003      	str	r3, [r0, #0]
 800b882:	e7d6      	b.n	800b832 <_free_r+0x26>
 800b884:	6825      	ldr	r5, [r4, #0]
 800b886:	1961      	adds	r1, r4, r5
 800b888:	428b      	cmp	r3, r1
 800b88a:	bf04      	itt	eq
 800b88c:	6819      	ldreq	r1, [r3, #0]
 800b88e:	685b      	ldreq	r3, [r3, #4]
 800b890:	6063      	str	r3, [r4, #4]
 800b892:	bf04      	itt	eq
 800b894:	1949      	addeq	r1, r1, r5
 800b896:	6021      	streq	r1, [r4, #0]
 800b898:	6054      	str	r4, [r2, #4]
 800b89a:	e7ca      	b.n	800b832 <_free_r+0x26>
 800b89c:	b003      	add	sp, #12
 800b89e:	bd30      	pop	{r4, r5, pc}
 800b8a0:	20003940 	.word	0x20003940

0800b8a4 <__malloc_lock>:
 800b8a4:	4801      	ldr	r0, [pc, #4]	; (800b8ac <__malloc_lock+0x8>)
 800b8a6:	f7ff bfa1 	b.w	800b7ec <__retarget_lock_acquire_recursive>
 800b8aa:	bf00      	nop
 800b8ac:	2000393c 	.word	0x2000393c

0800b8b0 <__malloc_unlock>:
 800b8b0:	4801      	ldr	r0, [pc, #4]	; (800b8b8 <__malloc_unlock+0x8>)
 800b8b2:	f7ff bf9c 	b.w	800b7ee <__retarget_lock_release_recursive>
 800b8b6:	bf00      	nop
 800b8b8:	2000393c 	.word	0x2000393c

0800b8bc <_init>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	bf00      	nop
 800b8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c2:	bc08      	pop	{r3}
 800b8c4:	469e      	mov	lr, r3
 800b8c6:	4770      	bx	lr

0800b8c8 <_fini>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	bf00      	nop
 800b8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ce:	bc08      	pop	{r3}
 800b8d0:	469e      	mov	lr, r3
 800b8d2:	4770      	bx	lr
