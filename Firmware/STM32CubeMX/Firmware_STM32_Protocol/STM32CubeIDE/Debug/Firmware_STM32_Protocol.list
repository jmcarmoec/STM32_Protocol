
Firmware_STM32_Protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c020  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800c1d0  0800c1d0  0001c1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c308  0800c308  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800c308  0800c308  0001c308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c310  0800c310  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c310  0800c310  0001c310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c314  0800c314  0001c314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800c318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036dc  20000174  0800c48c  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003850  0800c48c  00023850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029019  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055c2  00000000  00000000  000491bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f90  00000000  00000000  0004e780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d88  00000000  00000000  00050710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000731a  00000000  00000000  00052498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a23  00000000  00000000  000597b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111d31  00000000  00000000  000811d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00192f06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086f0  00000000  00000000  00192f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000174 	.word	0x20000174
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c1b8 	.word	0x0800c1b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000178 	.word	0x20000178
 80001ec:	0800c1b8 	.word	0x0800c1b8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f001 f980 	bl	80017fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f818 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f898 	bl	8000634 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000504:	f000 f868 	bl	80005d8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000508:	f007 f82a 	bl	8007560 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800050c:	4a05      	ldr	r2, [pc, #20]	; (8000524 <main+0x30>)
 800050e:	2100      	movs	r1, #0
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <main+0x34>)
 8000512:	f007 f86f 	bl	80075f4 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <main+0x38>)
 800051a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800051c:	f007 f844 	bl	80075a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x2c>
 8000522:	bf00      	nop
 8000524:	0800c23c 	.word	0x0800c23c
 8000528:	08000769 	.word	0x08000769
 800052c:	20000218 	.word	0x20000218

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f00b fd70 	bl	800c024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000556:	f002 fe89 	bl	800326c <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 f930 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000564:	2330      	movs	r3, #48	; 0x30
 8000566:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000574:	2360      	movs	r3, #96	; 0x60
 8000576:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800057c:	2301      	movs	r3, #1
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000580:	2301      	movs	r3, #1
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000584:	2328      	movs	r3, #40	; 0x28
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4618      	mov	r0, r3
 800059a:	f002 fedd 	bl	8003358 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005a4:	f000 f90e 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2303      	movs	r3, #3
 80005ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	2104      	movs	r1, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 fae3 	bl	8003b8c <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005cc:	f000 f8fa 	bl	80007c4 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3758      	adds	r7, #88	; 0x58
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <MX_LPUART1_UART_Init+0x54>)
 80005e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <MX_LPUART1_UART_Init+0x58>)
 80005e6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 80005fc:	220c      	movs	r2, #12
 80005fe:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 8000614:	f004 fc8e 	bl	8004f34 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 800061e:	f000 f8d1 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000190 	.word	0x20000190
 800062c:	40008000 	.word	0x40008000
 8000630:	00033324 	.word	0x00033324

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b43      	ldr	r3, [pc, #268]	; (8000758 <MX_GPIO_Init+0x124>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a42      	ldr	r2, [pc, #264]	; (8000758 <MX_GPIO_Init+0x124>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b40      	ldr	r3, [pc, #256]	; (8000758 <MX_GPIO_Init+0x124>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <MX_GPIO_Init+0x124>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a3c      	ldr	r2, [pc, #240]	; (8000758 <MX_GPIO_Init+0x124>)
 8000668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <MX_GPIO_Init+0x124>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <MX_GPIO_Init+0x124>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a36      	ldr	r2, [pc, #216]	; (8000758 <MX_GPIO_Init+0x124>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b34      	ldr	r3, [pc, #208]	; (8000758 <MX_GPIO_Init+0x124>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <MX_GPIO_Init+0x124>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a30      	ldr	r2, [pc, #192]	; (8000758 <MX_GPIO_Init+0x124>)
 8000698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <MX_GPIO_Init+0x124>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80006aa:	f002 fe45 	bl	8003338 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <MX_GPIO_Init+0x124>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a29      	ldr	r2, [pc, #164]	; (8000758 <MX_GPIO_Init+0x124>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b27      	ldr	r3, [pc, #156]	; (8000758 <MX_GPIO_Init+0x124>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006cc:	4823      	ldr	r0, [pc, #140]	; (800075c <MX_GPIO_Init+0x128>)
 80006ce:	f001 fbe5 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 80006d8:	4821      	ldr	r0, [pc, #132]	; (8000760 <MX_GPIO_Init+0x12c>)
 80006da:	f001 fbdf 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	481b      	ldr	r0, [pc, #108]	; (8000764 <MX_GPIO_Init+0x130>)
 80006f6:	f001 fa3f 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80006fa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <MX_GPIO_Init+0x128>)
 8000714:	f001 fa30 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8000718:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_GPIO_Init+0x12c>)
 800072e:	f001 fa23 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8000732:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_GPIO_Init+0x12c>)
 800074c:	f001 fa14 	bl	8001b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	48000400 	.word	0x48000400
 8000760:	48001800 	.word	0x48001800
 8000764:	48000800 	.word	0x48000800

08000768 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000770:	f000 fa0c 	bl	8000b8c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000774:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000778:	4808      	ldr	r0, [pc, #32]	; (800079c <StartDefaultTask+0x34>)
 800077a:	f001 fba7 	bl	8001ecc <HAL_GPIO_TogglePin>
  for(;;)
  {
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800077e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <StartDefaultTask+0x34>)
 8000784:	f001 fba2 	bl	8001ecc <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <StartDefaultTask+0x34>)
 800078c:	f001 fb9e 	bl	8001ecc <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000794:	f006 ffc0 	bl	8007718 <osDelay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000798:	e7f1      	b.n	800077e <StartDefaultTask+0x16>
 800079a:	bf00      	nop
 800079c:	48000400 	.word	0x48000400

080007a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d101      	bne.n	80007b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b2:	f001 f83b 	bl	800182c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40012c00 	.word	0x40012c00

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_MspInit+0x4c>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <HAL_MspInit+0x4c>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6613      	str	r3, [r2, #96]	; 0x60
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_MspInit+0x4c>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <HAL_MspInit+0x4c>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <HAL_MspInit+0x4c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6593      	str	r3, [r2, #88]	; 0x58
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_MspInit+0x4c>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	210f      	movs	r1, #15
 800080a:	f06f 0001 	mvn.w	r0, #1
 800080e:	f001 f909 	bl	8001a24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b0ac      	sub	sp, #176	; 0xb0
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	228c      	movs	r2, #140	; 0x8c
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f00b fbef 	bl	800c024 <memset>
  if(huart->Instance==LPUART1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a26      	ldr	r2, [pc, #152]	; (80008e4 <HAL_UART_MspInit+0xc4>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d145      	bne.n	80008dc <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000850:	2320      	movs	r3, #32
 8000852:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000854:	2300      	movs	r3, #0
 8000856:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	4618      	mov	r0, r3
 800085e:	f003 fbeb 	bl	8004038 <HAL_RCCEx_PeriphCLKConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000868:	f7ff ffac 	bl	80007c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800086c:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <HAL_UART_MspInit+0xc8>)
 800086e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000870:	4a1d      	ldr	r2, [pc, #116]	; (80008e8 <HAL_UART_MspInit+0xc8>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <HAL_UART_MspInit+0xc8>)
 800087a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_UART_MspInit+0xc8>)
 8000886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000888:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <HAL_UART_MspInit+0xc8>)
 800088a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_UART_MspInit+0xc8>)
 8000892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800089c:	f002 fd4c 	bl	8003338 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008ba:	2308      	movs	r3, #8
 80008bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008c4:	4619      	mov	r1, r3
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <HAL_UART_MspInit+0xcc>)
 80008c8:	f001 f956 	bl	8001b78 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2105      	movs	r1, #5
 80008d0:	2046      	movs	r0, #70	; 0x46
 80008d2:	f001 f8a7 	bl	8001a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80008d6:	2046      	movs	r0, #70	; 0x46
 80008d8:	f001 f8c0 	bl	8001a5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008dc:	bf00      	nop
 80008de:	37b0      	adds	r7, #176	; 0xb0
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40008000 	.word	0x40008000
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48001800 	.word	0x48001800

080008f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008fe:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <HAL_InitTick+0xc8>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	4a2d      	ldr	r2, [pc, #180]	; (80009b8 <HAL_InitTick+0xc8>)
 8000904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000908:	6613      	str	r3, [r2, #96]	; 0x60
 800090a:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <HAL_InitTick+0xc8>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000916:	f107 020c 	add.w	r2, r7, #12
 800091a:	f107 0310 	add.w	r3, r7, #16
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f003 faf7 	bl	8003f14 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000926:	f003 fadf 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 800092a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	4a23      	ldr	r2, [pc, #140]	; (80009bc <HAL_InitTick+0xcc>)
 8000930:	fba2 2303 	umull	r2, r3, r2, r3
 8000934:	0c9b      	lsrs	r3, r3, #18
 8000936:	3b01      	subs	r3, #1
 8000938:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <HAL_InitTick+0xd0>)
 800093c:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <HAL_InitTick+0xd4>)
 800093e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <HAL_InitTick+0xd0>)
 8000942:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000946:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <HAL_InitTick+0xd0>)
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <HAL_InitTick+0xd0>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <HAL_InitTick+0xd0>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_InitTick+0xd0>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000960:	4817      	ldr	r0, [pc, #92]	; (80009c0 <HAL_InitTick+0xd0>)
 8000962:	f004 f833 	bl	80049cc <HAL_TIM_Base_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800096c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000970:	2b00      	cmp	r3, #0
 8000972:	d11b      	bne.n	80009ac <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000974:	4812      	ldr	r0, [pc, #72]	; (80009c0 <HAL_InitTick+0xd0>)
 8000976:	f004 f88b 	bl	8004a90 <HAL_TIM_Base_Start_IT>
 800097a:	4603      	mov	r3, r0
 800097c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000984:	2b00      	cmp	r3, #0
 8000986:	d111      	bne.n	80009ac <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000988:	2019      	movs	r0, #25
 800098a:	f001 f867 	bl	8001a5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d808      	bhi.n	80009a6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	2019      	movs	r0, #25
 800099a:	f001 f843 	bl	8001a24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_InitTick+0xd8>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	e002      	b.n	80009ac <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3730      	adds	r7, #48	; 0x30
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000
 80009bc:	431bde83 	.word	0x431bde83
 80009c0:	2000021c 	.word	0x2000021c
 80009c4:	40012c00 	.word	0x40012c00
 80009c8:	20000078 	.word	0x20000078

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009fe:	f004 f8b7 	bl	8004b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000021c 	.word	0x2000021c

08000a0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <OTG_FS_IRQHandler+0x10>)
 8000a12:	f001 fbc8 	bl	80021a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20001750 	.word	0x20001750

08000a20 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <LPUART1_IRQHandler+0x10>)
 8000a26:	f004 fad3 	bl	8004fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000190 	.word	0x20000190

08000a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a38:	f000 fece 	bl	80017d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490d      	ldr	r1, [pc, #52]	; (8000a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0a      	ldr	r4, [pc, #40]	; (8000a80 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a62:	f00b faad 	bl	800bfc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a66:	f7ff fd45 	bl	80004f4 <main>

08000a6a <LoopForever>:

LoopForever:
    b LoopForever
 8000a6a:	e7fe      	b.n	8000a6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a6c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000a78:	0800c318 	.word	0x0800c318
  ldr r2, =_sbss
 8000a7c:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000a80:	20003850 	.word	0x20003850

08000a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_2_IRQHandler>

08000a86 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b084      	sub	sp, #16
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d104      	bne.n	8000a9e <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
 8000a98:	f7ff fe94 	bl	80007c4 <Error_Handler>
 8000a9c:	e7fe      	b.n	8000a9c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	7a1b      	ldrb	r3, [r3, #8]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d904      	bls.n	8000ab0 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa6:	b672      	cpsid	i
}
 8000aa8:	bf00      	nop
 8000aaa:	f7ff fe8b 	bl	80007c4 <Error_Handler>
 8000aae:	e7fe      	b.n	8000aae <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7a1b      	ldrb	r3, [r3, #8]
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	b2d1      	uxtb	r1, r2
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	7211      	strb	r1, [r2, #8]
 8000abc:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000abe:	f3ef 8211 	mrs	r2, BASEPRI
 8000ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac6:	f383 8811 	msr	BASEPRI, r3
 8000aca:	f3bf 8f6f 	isb	sy
 8000ace:	f3bf 8f4f 	dsb	sy
 8000ad2:	60fa      	str	r2, [r7, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b084      	sub	sp, #16
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d104      	bne.n	8000afe <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
 8000af8:	f7ff fe64 	bl	80007c4 <Error_Handler>
 8000afc:	e7fe      	b.n	8000afc <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7a1b      	ldrb	r3, [r3, #8]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	7a1b      	ldrb	r3, [r3, #8]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d904      	bls.n	8000b1c <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b12:	b672      	cpsid	i
}
 8000b14:	bf00      	nop
 8000b16:	f7ff fe55 	bl	80007c4 <Error_Handler>
 8000b1a:	e7fe      	b.n	8000b1a <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7a1b      	ldrb	r3, [r3, #8]
 8000b20:	461a      	mov	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b28:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000b30:	bf00      	nop
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d104      	bne.n	8000b52 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
 8000b4c:	f7ff fe3a 	bl	80007c4 <Error_Handler>
 8000b50:	e7fe      	b.n	8000b50 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff96 	bl	8000a86 <stm32_lock_acquire>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d104      	bne.n	8000b7a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
 8000b74:	f7ff fe26 	bl	80007c4 <Error_Handler>
 8000b78:	e7fe      	b.n	8000b78 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ffb2 	bl	8000ae6 <stm32_lock_release>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000b90:	2200      	movs	r2, #0
 8000b92:	4912      	ldr	r1, [pc, #72]	; (8000bdc <MX_USB_DEVICE_Init+0x50>)
 8000b94:	4812      	ldr	r0, [pc, #72]	; (8000be0 <MX_USB_DEVICE_Init+0x54>)
 8000b96:	f009 fef1 	bl	800a97c <USBD_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8000ba0:	f7ff fe10 	bl	80007c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000ba4:	490f      	ldr	r1, [pc, #60]	; (8000be4 <MX_USB_DEVICE_Init+0x58>)
 8000ba6:	480e      	ldr	r0, [pc, #56]	; (8000be0 <MX_USB_DEVICE_Init+0x54>)
 8000ba8:	f009 ff18 	bl	800a9dc <USBD_RegisterClass>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8000bb2:	f7ff fe07 	bl	80007c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8000bb6:	490c      	ldr	r1, [pc, #48]	; (8000be8 <MX_USB_DEVICE_Init+0x5c>)
 8000bb8:	4809      	ldr	r0, [pc, #36]	; (8000be0 <MX_USB_DEVICE_Init+0x54>)
 8000bba:	f009 fe4f 	bl	800a85c <USBD_CDC_RegisterInterface>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8000bc4:	f7ff fdfe 	bl	80007c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USB_DEVICE_Init+0x54>)
 8000bca:	f009 ff3d 	bl	800aa48 <USBD_Start>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8000bd4:	f7ff fdf6 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000014 	.word	0x20000014
 8000be0:	20000274 	.word	0x20000274
 8000be4:	20000090 	.word	0x20000090
 8000be8:	20000000 	.word	0x20000000

08000bec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4905      	ldr	r1, [pc, #20]	; (8000c08 <CDC_Init_FS+0x1c>)
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <CDC_Init_FS+0x20>)
 8000bf6:	f009 fe4b 	bl	800a890 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8000bfa:	4905      	ldr	r1, [pc, #20]	; (8000c10 <CDC_Init_FS+0x24>)
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <CDC_Init_FS+0x20>)
 8000bfe:	f009 fe69 	bl	800a8d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000c02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000d50 	.word	0x20000d50
 8000c0c:	20000274 	.word	0x20000274
 8000c10:	20000550 	.word	0x20000550

08000c14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8000c18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b23      	cmp	r3, #35	; 0x23
 8000c38:	d84a      	bhi.n	8000cd0 <CDC_Control_FS+0xac>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <CDC_Control_FS+0x1c>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000cd1 	.word	0x08000cd1
 8000c44:	08000cd1 	.word	0x08000cd1
 8000c48:	08000cd1 	.word	0x08000cd1
 8000c4c:	08000cd1 	.word	0x08000cd1
 8000c50:	08000cd1 	.word	0x08000cd1
 8000c54:	08000cd1 	.word	0x08000cd1
 8000c58:	08000cd1 	.word	0x08000cd1
 8000c5c:	08000cd1 	.word	0x08000cd1
 8000c60:	08000cd1 	.word	0x08000cd1
 8000c64:	08000cd1 	.word	0x08000cd1
 8000c68:	08000cd1 	.word	0x08000cd1
 8000c6c:	08000cd1 	.word	0x08000cd1
 8000c70:	08000cd1 	.word	0x08000cd1
 8000c74:	08000cd1 	.word	0x08000cd1
 8000c78:	08000cd1 	.word	0x08000cd1
 8000c7c:	08000cd1 	.word	0x08000cd1
 8000c80:	08000cd1 	.word	0x08000cd1
 8000c84:	08000cd1 	.word	0x08000cd1
 8000c88:	08000cd1 	.word	0x08000cd1
 8000c8c:	08000cd1 	.word	0x08000cd1
 8000c90:	08000cd1 	.word	0x08000cd1
 8000c94:	08000cd1 	.word	0x08000cd1
 8000c98:	08000cd1 	.word	0x08000cd1
 8000c9c:	08000cd1 	.word	0x08000cd1
 8000ca0:	08000cd1 	.word	0x08000cd1
 8000ca4:	08000cd1 	.word	0x08000cd1
 8000ca8:	08000cd1 	.word	0x08000cd1
 8000cac:	08000cd1 	.word	0x08000cd1
 8000cb0:	08000cd1 	.word	0x08000cd1
 8000cb4:	08000cd1 	.word	0x08000cd1
 8000cb8:	08000cd1 	.word	0x08000cd1
 8000cbc:	08000cd1 	.word	0x08000cd1
 8000cc0:	08000cd1 	.word	0x08000cd1
 8000cc4:	08000cd1 	.word	0x08000cd1
 8000cc8:	08000cd1 	.word	0x08000cd1
 8000ccc:	08000cd1 	.word	0x08000cd1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000cd0:	bf00      	nop
  }

  return (USBD_OK);
 8000cd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <CDC_Receive_FS+0x24>)
 8000cee:	f009 fdf1 	bl	800a8d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000cf2:	4804      	ldr	r0, [pc, #16]	; (8000d04 <CDC_Receive_FS+0x24>)
 8000cf4:	f009 fe0c 	bl	800a910 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8000cf8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000274 	.word	0x20000274

08000d08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	4613      	mov	r3, r2
 8000d14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8000d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	371c      	adds	r7, #28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2212      	movs	r2, #18
 8000d3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8000d3e:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20000034 	.word	0x20000034

08000d50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	2204      	movs	r2, #4
 8000d60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8000d62:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	20000054 	.word	0x20000054

08000d74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d105      	bne.n	8000d92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	4907      	ldr	r1, [pc, #28]	; (8000da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8000d8a:	4808      	ldr	r0, [pc, #32]	; (8000dac <USBD_FS_ProductStrDescriptor+0x38>)
 8000d8c:	f00b f838 	bl	800be00 <USBD_GetString>
 8000d90:	e004      	b.n	8000d9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	4904      	ldr	r1, [pc, #16]	; (8000da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <USBD_FS_ProductStrDescriptor+0x38>)
 8000d98:	f00b f832 	bl	800be00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20001550 	.word	0x20001550
 8000dac:	0800c1dc 	.word	0x0800c1dc

08000db0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	4904      	ldr	r1, [pc, #16]	; (8000dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8000dc2:	f00b f81d 	bl	800be00 <USBD_GetString>
  return USBD_StrDesc;
 8000dc6:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20001550 	.word	0x20001550
 8000dd4:	0800c1f4 	.word	0x0800c1f4

08000dd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	221a      	movs	r2, #26
 8000de8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000dea:	f000 f855 	bl	8000e98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8000dee:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000058 	.word	0x20000058

08000dfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d105      	bne.n	8000e1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000e12:	4808      	ldr	r0, [pc, #32]	; (8000e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8000e14:	f00a fff4 	bl	800be00 <USBD_GetString>
 8000e18:	e004      	b.n	8000e24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	4904      	ldr	r1, [pc, #16]	; (8000e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8000e20:	f00a ffee 	bl	800be00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000e24:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20001550 	.word	0x20001550
 8000e34:	0800c208 	.word	0x0800c208

08000e38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d105      	bne.n	8000e56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000e4e:	4808      	ldr	r0, [pc, #32]	; (8000e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000e50:	f00a ffd6 	bl	800be00 <USBD_GetString>
 8000e54:	e004      	b.n	8000e60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	4904      	ldr	r1, [pc, #16]	; (8000e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000e5c:	f00a ffd0 	bl	800be00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000e60:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20001550 	.word	0x20001550
 8000e70:	0800c214 	.word	0x0800c214

08000e74 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	220c      	movs	r2, #12
 8000e84:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8000e86:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	20000048 	.word	0x20000048

08000e98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <Get_SerialNum+0x44>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <Get_SerialNum+0x48>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <Get_SerialNum+0x4c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d009      	beq.n	8000ed2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000ebe:	2208      	movs	r2, #8
 8000ec0:	4909      	ldr	r1, [pc, #36]	; (8000ee8 <Get_SerialNum+0x50>)
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f000 f814 	bl	8000ef0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000ec8:	2204      	movs	r2, #4
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <Get_SerialNum+0x54>)
 8000ecc:	68b8      	ldr	r0, [r7, #8]
 8000ece:	f000 f80f 	bl	8000ef0 <IntToUnicode>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	1fff7590 	.word	0x1fff7590
 8000ee0:	1fff7594 	.word	0x1fff7594
 8000ee4:	1fff7598 	.word	0x1fff7598
 8000ee8:	2000005a 	.word	0x2000005a
 8000eec:	2000006a 	.word	0x2000006a

08000ef0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	4613      	mov	r3, r2
 8000efc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	75fb      	strb	r3, [r7, #23]
 8000f06:	e027      	b.n	8000f58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	0f1b      	lsrs	r3, r3, #28
 8000f0c:	2b09      	cmp	r3, #9
 8000f0e:	d80b      	bhi.n	8000f28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	0f1b      	lsrs	r3, r3, #28
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	7dfb      	ldrb	r3, [r7, #23]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	440b      	add	r3, r1
 8000f20:	3230      	adds	r2, #48	; 0x30
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e00a      	b.n	8000f3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	0f1b      	lsrs	r3, r3, #28
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	7dfb      	ldrb	r3, [r7, #23]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4619      	mov	r1, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	440b      	add	r3, r1
 8000f38:	3237      	adds	r2, #55	; 0x37
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	3301      	adds	r3, #1
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
 8000f54:	3301      	adds	r3, #1
 8000f56:	75fb      	strb	r3, [r7, #23]
 8000f58:	7dfa      	ldrb	r2, [r7, #23]
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d3d3      	bcc.n	8000f08 <IntToUnicode+0x18>
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	371c      	adds	r7, #28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0ae      	sub	sp, #184	; 0xb8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	228c      	movs	r2, #140	; 0x8c
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00b f847 	bl	800c024 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f9e:	d163      	bne.n	8001068 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 f841 	bl	8004038 <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000fbc:	f7ff fc02 	bl	80007c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <HAL_PCD_MspInit+0x100>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc4:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <HAL_PCD_MspInit+0x100>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <HAL_PCD_MspInit+0x100>)
 8000fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fd8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f000 fdb9 	bl	8001b78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <HAL_PCD_MspInit+0x100>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a19      	ldr	r2, [pc, #100]	; (8001070 <HAL_PCD_MspInit+0x100>)
 800100c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_PCD_MspInit+0x100>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_PCD_MspInit+0x100>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d114      	bne.n	8001054 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_PCD_MspInit+0x100>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_PCD_MspInit+0x100>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_PCD_MspInit+0x100>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001042:	f002 f969 	bl	8003318 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_PCD_MspInit+0x100>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_PCD_MspInit+0x100>)
 800104c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001050:	6593      	str	r3, [r2, #88]	; 0x58
 8001052:	e001      	b.n	8001058 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001054:	f002 f960 	bl	8003318 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2105      	movs	r1, #5
 800105c:	2043      	movs	r0, #67	; 0x43
 800105e:	f000 fce1 	bl	8001a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001062:	2043      	movs	r0, #67	; 0x43
 8001064:	f000 fcfa 	bl	8001a5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001068:	bf00      	nop
 800106a:	37b8      	adds	r7, #184	; 0xb8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001088:	4619      	mov	r1, r3
 800108a:	4610      	mov	r0, r2
 800108c:	f009 fd29 	bl	800aae2 <USBD_LL_SetupStage>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80010aa:	78fa      	ldrb	r2, [r7, #3]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f009 fd63 	bl	800ab8c <USBD_LL_DataOutStage>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80010e0:	78fa      	ldrb	r2, [r7, #3]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	3348      	adds	r3, #72	; 0x48
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f009 fdfc 	bl	800acf2 <USBD_LL_DataInStage>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001110:	4618      	mov	r0, r3
 8001112:	f009 ff36 	bl	800af82 <USBD_LL_SOF>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8001126:	2301      	movs	r3, #1
 8001128:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d001      	beq.n	8001136 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8001132:	f7ff fb47 	bl	80007c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f009 feda 	bl	800aefa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800114c:	4618      	mov	r0, r3
 800114e:	f009 fe82 	bl	800ae56 <USBD_LL_Reset>
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6812      	ldr	r2, [r2, #0]
 8001172:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001182:	4618      	mov	r0, r3
 8001184:	f009 fec9 	bl	800af1a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <HAL_PCD_SuspendCallback+0x48>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <HAL_PCD_SuspendCallback+0x48>)
 8001196:	f043 0306 	orr.w	r3, r3, #6
 800119a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6812      	ldr	r2, [r2, #0]
 80011be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80011c2:	f023 0301 	bic.w	r3, r3, #1
 80011c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_PCD_ResumeCallback+0x4c>)
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_PCD_ResumeCallback+0x4c>)
 80011d6:	f023 0306 	bic.w	r3, r3, #6
 80011da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80011dc:	f000 faf6 	bl	80017cc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80011e6:	4618      	mov	r0, r3
 80011e8:	f009 feb3 	bl	800af52 <USBD_LL_Resume>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800120a:	78fa      	ldrb	r2, [r7, #3]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f009 ff09 	bl	800b026 <USBD_LL_IsoOUTIncomplete>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800122e:	78fa      	ldrb	r2, [r7, #3]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f009 fec5 	bl	800afc2 <USBD_LL_IsoINIncomplete>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800124e:	4618      	mov	r0, r3
 8001250:	f009 ff1b 	bl	800b08a <USBD_LL_DevConnected>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800126a:	4618      	mov	r0, r3
 800126c:	f009 ff18 	bl	800b0a0 <USBD_LL_DevDisconnected>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d13c      	bne.n	8001302 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8001288:	4a20      	ldr	r2, [pc, #128]	; (800130c <USBD_LL_Init+0x94>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a1e      	ldr	r2, [pc, #120]	; (800130c <USBD_LL_Init+0x94>)
 8001294:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <USBD_LL_Init+0x94>)
 800129a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800129e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <USBD_LL_Init+0x94>)
 80012a2:	2206      	movs	r2, #6
 80012a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <USBD_LL_Init+0x94>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <USBD_LL_Init+0x94>)
 80012ae:	2202      	movs	r2, #2
 80012b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <USBD_LL_Init+0x94>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <USBD_LL_Init+0x94>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <USBD_LL_Init+0x94>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <USBD_LL_Init+0x94>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <USBD_LL_Init+0x94>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <USBD_LL_Init+0x94>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012d6:	480d      	ldr	r0, [pc, #52]	; (800130c <USBD_LL_Init+0x94>)
 80012d8:	f000 fe12 	bl	8001f00 <HAL_PCD_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80012e2:	f7ff fa6f 	bl	80007c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	4808      	ldr	r0, [pc, #32]	; (800130c <USBD_LL_Init+0x94>)
 80012ea:	f001 ff7c 	bl	80031e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80012ee:	2240      	movs	r2, #64	; 0x40
 80012f0:	2100      	movs	r1, #0
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <USBD_LL_Init+0x94>)
 80012f4:	f001 ff30 	bl	8003158 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	2101      	movs	r1, #1
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <USBD_LL_Init+0x94>)
 80012fe:	f001 ff2b 	bl	8003158 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20001750 	.word	0x20001750

08001310 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001326:	4618      	mov	r0, r3
 8001328:	f000 ff0e 	bl	8002148 <HAL_PCD_Start>
 800132c:	4603      	mov	r3, r0
 800132e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8001330:	7bbb      	ldrb	r3, [r7, #14]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d816      	bhi.n	8001364 <USBD_LL_Start+0x54>
 8001336:	a201      	add	r2, pc, #4	; (adr r2, 800133c <USBD_LL_Start+0x2c>)
 8001338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133c:	0800134d 	.word	0x0800134d
 8001340:	08001353 	.word	0x08001353
 8001344:	08001359 	.word	0x08001359
 8001348:	0800135f 	.word	0x0800135f
    case HAL_OK :
      usb_status = USBD_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
    break;
 8001350:	e00b      	b.n	800136a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001352:	2303      	movs	r3, #3
 8001354:	73fb      	strb	r3, [r7, #15]
    break;
 8001356:	e008      	b.n	800136a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
    break;
 800135c:	e005      	b.n	800136a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800135e:	2303      	movs	r3, #3
 8001360:	73fb      	strb	r3, [r7, #15]
    break;
 8001362:	e002      	b.n	800136a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8001364:	2303      	movs	r3, #3
 8001366:	73fb      	strb	r3, [r7, #15]
    break;
 8001368:	bf00      	nop
  }
  return usb_status;
 800136a:	7bfb      	ldrb	r3, [r7, #15]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	4608      	mov	r0, r1
 800137e:	4611      	mov	r1, r2
 8001380:	461a      	mov	r2, r3
 8001382:	4603      	mov	r3, r0
 8001384:	70fb      	strb	r3, [r7, #3]
 8001386:	460b      	mov	r3, r1
 8001388:	70bb      	strb	r3, [r7, #2]
 800138a:	4613      	mov	r3, r2
 800138c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800139c:	78bb      	ldrb	r3, [r7, #2]
 800139e:	883a      	ldrh	r2, [r7, #0]
 80013a0:	78f9      	ldrb	r1, [r7, #3]
 80013a2:	f001 fbb8 	bl	8002b16 <HAL_PCD_EP_Open>
 80013a6:	4603      	mov	r3, r0
 80013a8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d817      	bhi.n	80013e0 <USBD_LL_OpenEP+0x6c>
 80013b0:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <USBD_LL_OpenEP+0x44>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013c9 	.word	0x080013c9
 80013bc:	080013cf 	.word	0x080013cf
 80013c0:	080013d5 	.word	0x080013d5
 80013c4:	080013db 	.word	0x080013db
    case HAL_OK :
      usb_status = USBD_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]
    break;
 80013cc:	e00b      	b.n	80013e6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80013ce:	2303      	movs	r3, #3
 80013d0:	73fb      	strb	r3, [r7, #15]
    break;
 80013d2:	e008      	b.n	80013e6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
    break;
 80013d8:	e005      	b.n	80013e6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80013da:	2303      	movs	r3, #3
 80013dc:	73fb      	strb	r3, [r7, #15]
    break;
 80013de:	e002      	b.n	80013e6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80013e0:	2303      	movs	r3, #3
 80013e2:	73fb      	strb	r3, [r7, #15]
    break;
 80013e4:	bf00      	nop
  }
  return usb_status;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800140a:	78fa      	ldrb	r2, [r7, #3]
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fbe9 	bl	8002be6 <HAL_PCD_EP_Close>
 8001414:	4603      	mov	r3, r0
 8001416:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8001418:	7bbb      	ldrb	r3, [r7, #14]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d816      	bhi.n	800144c <USBD_LL_CloseEP+0x5c>
 800141e:	a201      	add	r2, pc, #4	; (adr r2, 8001424 <USBD_LL_CloseEP+0x34>)
 8001420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001424:	08001435 	.word	0x08001435
 8001428:	0800143b 	.word	0x0800143b
 800142c:	08001441 	.word	0x08001441
 8001430:	08001447 	.word	0x08001447
    case HAL_OK :
      usb_status = USBD_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
    break;
 8001438:	e00b      	b.n	8001452 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800143a:	2303      	movs	r3, #3
 800143c:	73fb      	strb	r3, [r7, #15]
    break;
 800143e:	e008      	b.n	8001452 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
    break;
 8001444:	e005      	b.n	8001452 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001446:	2303      	movs	r3, #3
 8001448:	73fb      	strb	r3, [r7, #15]
    break;
 800144a:	e002      	b.n	8001452 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800144c:	2303      	movs	r3, #3
 800144e:	73fb      	strb	r3, [r7, #15]
    break;
 8001450:	bf00      	nop
  }
  return usb_status;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001476:	78fa      	ldrb	r2, [r7, #3]
 8001478:	4611      	mov	r1, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f001 fc78 	bl	8002d70 <HAL_PCD_EP_SetStall>
 8001480:	4603      	mov	r3, r0
 8001482:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8001484:	7bbb      	ldrb	r3, [r7, #14]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d816      	bhi.n	80014b8 <USBD_LL_StallEP+0x5c>
 800148a:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <USBD_LL_StallEP+0x34>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	080014a1 	.word	0x080014a1
 8001494:	080014a7 	.word	0x080014a7
 8001498:	080014ad 	.word	0x080014ad
 800149c:	080014b3 	.word	0x080014b3
    case HAL_OK :
      usb_status = USBD_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
    break;
 80014a4:	e00b      	b.n	80014be <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80014a6:	2303      	movs	r3, #3
 80014a8:	73fb      	strb	r3, [r7, #15]
    break;
 80014aa:	e008      	b.n	80014be <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80014ac:	2301      	movs	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
    break;
 80014b0:	e005      	b.n	80014be <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80014b2:	2303      	movs	r3, #3
 80014b4:	73fb      	strb	r3, [r7, #15]
    break;
 80014b6:	e002      	b.n	80014be <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80014b8:	2303      	movs	r3, #3
 80014ba:	73fb      	strb	r3, [r7, #15]
    break;
 80014bc:	bf00      	nop
  }
  return usb_status;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80014e2:	78fa      	ldrb	r2, [r7, #3]
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 fca4 	bl	8002e34 <HAL_PCD_EP_ClrStall>
 80014ec:	4603      	mov	r3, r0
 80014ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80014f0:	7bbb      	ldrb	r3, [r7, #14]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d816      	bhi.n	8001524 <USBD_LL_ClearStallEP+0x5c>
 80014f6:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <USBD_LL_ClearStallEP+0x34>)
 80014f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fc:	0800150d 	.word	0x0800150d
 8001500:	08001513 	.word	0x08001513
 8001504:	08001519 	.word	0x08001519
 8001508:	0800151f 	.word	0x0800151f
    case HAL_OK :
      usb_status = USBD_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
    break;
 8001510:	e00b      	b.n	800152a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001512:	2303      	movs	r3, #3
 8001514:	73fb      	strb	r3, [r7, #15]
    break;
 8001516:	e008      	b.n	800152a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
    break;
 800151c:	e005      	b.n	800152a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800151e:	2303      	movs	r3, #3
 8001520:	73fb      	strb	r3, [r7, #15]
    break;
 8001522:	e002      	b.n	800152a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8001524:	2303      	movs	r3, #3
 8001526:	73fb      	strb	r3, [r7, #15]
    break;
 8001528:	bf00      	nop
  }
  return usb_status;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001546:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8001548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800154c:	2b00      	cmp	r3, #0
 800154e:	da0b      	bge.n	8001568 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001556:	68f9      	ldr	r1, [r7, #12]
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	333e      	adds	r3, #62	; 0x3e
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	e00b      	b.n	8001580 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800156e:	68f9      	ldr	r1, [r7, #12]
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800157e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80015a6:	78fa      	ldrb	r2, [r7, #3]
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f001 fa8e 	bl	8002acc <HAL_PCD_SetAddress>
 80015b0:	4603      	mov	r3, r0
 80015b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80015b4:	7bbb      	ldrb	r3, [r7, #14]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d816      	bhi.n	80015e8 <USBD_LL_SetUSBAddress+0x5c>
 80015ba:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <USBD_LL_SetUSBAddress+0x34>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	080015d1 	.word	0x080015d1
 80015c4:	080015d7 	.word	0x080015d7
 80015c8:	080015dd 	.word	0x080015dd
 80015cc:	080015e3 	.word	0x080015e3
    case HAL_OK :
      usb_status = USBD_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]
    break;
 80015d4:	e00b      	b.n	80015ee <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80015d6:	2303      	movs	r3, #3
 80015d8:	73fb      	strb	r3, [r7, #15]
    break;
 80015da:	e008      	b.n	80015ee <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
    break;
 80015e0:	e005      	b.n	80015ee <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80015e2:	2303      	movs	r3, #3
 80015e4:	73fb      	strb	r3, [r7, #15]
    break;
 80015e6:	e002      	b.n	80015ee <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80015e8:	2303      	movs	r3, #3
 80015ea:	73fb      	strb	r3, [r7, #15]
    break;
 80015ec:	bf00      	nop
  }
  return usb_status;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	460b      	mov	r3, r1
 8001606:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8001616:	7af9      	ldrb	r1, [r7, #11]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	f001 fb77 	bl	8002d0e <HAL_PCD_EP_Transmit>
 8001620:	4603      	mov	r3, r0
 8001622:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8001624:	7dbb      	ldrb	r3, [r7, #22]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d816      	bhi.n	8001658 <USBD_LL_Transmit+0x60>
 800162a:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <USBD_LL_Transmit+0x38>)
 800162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001630:	08001641 	.word	0x08001641
 8001634:	08001647 	.word	0x08001647
 8001638:	0800164d 	.word	0x0800164d
 800163c:	08001653 	.word	0x08001653
    case HAL_OK :
      usb_status = USBD_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	75fb      	strb	r3, [r7, #23]
    break;
 8001644:	e00b      	b.n	800165e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001646:	2303      	movs	r3, #3
 8001648:	75fb      	strb	r3, [r7, #23]
    break;
 800164a:	e008      	b.n	800165e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800164c:	2301      	movs	r3, #1
 800164e:	75fb      	strb	r3, [r7, #23]
    break;
 8001650:	e005      	b.n	800165e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001652:	2303      	movs	r3, #3
 8001654:	75fb      	strb	r3, [r7, #23]
    break;
 8001656:	e002      	b.n	800165e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8001658:	2303      	movs	r3, #3
 800165a:	75fb      	strb	r3, [r7, #23]
    break;
 800165c:	bf00      	nop
  }
  return usb_status;
 800165e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	460b      	mov	r3, r1
 8001676:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8001686:	7af9      	ldrb	r1, [r7, #11]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	f001 faf5 	bl	8002c7a <HAL_PCD_EP_Receive>
 8001690:	4603      	mov	r3, r0
 8001692:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8001694:	7dbb      	ldrb	r3, [r7, #22]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d816      	bhi.n	80016c8 <USBD_LL_PrepareReceive+0x60>
 800169a:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <USBD_LL_PrepareReceive+0x38>)
 800169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a0:	080016b1 	.word	0x080016b1
 80016a4:	080016b7 	.word	0x080016b7
 80016a8:	080016bd 	.word	0x080016bd
 80016ac:	080016c3 	.word	0x080016c3
    case HAL_OK :
      usb_status = USBD_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	75fb      	strb	r3, [r7, #23]
    break;
 80016b4:	e00b      	b.n	80016ce <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80016b6:	2303      	movs	r3, #3
 80016b8:	75fb      	strb	r3, [r7, #23]
    break;
 80016ba:	e008      	b.n	80016ce <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80016bc:	2301      	movs	r3, #1
 80016be:	75fb      	strb	r3, [r7, #23]
    break;
 80016c0:	e005      	b.n	80016ce <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80016c2:	2303      	movs	r3, #3
 80016c4:	75fb      	strb	r3, [r7, #23]
    break;
 80016c6:	e002      	b.n	80016ce <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80016c8:	2303      	movs	r3, #3
 80016ca:	75fb      	strb	r3, [r7, #23]
    break;
 80016cc:	bf00      	nop
  }
  return usb_status;
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f001 faf5 	bl	8002cde <HAL_PCD_EP_GetRxCount>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <HAL_PCDEx_LPM_Callback+0x18>
 8001712:	2b01      	cmp	r3, #1
 8001714:	d01f      	beq.n	8001756 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8001716:	e03b      	b.n	8001790 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d007      	beq.n	8001730 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8001720:	f000 f854 	bl	80017cc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_PCDEx_LPM_Callback+0x98>)
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <HAL_PCDEx_LPM_Callback+0x98>)
 800172a:	f023 0306 	bic.w	r3, r3, #6
 800172e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800174e:	4618      	mov	r0, r3
 8001750:	f009 fbff 	bl	800af52 <USBD_LL_Resume>
    break;
 8001754:	e01c      	b.n	8001790 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001774:	4618      	mov	r0, r3
 8001776:	f009 fbd0 	bl	800af1a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_PCDEx_LPM_Callback+0x98>)
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_PCDEx_LPM_Callback+0x98>)
 8001788:	f043 0306 	orr.w	r3, r3, #6
 800178c:	6113      	str	r3, [r2, #16]
    break;
 800178e:	bf00      	nop
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <USBD_static_malloc+0x18>)
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20001c5c 	.word	0x20001c5c

080017b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80017d0:	f7fe feae 	bl	8000530 <SystemClock_Config>
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <SystemInit+0x20>)
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <SystemInit+0x20>)
 80017e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001806:	2003      	movs	r0, #3
 8001808:	f000 f901 	bl	8001a0e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180c:	200f      	movs	r0, #15
 800180e:	f7ff f86f 	bl	80008f0 <HAL_InitTick>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	e001      	b.n	8001822 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800181e:	f7fe ffd7 	bl	80007d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001822:	79fb      	ldrb	r3, [r7, #7]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_IncTick+0x24>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	2000007c 	.word	0x2000007c
 8001850:	20001e7c 	.word	0x20001e7c

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20001e7c 	.word	0x20001e7c

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff ffee 	bl	8001854 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_Delay+0x44>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001892:	bf00      	nop
 8001894:	f7ff ffde 	bl	8001854 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000007c 	.word	0x2000007c

080018b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d0:	4013      	ands	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <__NVIC_GetPriorityGrouping+0x18>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	f003 0307 	and.w	r3, r3, #7
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	db0b      	blt.n	8001942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f003 021f 	and.w	r2, r3, #31
 8001930:	4907      	ldr	r1, [pc, #28]	; (8001950 <__NVIC_EnableIRQ+0x38>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	2001      	movs	r0, #1
 800193a:	fa00 f202 	lsl.w	r2, r0, r2
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e100 	.word	0xe000e100

08001954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	2b00      	cmp	r3, #0
 8001966:	db0a      	blt.n	800197e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	490c      	ldr	r1, [pc, #48]	; (80019a0 <__NVIC_SetPriority+0x4c>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	0112      	lsls	r2, r2, #4
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	440b      	add	r3, r1
 8001978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800197c:	e00a      	b.n	8001994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4908      	ldr	r1, [pc, #32]	; (80019a4 <__NVIC_SetPriority+0x50>)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	3b04      	subs	r3, #4
 800198c:	0112      	lsls	r2, r2, #4
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	440b      	add	r3, r1
 8001992:	761a      	strb	r2, [r3, #24]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f1c3 0307 	rsb	r3, r3, #7
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	bf28      	it	cs
 80019c6:	2304      	movcs	r3, #4
 80019c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3304      	adds	r3, #4
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d902      	bls.n	80019d8 <NVIC_EncodePriority+0x30>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3b03      	subs	r3, #3
 80019d6:	e000      	b.n	80019da <NVIC_EncodePriority+0x32>
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	f04f 32ff 	mov.w	r2, #4294967295
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43da      	mvns	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	401a      	ands	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43d9      	mvns	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	4313      	orrs	r3, r2
         );
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ff4c 	bl	80018b4 <__NVIC_SetPriorityGrouping>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a36:	f7ff ff61 	bl	80018fc <__NVIC_GetPriorityGrouping>
 8001a3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	68b9      	ldr	r1, [r7, #8]
 8001a40:	6978      	ldr	r0, [r7, #20]
 8001a42:	f7ff ffb1 	bl	80019a8 <NVIC_EncodePriority>
 8001a46:	4602      	mov	r2, r0
 8001a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff80 	bl	8001954 <__NVIC_SetPriority>
}
 8001a54:	bf00      	nop
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff54 	bl	8001918 <__NVIC_EnableIRQ>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d008      	beq.n	8001aa2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2204      	movs	r2, #4
 8001a94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e022      	b.n	8001ae8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 020e 	bic.w	r2, r2, #14
 8001ab0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0201 	bic.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f003 021c 	and.w	r2, r3, #28
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d005      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	e029      	b.n	8001b6c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 020e 	bic.w	r2, r2, #14
 8001b26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	f003 021c 	and.w	r2, r3, #28
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
    }
  }
  return status;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b86:	e166      	b.n	8001e56 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8158 	beq.w	8001e50 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d005      	beq.n	8001bb8 <HAL_GPIO_Init+0x40>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d130      	bne.n	8001c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bee:	2201      	movs	r2, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	f003 0201 	and.w	r2, r3, #1
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d017      	beq.n	8001c56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d123      	bne.n	8001caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	08da      	lsrs	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3208      	adds	r2, #8
 8001c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	6939      	ldr	r1, [r7, #16]
 8001ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0203 	and.w	r2, r3, #3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80b2 	beq.w	8001e50 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cec:	4b61      	ldr	r3, [pc, #388]	; (8001e74 <HAL_GPIO_Init+0x2fc>)
 8001cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf0:	4a60      	ldr	r2, [pc, #384]	; (8001e74 <HAL_GPIO_Init+0x2fc>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf8:	4b5e      	ldr	r3, [pc, #376]	; (8001e74 <HAL_GPIO_Init+0x2fc>)
 8001cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d04:	4a5c      	ldr	r2, [pc, #368]	; (8001e78 <HAL_GPIO_Init+0x300>)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d2e:	d02b      	beq.n	8001d88 <HAL_GPIO_Init+0x210>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a52      	ldr	r2, [pc, #328]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d025      	beq.n	8001d84 <HAL_GPIO_Init+0x20c>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a51      	ldr	r2, [pc, #324]	; (8001e80 <HAL_GPIO_Init+0x308>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d01f      	beq.n	8001d80 <HAL_GPIO_Init+0x208>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a50      	ldr	r2, [pc, #320]	; (8001e84 <HAL_GPIO_Init+0x30c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d019      	beq.n	8001d7c <HAL_GPIO_Init+0x204>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a4f      	ldr	r2, [pc, #316]	; (8001e88 <HAL_GPIO_Init+0x310>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d013      	beq.n	8001d78 <HAL_GPIO_Init+0x200>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a4e      	ldr	r2, [pc, #312]	; (8001e8c <HAL_GPIO_Init+0x314>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00d      	beq.n	8001d74 <HAL_GPIO_Init+0x1fc>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a4d      	ldr	r2, [pc, #308]	; (8001e90 <HAL_GPIO_Init+0x318>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <HAL_GPIO_Init+0x1f8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a4c      	ldr	r2, [pc, #304]	; (8001e94 <HAL_GPIO_Init+0x31c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_GPIO_Init+0x1f4>
 8001d68:	2307      	movs	r3, #7
 8001d6a:	e00e      	b.n	8001d8a <HAL_GPIO_Init+0x212>
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	e00c      	b.n	8001d8a <HAL_GPIO_Init+0x212>
 8001d70:	2306      	movs	r3, #6
 8001d72:	e00a      	b.n	8001d8a <HAL_GPIO_Init+0x212>
 8001d74:	2305      	movs	r3, #5
 8001d76:	e008      	b.n	8001d8a <HAL_GPIO_Init+0x212>
 8001d78:	2304      	movs	r3, #4
 8001d7a:	e006      	b.n	8001d8a <HAL_GPIO_Init+0x212>
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e004      	b.n	8001d8a <HAL_GPIO_Init+0x212>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e002      	b.n	8001d8a <HAL_GPIO_Init+0x212>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_GPIO_Init+0x212>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	f002 0203 	and.w	r2, r2, #3
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	4093      	lsls	r3, r2
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d9a:	4937      	ldr	r1, [pc, #220]	; (8001e78 <HAL_GPIO_Init+0x300>)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001da8:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <HAL_GPIO_Init+0x320>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dcc:	4a32      	ldr	r2, [pc, #200]	; (8001e98 <HAL_GPIO_Init+0x320>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <HAL_GPIO_Init+0x320>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001df6:	4a28      	ldr	r2, [pc, #160]	; (8001e98 <HAL_GPIO_Init+0x320>)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dfc:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <HAL_GPIO_Init+0x320>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_GPIO_Init+0x320>)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_GPIO_Init+0x320>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e4a:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <HAL_GPIO_Init+0x320>)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f47f ae91 	bne.w	8001b88 <HAL_GPIO_Init+0x10>
  }
}
 8001e66:	bf00      	nop
 8001e68:	bf00      	nop
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	48000400 	.word	0x48000400
 8001e80:	48000800 	.word	0x48000800
 8001e84:	48000c00 	.word	0x48000c00
 8001e88:	48001000 	.word	0x48001000
 8001e8c:	48001400 	.word	0x48001400
 8001e90:	48001800 	.word	0x48001800
 8001e94:	48001c00 	.word	0x48001c00
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb8:	e002      	b.n	8001ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	041a      	lsls	r2, r3, #16
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	43d9      	mvns	r1, r3
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	400b      	ands	r3, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	b08f      	sub	sp, #60	; 0x3c
 8001f04:	af0a      	add	r7, sp, #40	; 0x28
 8001f06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e116      	b.n	8002140 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff f81f 	bl	8000f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2203      	movs	r2, #3
 8001f36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d102      	bne.n	8001f4c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 f938 	bl	80061c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	687e      	ldr	r6, [r7, #4]
 8001f5e:	466d      	mov	r5, sp
 8001f60:	f106 0410 	add.w	r4, r6, #16
 8001f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f70:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f74:	1d33      	adds	r3, r6, #4
 8001f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f78:	6838      	ldr	r0, [r7, #0]
 8001f7a:	f004 f84a 	bl	8006012 <USB_CoreInit>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0d7      	b.n	8002140 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 f926 	bl	80061e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	e04a      	b.n	8002038 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	333d      	adds	r3, #61	; 0x3d
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	333c      	adds	r3, #60	; 0x3c
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	b298      	uxth	r0, r3
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	3356      	adds	r3, #86	; 0x56
 8001fde:	4602      	mov	r2, r0
 8001fe0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	3340      	adds	r3, #64	; 0x40
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3344      	adds	r3, #68	; 0x44
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	3348      	adds	r3, #72	; 0x48
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	334c      	adds	r3, #76	; 0x4c
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	3301      	adds	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	d3af      	bcc.n	8001fa2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	e044      	b.n	80020d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002074:	7bfa      	ldrb	r2, [r7, #15]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	3301      	adds	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d3b5      	bcc.n	8002048 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	687e      	ldr	r6, [r7, #4]
 80020e4:	466d      	mov	r5, sp
 80020e6:	f106 0410 	add.w	r4, r6, #16
 80020ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020fa:	1d33      	adds	r3, r6, #4
 80020fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fe:	6838      	ldr	r0, [r7, #0]
 8002100:	f004 f8be 	bl	8006280 <USB_DevInit>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e014      	b.n	8002140 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	2b01      	cmp	r3, #1
 800212c:	d102      	bne.n	8002134 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f001 f86a 	bl	8003208 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f005 f86c 	bl	8007216 <USB_DevDisconnect>

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002148 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_PCD_Start+0x1c>
 8002160:	2302      	movs	r3, #2
 8002162:	e01c      	b.n	800219e <HAL_PCD_Start+0x56>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	2b01      	cmp	r3, #1
 8002172:	d105      	bne.n	8002180 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f004 f80d 	bl	80061a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f005 f820 	bl	80071d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021a6:	b590      	push	{r4, r7, lr}
 80021a8:	b08d      	sub	sp, #52	; 0x34
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f005 f8de 	bl	800737e <USB_GetMode>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f040 847e 	bne.w	8002ac6 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f005 f842 	bl	8007258 <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8474 	beq.w	8002ac4 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f005 f82f 	bl	8007258 <USB_ReadInterrupts>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b02      	cmp	r3, #2
 8002202:	d107      	bne.n	8002214 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f002 0202 	and.w	r2, r2, #2
 8002212:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f005 f81d 	bl	8007258 <USB_ReadInterrupts>
 800221e:	4603      	mov	r3, r0
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b10      	cmp	r3, #16
 8002226:	d161      	bne.n	80022ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0210 	bic.w	r2, r2, #16
 8002236:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	f003 020f 	and.w	r2, r3, #15
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	0c5b      	lsrs	r3, r3, #17
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	2b02      	cmp	r3, #2
 8002262:	d124      	bne.n	80022ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d035      	beq.n	80022dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800227a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	6a38      	ldr	r0, [r7, #32]
 8002284:	f004 fe54 	bl	8006f30 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002294:	441a      	add	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a6:	441a      	add	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	615a      	str	r2, [r3, #20]
 80022ac:	e016      	b.n	80022dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	0c5b      	lsrs	r3, r3, #17
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d110      	bne.n	80022dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022c0:	2208      	movs	r2, #8
 80022c2:	4619      	mov	r1, r3
 80022c4:	6a38      	ldr	r0, [r7, #32]
 80022c6:	f004 fe33 	bl	8006f30 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d6:	441a      	add	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0210 	orr.w	r2, r2, #16
 80022ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f004 ffb1 	bl	8007258 <USB_ReadInterrupts>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002300:	f040 80a7 	bne.w	8002452 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f004 ffb6 	bl	800727e <USB_ReadDevAllOutEpInterrupt>
 8002312:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002314:	e099      	b.n	800244a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 808e 	beq.w	800243e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f004 ffda 	bl	80072e6 <USB_ReadDevOutEPInterrupt>
 8002332:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00c      	beq.n	8002358 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234a:	461a      	mov	r2, r3
 800234c:	2301      	movs	r3, #1
 800234e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fe7e 	bl	8003054 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00c      	beq.n	800237c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236e:	461a      	mov	r2, r3
 8002370:	2308      	movs	r3, #8
 8002372:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 feba 	bl	80030f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002392:	461a      	mov	r2, r3
 8002394:	2310      	movs	r3, #16
 8002396:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d030      	beq.n	8002404 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023aa:	2b80      	cmp	r3, #128	; 0x80
 80023ac:	d109      	bne.n	80023c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	3304      	adds	r3, #4
 80023d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	78db      	ldrb	r3, [r3, #3]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d108      	bne.n	80023f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2200      	movs	r2, #0
 80023e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7fe ff03 	bl	80011f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023fe:	461a      	mov	r2, r3
 8002400:	2302      	movs	r3, #2
 8002402:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	4413      	add	r3, r2
 8002416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800241a:	461a      	mov	r2, r3
 800241c:	2320      	movs	r3, #32
 800241e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002436:	461a      	mov	r2, r3
 8002438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800243c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	3301      	adds	r3, #1
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	2b00      	cmp	r3, #0
 800244e:	f47f af62 	bne.w	8002316 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f004 fefe 	bl	8007258 <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002462:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002466:	f040 80a4 	bne.w	80025b2 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f004 ff1f 	bl	80072b2 <USB_ReadDevAllInEpInterrupt>
 8002474:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800247a:	e096      	b.n	80025aa <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 808b 	beq.w	800259e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f004 ff45 	bl	8007322 <USB_ReadDevInEPInterrupt>
 8002498:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	2201      	movs	r2, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69f9      	ldr	r1, [r7, #28]
 80024c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024c4:	4013      	ands	r3, r2
 80024c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d4:	461a      	mov	r2, r3
 80024d6:	2301      	movs	r3, #1
 80024d8:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	4619      	mov	r1, r3
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7fe fdf4 	bl	80010ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024fc:	461a      	mov	r2, r3
 80024fe:	2308      	movs	r3, #8
 8002500:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002518:	461a      	mov	r2, r3
 800251a:	2310      	movs	r3, #16
 800251c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002534:	461a      	mov	r2, r3
 8002536:	2340      	movs	r3, #64	; 0x40
 8002538:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d023      	beq.n	800258c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002546:	6a38      	ldr	r0, [r7, #32]
 8002548:	f003 ffdc 	bl	8006504 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800254c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	3338      	adds	r3, #56	; 0x38
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	3304      	adds	r3, #4
 800255e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	78db      	ldrb	r3, [r3, #3]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d108      	bne.n	800257a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2200      	movs	r2, #0
 800256c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	b2db      	uxtb	r3, r3
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7fe fe51 	bl	800121c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002586:	461a      	mov	r2, r3
 8002588:	2302      	movs	r3, #2
 800258a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 fcd2 	bl	8002f42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	3301      	adds	r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	085b      	lsrs	r3, r3, #1
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f47f af65 	bne.w	800247c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f004 fe4e 	bl	8007258 <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025c6:	d122      	bne.n	800260e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d6:	f023 0301 	bic.w	r3, r3, #1
 80025da:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d108      	bne.n	80025f8 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025ee:	2100      	movs	r1, #0
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff f885 	bl	8001700 <HAL_PCDEx_LPM_Callback>
 80025f6:	e002      	b.n	80025fe <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7fe fdd5 	bl	80011a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800260c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f004 fe20 	bl	8007258 <USB_ReadInterrupts>
 8002618:	4603      	mov	r3, r0
 800261a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002622:	d112      	bne.n	800264a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d102      	bne.n	800263a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7fe fd91 	bl	800115c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002648:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f004 fe02 	bl	8007258 <USB_ReadInterrupts>
 8002654:	4603      	mov	r3, r0
 8002656:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800265a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800265e:	d121      	bne.n	80026a4 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800266e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d111      	bne.n	800269e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	f003 020f 	and.w	r2, r3, #15
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002694:	2101      	movs	r1, #1
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff f832 	bl	8001700 <HAL_PCDEx_LPM_Callback>
 800269c:	e002      	b.n	80026a4 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe fd5c 	bl	800115c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f004 fdd5 	bl	8007258 <USB_ReadInterrupts>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b8:	f040 80b5 	bne.w	8002826 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2110      	movs	r1, #16
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 ff14 	bl	8006504 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e0:	e046      	b.n	8002770 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ee:	461a      	mov	r2, r3
 80026f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002706:	0151      	lsls	r1, r2, #5
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	440a      	add	r2, r1
 800270c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002710:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002714:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	4413      	add	r3, r2
 800271e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002722:	461a      	mov	r2, r3
 8002724:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002728:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	4413      	add	r3, r2
 8002732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800273a:	0151      	lsls	r1, r2, #5
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	440a      	add	r2, r1
 8002740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002744:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002748:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	4413      	add	r3, r2
 8002752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275a:	0151      	lsls	r1, r2, #5
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	440a      	add	r2, r1
 8002760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002764:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002768:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	3301      	adds	r3, #1
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002776:	429a      	cmp	r2, r3
 8002778:	d3b3      	bcc.n	80026e2 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002788:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800278c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a6:	f043 030b 	orr.w	r3, r3, #11
 80027aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027bc:	f043 030b 	orr.w	r3, r3, #11
 80027c0:	6453      	str	r3, [r2, #68]	; 0x44
 80027c2:	e015      	b.n	80027f0 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ea:	f043 030b 	orr.w	r3, r3, #11
 80027ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002802:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f004 fde5 	bl	80073e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f004 fd14 	bl	8007258 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283a:	d124      	bne.n	8002886 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f004 fdaa 	bl	800739a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f003 fed7 	bl	80065fe <USB_GetDevSpeed>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681c      	ldr	r4, [r3, #0]
 800285c:	f001 fb22 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8002860:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	4620      	mov	r0, r4
 800286c:	f003 fbfe 	bl	800606c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe fc54 	bl	800111e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002884:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f004 fce4 	bl	8007258 <USB_ReadInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b08      	cmp	r3, #8
 8002898:	d10a      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fc31 	bl	8001102 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f002 0208 	and.w	r2, r2, #8
 80028ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f004 fccf 	bl	8007258 <USB_ReadInterrupts>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d122      	bne.n	800290a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028d0:	2301      	movs	r3, #1
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
 80028d4:	e014      	b.n	8002900 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d105      	bne.n	80028fa <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 faf3 	bl	8002ee0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	3301      	adds	r3, #1
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002906:	429a      	cmp	r2, r3
 8002908:	d3e5      	bcc.n	80028d6 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f004 fca2 	bl	8007258 <USB_ReadInterrupts>
 8002914:	4603      	mov	r3, r0
 8002916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800291e:	d13b      	bne.n	8002998 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002920:	2301      	movs	r3, #1
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
 8002924:	e02b      	b.n	800297e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	4413      	add	r3, r2
 800292e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	3340      	adds	r3, #64	; 0x40
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d115      	bne.n	8002978 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800294c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800294e:	2b00      	cmp	r3, #0
 8002950:	da12      	bge.n	8002978 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002956:	4613      	mov	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	333f      	adds	r3, #63	; 0x3f
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800296e:	b2db      	uxtb	r3, r3
 8002970:	4619      	mov	r1, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fab4 	bl	8002ee0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	3301      	adds	r3, #1
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002984:	429a      	cmp	r2, r3
 8002986:	d3ce      	bcc.n	8002926 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f004 fc5b 	bl	8007258 <USB_ReadInterrupts>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029ac:	d155      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ae:	2301      	movs	r3, #1
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
 80029b2:	e045      	b.n	8002a40 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d12e      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029de:	2b00      	cmp	r3, #0
 80029e0:	da2b      	bge.n	8002a3a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80029ee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d121      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a36:	6053      	str	r3, [r2, #4]
            break;
 8002a38:	e007      	b.n	8002a4a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d3b4      	bcc.n	80029b4 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 fbfa 	bl	8007258 <USB_ReadInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d10a      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7fe fbe5 	bl	8001240 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 fbe4 	bl	8007258 <USB_ReadInterrupts>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d115      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7fe fbd5 	bl	800125c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	e000      	b.n	8002ac6 <HAL_PCD_IRQHandler+0x920>
      return;
 8002ac4:	bf00      	nop
    }
  }
}
 8002ac6:	3734      	adds	r7, #52	; 0x34
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd90      	pop	{r4, r7, pc}

08002acc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_PCD_SetAddress+0x1a>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e013      	b.n	8002b0e <HAL_PCD_SetAddress+0x42>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 fb42 	bl	8007188 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	4608      	mov	r0, r1
 8002b20:	4611      	mov	r1, r2
 8002b22:	461a      	mov	r2, r3
 8002b24:	4603      	mov	r3, r0
 8002b26:	70fb      	strb	r3, [r7, #3]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	803b      	strh	r3, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	da0f      	bge.n	8002b5c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	3338      	adds	r3, #56	; 0x38
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	705a      	strb	r2, [r3, #1]
 8002b5a:	e00f      	b.n	8002b7c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	3304      	adds	r3, #4
 8002b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b88:	883a      	ldrh	r2, [r7, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	78ba      	ldrb	r2, [r7, #2]
 8002b92:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	785b      	ldrb	r3, [r3, #1]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d004      	beq.n	8002ba6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ba6:	78bb      	ldrb	r3, [r7, #2]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d102      	bne.n	8002bb2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_PCD_EP_Open+0xaa>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e00e      	b.n	8002bde <HAL_PCD_EP_Open+0xc8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68f9      	ldr	r1, [r7, #12]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 fd34 	bl	800663c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002bdc:	7afb      	ldrb	r3, [r7, #11]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	da0f      	bge.n	8002c1a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	f003 020f 	and.w	r2, r3, #15
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	3338      	adds	r3, #56	; 0x38
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3304      	adds	r3, #4
 8002c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	705a      	strb	r2, [r3, #1]
 8002c18:	e00f      	b.n	8002c3a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	f003 020f 	and.w	r2, r3, #15
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4413      	add	r3, r2
 8002c30:	3304      	adds	r3, #4
 8002c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_PCD_EP_Close+0x6e>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e00e      	b.n	8002c72 <HAL_PCD_EP_Close+0x8c>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68f9      	ldr	r1, [r7, #12]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f003 fd72 	bl	800674c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	460b      	mov	r3, r1
 8002c88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	7afb      	ldrb	r3, [r7, #11]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cbc:	7afb      	ldrb	r3, [r7, #11]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6979      	ldr	r1, [r7, #20]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f003 fe18 	bl	8006904 <USB_EPStartXfer>

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	f003 020f 	and.w	r2, r3, #15
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8002d00:	681b      	ldr	r3, [r3, #0]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d1e:	7afb      	ldrb	r3, [r7, #11]
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	3338      	adds	r3, #56	; 0x38
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4413      	add	r3, r2
 8002d32:	3304      	adds	r3, #4
 8002d34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d4e:	7afb      	ldrb	r3, [r7, #11]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6979      	ldr	r1, [r7, #20]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 fdcf 	bl	8006904 <USB_EPStartXfer>

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	f003 020f 	and.w	r2, r3, #15
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d901      	bls.n	8002d8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e04e      	b.n	8002e2c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da0f      	bge.n	8002db6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	3338      	adds	r3, #56	; 0x38
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	3304      	adds	r3, #4
 8002dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	705a      	strb	r2, [r3, #1]
 8002db4:	e00d      	b.n	8002dd2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3304      	adds	r3, #4
 8002dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_PCD_EP_SetStall+0x82>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e01c      	b.n	8002e2c <HAL_PCD_EP_SetStall+0xbc>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f004 f8ed 	bl	8006fe0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d108      	bne.n	8002e22 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	f004 fadf 	bl	80073e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	f003 020f 	and.w	r2, r3, #15
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d901      	bls.n	8002e52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e042      	b.n	8002ed8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	da0f      	bge.n	8002e7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	f003 020f 	and.w	r2, r3, #15
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	3338      	adds	r3, #56	; 0x38
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3304      	adds	r3, #4
 8002e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	705a      	strb	r2, [r3, #1]
 8002e78:	e00f      	b.n	8002e9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	f003 020f 	and.w	r2, r3, #15
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3304      	adds	r3, #4
 8002e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_PCD_EP_ClrStall+0x86>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e00e      	b.n	8002ed8 <HAL_PCD_EP_ClrStall+0xa4>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68f9      	ldr	r1, [r7, #12]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f004 f8f7 	bl	80070bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	da0c      	bge.n	8002f0e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 020f 	and.w	r2, r3, #15
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	3338      	adds	r3, #56	; 0x38
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	3304      	adds	r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e00c      	b.n	8002f28 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68f9      	ldr	r1, [r7, #12]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 ff1a 	bl	8006d68 <USB_EPStopXfer>
 8002f34:	4603      	mov	r3, r0
 8002f36:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f38:	7afb      	ldrb	r3, [r7, #11]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b088      	sub	sp, #32
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	3338      	adds	r3, #56	; 0x38
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	3304      	adds	r3, #4
 8002f68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d901      	bls.n	8002f7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e067      	b.n	800304a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d902      	bls.n	8002f96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3303      	adds	r3, #3
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f9e:	e026      	b.n	8002fee <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d902      	bls.n	8002fbc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	3303      	adds	r3, #3
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68d9      	ldr	r1, [r3, #12]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	6978      	ldr	r0, [r7, #20]
 8002fd2:	f003 ff73 	bl	8006ebc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	441a      	add	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	441a      	add	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	429a      	cmp	r2, r3
 8003002:	d809      	bhi.n	8003018 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800300c:	429a      	cmp	r2, r3
 800300e:	d203      	bcs.n	8003018 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1c3      	bne.n	8002fa0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	d811      	bhi.n	8003048 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	2201      	movs	r2, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	43db      	mvns	r3, r3
 800303e:	6939      	ldr	r1, [r7, #16]
 8003040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003044:	4013      	ands	r3, r2
 8003046:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	333c      	adds	r3, #60	; 0x3c
 800306c:	3304      	adds	r3, #4
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a19      	ldr	r2, [pc, #100]	; (80030ec <PCD_EP_OutXfrComplete_int+0x98>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d124      	bne.n	80030d4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a0:	461a      	mov	r2, r3
 80030a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a6:	6093      	str	r3, [r2, #8]
 80030a8:	e01a      	b.n	80030e0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c0:	461a      	mov	r2, r3
 80030c2:	2320      	movs	r3, #32
 80030c4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7fd ffe3 	bl	8001098 <HAL_PCD_DataOutStageCallback>
 80030d2:	e005      	b.n	80030e0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	4619      	mov	r1, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd ffdc 	bl	8001098 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	4f54310a 	.word	0x4f54310a

080030f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	333c      	adds	r3, #60	; 0x3c
 8003108:	3304      	adds	r3, #4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a0c      	ldr	r2, [pc, #48]	; (8003154 <PCD_EP_OutSetupPacket_int+0x64>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d90e      	bls.n	8003144 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313c:	461a      	mov	r2, r3
 800313e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003142:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7fd ff95 	bl	8001074 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	4f54300a 	.word	0x4f54300a

08003158 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
 8003164:	4613      	mov	r3, r2
 8003166:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d107      	bne.n	8003186 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003176:	883b      	ldrh	r3, [r7, #0]
 8003178:	0419      	lsls	r1, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	430a      	orrs	r2, r1
 8003182:	629a      	str	r2, [r3, #40]	; 0x28
 8003184:	e028      	b.n	80031d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	4413      	add	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003194:	2300      	movs	r3, #0
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	e00d      	b.n	80031b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	3340      	adds	r3, #64	; 0x40
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	4413      	add	r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	3301      	adds	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	429a      	cmp	r2, r3
 80031be:	d3ec      	bcc.n	800319a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031c0:	883b      	ldrh	r3, [r7, #0]
 80031c2:	0418      	lsls	r0, r3, #16
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6819      	ldr	r1, [r3, #0]
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	4302      	orrs	r2, r0
 80031d0:	3340      	adds	r3, #64	; 0x40
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	460b      	mov	r3, r1
 80031f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323a:	f043 0303 	orr.w	r3, r3, #3
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <HAL_PWREx_GetVoltageRange+0x18>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40007000 	.word	0x40007000

0800326c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327a:	d130      	bne.n	80032de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800327c:	4b23      	ldr	r3, [pc, #140]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003288:	d038      	beq.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003292:	4a1e      	ldr	r2, [pc, #120]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003298:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2232      	movs	r2, #50	; 0x32
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	0c9b      	lsrs	r3, r3, #18
 80032ac:	3301      	adds	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b0:	e002      	b.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b8:	4b14      	ldr	r3, [pc, #80]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c4:	d102      	bne.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f2      	bne.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032cc:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d8:	d110      	bne.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e00f      	b.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ea:	d007      	beq.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032ec:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032f4:	4a05      	ldr	r2, [pc, #20]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40007000 	.word	0x40007000
 8003310:	20000074 	.word	0x20000074
 8003314:	431bde83 	.word	0x431bde83

08003318 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_PWREx_EnableVddUSB+0x1c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a04      	ldr	r2, [pc, #16]	; (8003334 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003326:	6053      	str	r3, [r2, #4]
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40007000 	.word	0x40007000

08003338 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_PWREx_EnableVddIO2+0x1c>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003346:	6053      	str	r3, [r2, #4]
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40007000 	.word	0x40007000

08003358 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f000 bc08 	b.w	8003b7c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336c:	4b96      	ldr	r3, [pc, #600]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003376:	4b94      	ldr	r3, [pc, #592]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80e4 	beq.w	8003556 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_RCC_OscConfig+0x4c>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b0c      	cmp	r3, #12
 8003398:	f040 808b 	bne.w	80034b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	f040 8087 	bne.w	80034b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033a4:	4b88      	ldr	r3, [pc, #544]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_OscConfig+0x64>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e3df      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1a      	ldr	r2, [r3, #32]
 80033c0:	4b81      	ldr	r3, [pc, #516]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <HAL_RCC_OscConfig+0x7e>
 80033cc:	4b7e      	ldr	r3, [pc, #504]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d4:	e005      	b.n	80033e2 <HAL_RCC_OscConfig+0x8a>
 80033d6:	4b7c      	ldr	r3, [pc, #496]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80033d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d223      	bcs.n	800342e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fdc4 	bl	8003f78 <RCC_SetFlashLatencyFromMSIRange>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e3c0      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033fa:	4b73      	ldr	r3, [pc, #460]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a72      	ldr	r2, [pc, #456]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003400:	f043 0308 	orr.w	r3, r3, #8
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b70      	ldr	r3, [pc, #448]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	496d      	ldr	r1, [pc, #436]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003418:	4b6b      	ldr	r3, [pc, #428]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	021b      	lsls	r3, r3, #8
 8003426:	4968      	ldr	r1, [pc, #416]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
 800342c:	e025      	b.n	800347a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800342e:	4b66      	ldr	r3, [pc, #408]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a65      	ldr	r2, [pc, #404]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003434:	f043 0308 	orr.w	r3, r3, #8
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4960      	ldr	r1, [pc, #384]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800344c:	4b5e      	ldr	r3, [pc, #376]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	495b      	ldr	r1, [pc, #364]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fd84 	bl	8003f78 <RCC_SetFlashLatencyFromMSIRange>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e380      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800347a:	f000 fc87 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b51      	ldr	r3, [pc, #324]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	4950      	ldr	r1, [pc, #320]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	fa22 f303 	lsr.w	r3, r2, r3
 8003496:	4a4e      	ldr	r2, [pc, #312]	; (80035d0 <HAL_RCC_OscConfig+0x278>)
 8003498:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800349a:	4b4e      	ldr	r3, [pc, #312]	; (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd fa26 	bl	80008f0 <HAL_InitTick>
 80034a4:	4603      	mov	r3, r0
 80034a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d052      	beq.n	8003554 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	e364      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d032      	beq.n	8003520 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034ba:	4b43      	ldr	r3, [pc, #268]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a42      	ldr	r2, [pc, #264]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034c6:	f7fe f9c5 	bl	8001854 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ce:	f7fe f9c1 	bl	8001854 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e34d      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e0:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ec:	4b36      	ldr	r3, [pc, #216]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a35      	ldr	r2, [pc, #212]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034f2:	f043 0308 	orr.w	r3, r3, #8
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4b33      	ldr	r3, [pc, #204]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4930      	ldr	r1, [pc, #192]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003506:	4313      	orrs	r3, r2
 8003508:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350a:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	492b      	ldr	r1, [pc, #172]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
 800351e:	e01a      	b.n	8003556 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003520:	4b29      	ldr	r3, [pc, #164]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a28      	ldr	r2, [pc, #160]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800352c:	f7fe f992 	bl	8001854 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003534:	f7fe f98e 	bl	8001854 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e31a      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003546:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1dc>
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003554:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d073      	beq.n	800364a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b08      	cmp	r3, #8
 8003566:	d005      	beq.n	8003574 <HAL_RCC_OscConfig+0x21c>
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d10e      	bne.n	800358c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d10b      	bne.n	800358c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d063      	beq.n	8003648 <HAL_RCC_OscConfig+0x2f0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d15f      	bne.n	8003648 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e2f7      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003594:	d106      	bne.n	80035a4 <HAL_RCC_OscConfig+0x24c>
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e025      	b.n	80035f0 <HAL_RCC_OscConfig+0x298>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ac:	d114      	bne.n	80035d8 <HAL_RCC_OscConfig+0x280>
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a05      	ldr	r2, [pc, #20]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80035b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a02      	ldr	r2, [pc, #8]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e013      	b.n	80035f0 <HAL_RCC_OscConfig+0x298>
 80035c8:	40021000 	.word	0x40021000
 80035cc:	0800c260 	.word	0x0800c260
 80035d0:	20000074 	.word	0x20000074
 80035d4:	20000078 	.word	0x20000078
 80035d8:	4ba0      	ldr	r3, [pc, #640]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a9f      	ldr	r2, [pc, #636]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b9d      	ldr	r3, [pc, #628]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a9c      	ldr	r2, [pc, #624]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80035ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d013      	beq.n	8003620 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fe f92c 	bl	8001854 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003600:	f7fe f928 	bl	8001854 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e2b4      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003612:	4b92      	ldr	r3, [pc, #584]	; (800385c <HAL_RCC_OscConfig+0x504>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x2a8>
 800361e:	e014      	b.n	800364a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe f918 	bl	8001854 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003628:	f7fe f914 	bl	8001854 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e2a0      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800363a:	4b88      	ldr	r3, [pc, #544]	; (800385c <HAL_RCC_OscConfig+0x504>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x2d0>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d060      	beq.n	8003718 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d005      	beq.n	8003668 <HAL_RCC_OscConfig+0x310>
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d119      	bne.n	8003696 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d116      	bne.n	8003696 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003668:	4b7c      	ldr	r3, [pc, #496]	; (800385c <HAL_RCC_OscConfig+0x504>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_OscConfig+0x328>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e27d      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b76      	ldr	r3, [pc, #472]	; (800385c <HAL_RCC_OscConfig+0x504>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	061b      	lsls	r3, r3, #24
 800368e:	4973      	ldr	r1, [pc, #460]	; (800385c <HAL_RCC_OscConfig+0x504>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003694:	e040      	b.n	8003718 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d023      	beq.n	80036e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369e:	4b6f      	ldr	r3, [pc, #444]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6e      	ldr	r2, [pc, #440]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7fe f8d3 	bl	8001854 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fe f8cf 	bl	8001854 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e25b      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c4:	4b65      	ldr	r3, [pc, #404]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d0:	4b62      	ldr	r3, [pc, #392]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	495f      	ldr	r1, [pc, #380]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
 80036e4:	e018      	b.n	8003718 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e6:	4b5d      	ldr	r3, [pc, #372]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a5c      	ldr	r2, [pc, #368]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80036ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fe f8af 	bl	8001854 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fe f8ab 	bl	8001854 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e237      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800370c:	4b53      	ldr	r3, [pc, #332]	; (800385c <HAL_RCC_OscConfig+0x504>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d03c      	beq.n	800379e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01c      	beq.n	8003766 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800372c:	4b4b      	ldr	r3, [pc, #300]	; (800385c <HAL_RCC_OscConfig+0x504>)
 800372e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003732:	4a4a      	ldr	r2, [pc, #296]	; (800385c <HAL_RCC_OscConfig+0x504>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fe f88a 	bl	8001854 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003744:	f7fe f886 	bl	8001854 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e212      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003756:	4b41      	ldr	r3, [pc, #260]	; (800385c <HAL_RCC_OscConfig+0x504>)
 8003758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0ef      	beq.n	8003744 <HAL_RCC_OscConfig+0x3ec>
 8003764:	e01b      	b.n	800379e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003766:	4b3d      	ldr	r3, [pc, #244]	; (800385c <HAL_RCC_OscConfig+0x504>)
 8003768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376c:	4a3b      	ldr	r2, [pc, #236]	; (800385c <HAL_RCC_OscConfig+0x504>)
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003776:	f7fe f86d 	bl	8001854 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377e:	f7fe f869 	bl	8001854 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e1f5      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003790:	4b32      	ldr	r3, [pc, #200]	; (800385c <HAL_RCC_OscConfig+0x504>)
 8003792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1ef      	bne.n	800377e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80a6 	beq.w	80038f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ac:	2300      	movs	r3, #0
 80037ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037b0:	4b2a      	ldr	r3, [pc, #168]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10d      	bne.n	80037d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b27      	ldr	r3, [pc, #156]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	4a26      	ldr	r2, [pc, #152]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c6:	6593      	str	r3, [r2, #88]	; 0x58
 80037c8:	4b24      	ldr	r3, [pc, #144]	; (800385c <HAL_RCC_OscConfig+0x504>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d4:	2301      	movs	r3, #1
 80037d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d8:	4b21      	ldr	r3, [pc, #132]	; (8003860 <HAL_RCC_OscConfig+0x508>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d118      	bne.n	8003816 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e4:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <HAL_RCC_OscConfig+0x508>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <HAL_RCC_OscConfig+0x508>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f0:	f7fe f830 	bl	8001854 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f8:	f7fe f82c 	bl	8001854 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e1b8      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <HAL_RCC_OscConfig+0x508>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d108      	bne.n	8003830 <HAL_RCC_OscConfig+0x4d8>
 800381e:	4b0f      	ldr	r3, [pc, #60]	; (800385c <HAL_RCC_OscConfig+0x504>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	4a0d      	ldr	r2, [pc, #52]	; (800385c <HAL_RCC_OscConfig+0x504>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800382e:	e029      	b.n	8003884 <HAL_RCC_OscConfig+0x52c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b05      	cmp	r3, #5
 8003836:	d115      	bne.n	8003864 <HAL_RCC_OscConfig+0x50c>
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <HAL_RCC_OscConfig+0x504>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	4a07      	ldr	r2, [pc, #28]	; (800385c <HAL_RCC_OscConfig+0x504>)
 8003840:	f043 0304 	orr.w	r3, r3, #4
 8003844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <HAL_RCC_OscConfig+0x504>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	4a03      	ldr	r2, [pc, #12]	; (800385c <HAL_RCC_OscConfig+0x504>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003858:	e014      	b.n	8003884 <HAL_RCC_OscConfig+0x52c>
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	40007000 	.word	0x40007000
 8003864:	4b9d      	ldr	r3, [pc, #628]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	4a9c      	ldr	r2, [pc, #624]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003874:	4b99      	ldr	r3, [pc, #612]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	4a98      	ldr	r2, [pc, #608]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 800387c:	f023 0304 	bic.w	r3, r3, #4
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d016      	beq.n	80038ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388c:	f7fd ffe2 	bl	8001854 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003892:	e00a      	b.n	80038aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003894:	f7fd ffde 	bl	8001854 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e168      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038aa:	4b8c      	ldr	r3, [pc, #560]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ed      	beq.n	8003894 <HAL_RCC_OscConfig+0x53c>
 80038b8:	e015      	b.n	80038e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ba:	f7fd ffcb 	bl	8001854 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7fd ffc7 	bl	8001854 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e151      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038d8:	4b80      	ldr	r3, [pc, #512]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1ed      	bne.n	80038c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e6:	7ffb      	ldrb	r3, [r7, #31]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d105      	bne.n	80038f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ec:	4b7b      	ldr	r3, [pc, #492]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	4a7a      	ldr	r2, [pc, #488]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 80038f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d03c      	beq.n	800397e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01c      	beq.n	8003946 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800390c:	4b73      	ldr	r3, [pc, #460]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 800390e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003912:	4a72      	ldr	r2, [pc, #456]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391c:	f7fd ff9a 	bl	8001854 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003924:	f7fd ff96 	bl	8001854 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e122      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003936:	4b69      	ldr	r3, [pc, #420]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003938:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ef      	beq.n	8003924 <HAL_RCC_OscConfig+0x5cc>
 8003944:	e01b      	b.n	800397e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003946:	4b65      	ldr	r3, [pc, #404]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003948:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800394c:	4a63      	ldr	r2, [pc, #396]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7fd ff7d 	bl	8001854 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800395e:	f7fd ff79 	bl	8001854 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e105      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003970:	4b5a      	ldr	r3, [pc, #360]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1ef      	bne.n	800395e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80f9 	beq.w	8003b7a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	2b02      	cmp	r3, #2
 800398e:	f040 80cf 	bne.w	8003b30 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003992:	4b52      	ldr	r3, [pc, #328]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f003 0203 	and.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d12c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	3b01      	subs	r3, #1
 80039b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d123      	bne.n	8003a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d11b      	bne.n	8003a00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d113      	bne.n	8003a00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	3b01      	subs	r3, #1
 80039e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d109      	bne.n	8003a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	3b01      	subs	r3, #1
 80039fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d071      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b0c      	cmp	r3, #12
 8003a04:	d068      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a06:	4b35      	ldr	r3, [pc, #212]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d105      	bne.n	8003a1e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a12:	4b32      	ldr	r3, [pc, #200]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e0ac      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a22:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2d      	ldr	r2, [pc, #180]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a2e:	f7fd ff11 	bl	8001854 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a36:	f7fd ff0d 	bl	8001854 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e099      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a48:	4b24      	ldr	r3, [pc, #144]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f0      	bne.n	8003a36 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a54:	4b21      	ldr	r3, [pc, #132]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	4b21      	ldr	r3, [pc, #132]	; (8003ae0 <HAL_RCC_OscConfig+0x788>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a64:	3a01      	subs	r2, #1
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	4311      	orrs	r1, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a6e:	0212      	lsls	r2, r2, #8
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a76:	0852      	lsrs	r2, r2, #1
 8003a78:	3a01      	subs	r2, #1
 8003a7a:	0552      	lsls	r2, r2, #21
 8003a7c:	4311      	orrs	r1, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a82:	0852      	lsrs	r2, r2, #1
 8003a84:	3a01      	subs	r2, #1
 8003a86:	0652      	lsls	r2, r2, #25
 8003a88:	4311      	orrs	r1, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a8e:	06d2      	lsls	r2, r2, #27
 8003a90:	430a      	orrs	r2, r1
 8003a92:	4912      	ldr	r1, [pc, #72]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a0f      	ldr	r2, [pc, #60]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4a0c      	ldr	r2, [pc, #48]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ab0:	f7fd fed0 	bl	8001854 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab8:	f7fd fecc 	bl	8001854 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e058      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aca:	4b04      	ldr	r3, [pc, #16]	; (8003adc <HAL_RCC_OscConfig+0x784>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ad6:	e050      	b.n	8003b7a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e04f      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae4:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d144      	bne.n	8003b7a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003af0:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a23      	ldr	r2, [pc, #140]	; (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003afa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003afc:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a20      	ldr	r2, [pc, #128]	; (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b08:	f7fd fea4 	bl	8001854 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fd fea0 	bl	8001854 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e02c      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b22:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x7b8>
 8003b2e:	e024      	b.n	8003b7a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	d01f      	beq.n	8003b76 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b36:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fd fe87 	bl	8001854 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4a:	f7fd fe83 	bl	8001854 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e00f      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f0      	bne.n	8003b4a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	4905      	ldr	r1, [pc, #20]	; (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCC_OscConfig+0x830>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	60cb      	str	r3, [r1, #12]
 8003b74:	e001      	b.n	8003b7a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	feeefffc 	.word	0xfeeefffc

08003b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0e7      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba0:	4b75      	ldr	r3, [pc, #468]	; (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d910      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bae:	4b72      	ldr	r3, [pc, #456]	; (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 0207 	bic.w	r2, r3, #7
 8003bb6:	4970      	ldr	r1, [pc, #448]	; (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b6e      	ldr	r3, [pc, #440]	; (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0cf      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d010      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	4b66      	ldr	r3, [pc, #408]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d908      	bls.n	8003bfe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bec:	4b63      	ldr	r3, [pc, #396]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4960      	ldr	r1, [pc, #384]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d04c      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c12:	4b5a      	ldr	r3, [pc, #360]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d121      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e0a6      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c2a:	4b54      	ldr	r3, [pc, #336]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d115      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e09a      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c42:	4b4e      	ldr	r3, [pc, #312]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e08e      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c52:	4b4a      	ldr	r3, [pc, #296]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e086      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c62:	4b46      	ldr	r3, [pc, #280]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 0203 	bic.w	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4943      	ldr	r1, [pc, #268]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c74:	f7fd fdee 	bl	8001854 <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7c:	f7fd fdea 	bl	8001854 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e06e      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	4b3a      	ldr	r3, [pc, #232]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 020c 	and.w	r2, r3, #12
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d1eb      	bne.n	8003c7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d010      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d208      	bcs.n	8003cd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc0:	4b2e      	ldr	r3, [pc, #184]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	492b      	ldr	r1, [pc, #172]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd2:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d210      	bcs.n	8003d02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce0:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f023 0207 	bic.w	r2, r3, #7
 8003ce8:	4923      	ldr	r1, [pc, #140]	; (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf0:	4b21      	ldr	r3, [pc, #132]	; (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e036      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	4918      	ldr	r1, [pc, #96]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d009      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d2c:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4910      	ldr	r1, [pc, #64]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d40:	f000 f824 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	490b      	ldr	r1, [pc, #44]	; (8003d80 <HAL_RCC_ClockConfig+0x1f4>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <HAL_RCC_ClockConfig+0x1f8>)
 8003d5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_ClockConfig+0x1fc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fc fdc3 	bl	80008f0 <HAL_InitTick>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d6e:	7afb      	ldrb	r3, [r7, #11]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	0800c260 	.word	0x0800c260
 8003d84:	20000074 	.word	0x20000074
 8003d88:	20000078 	.word	0x20000078

08003d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	; 0x24
 8003d90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003da4:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b0c      	cmp	r3, #12
 8003db8:	d121      	bne.n	8003dfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d11e      	bne.n	8003dfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dc0:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dcc:	4b31      	ldr	r3, [pc, #196]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	e005      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ddc:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003de8:	4a2b      	ldr	r2, [pc, #172]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10d      	bne.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d102      	bne.n	8003e0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e04:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	e004      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e10:	4b23      	ldr	r3, [pc, #140]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b0c      	cmp	r3, #12
 8003e18:	d134      	bne.n	8003e84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e1a:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d003      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0xac>
 8003e30:	e005      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e32:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e34:	617b      	str	r3, [r7, #20]
      break;
 8003e36:	e005      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e38:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e3a:	617b      	str	r3, [r7, #20]
      break;
 8003e3c:	e002      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	617b      	str	r3, [r7, #20]
      break;
 8003e42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e44:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	3301      	adds	r3, #1
 8003e50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	fb03 f202 	mul.w	r2, r3, r2
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	0e5b      	lsrs	r3, r3, #25
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	3301      	adds	r3, #1
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e84:	69bb      	ldr	r3, [r7, #24]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3724      	adds	r7, #36	; 0x24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
 8003e98:	0800c278 	.word	0x0800c278
 8003e9c:	00f42400 	.word	0x00f42400
 8003ea0:	007a1200 	.word	0x007a1200

08003ea4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000074 	.word	0x20000074

08003ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ec0:	f7ff fff0 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4904      	ldr	r1, [pc, #16]	; (8003ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	0800c270 	.word	0x0800c270

08003ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003eec:	f7ff ffda 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0adb      	lsrs	r3, r3, #11
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4904      	ldr	r1, [pc, #16]	; (8003f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	0800c270 	.word	0x0800c270

08003f14 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	220f      	movs	r2, #15
 8003f22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003f24:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_RCC_GetClockConfig+0x5c>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0203 	and.w	r2, r3, #3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <HAL_RCC_GetClockConfig+0x5c>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <HAL_RCC_GetClockConfig+0x5c>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <HAL_RCC_GetClockConfig+0x5c>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	08db      	lsrs	r3, r3, #3
 8003f4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <HAL_RCC_GetClockConfig+0x60>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0207 	and.w	r2, r3, #7
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	601a      	str	r2, [r3, #0]
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40022000 	.word	0x40022000

08003f78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f84:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f90:	f7ff f95e 	bl	8003250 <HAL_PWREx_GetVoltageRange>
 8003f94:	6178      	str	r0, [r7, #20]
 8003f96:	e014      	b.n	8003fc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f98:	4b25      	ldr	r3, [pc, #148]	; (8004030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	4a24      	ldr	r2, [pc, #144]	; (8004030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8003fa4:	4b22      	ldr	r3, [pc, #136]	; (8004030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fb0:	f7ff f94e 	bl	8003250 <HAL_PWREx_GetVoltageRange>
 8003fb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fb6:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	4a1d      	ldr	r2, [pc, #116]	; (8004030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc8:	d10b      	bne.n	8003fe2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d919      	bls.n	8004004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2ba0      	cmp	r3, #160	; 0xa0
 8003fd4:	d902      	bls.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	613b      	str	r3, [r7, #16]
 8003fda:	e013      	b.n	8004004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fdc:	2301      	movs	r3, #1
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	e010      	b.n	8004004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b80      	cmp	r3, #128	; 0x80
 8003fe6:	d902      	bls.n	8003fee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fe8:	2303      	movs	r3, #3
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	e00a      	b.n	8004004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b80      	cmp	r3, #128	; 0x80
 8003ff2:	d102      	bne.n	8003ffa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	e004      	b.n	8004004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b70      	cmp	r3, #112	; 0x70
 8003ffe:	d101      	bne.n	8004004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004000:	2301      	movs	r3, #1
 8004002:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f023 0207 	bic.w	r2, r3, #7
 800400c:	4909      	ldr	r1, [pc, #36]	; (8004034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004014:	4b07      	ldr	r3, [pc, #28]	; (8004034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	429a      	cmp	r2, r3
 8004020:	d001      	beq.n	8004026 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	40022000 	.word	0x40022000

08004038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004040:	2300      	movs	r3, #0
 8004042:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004044:	2300      	movs	r3, #0
 8004046:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004050:	2b00      	cmp	r3, #0
 8004052:	d041      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004058:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800405c:	d02a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800405e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004062:	d824      	bhi.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004064:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004068:	d008      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800406a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800406e:	d81e      	bhi.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004078:	d010      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800407a:	e018      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800407c:	4b86      	ldr	r3, [pc, #536]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a85      	ldr	r2, [pc, #532]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004086:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004088:	e015      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3304      	adds	r3, #4
 800408e:	2100      	movs	r1, #0
 8004090:	4618      	mov	r0, r3
 8004092:	f000 facd 	bl	8004630 <RCCEx_PLLSAI1_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800409a:	e00c      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3320      	adds	r3, #32
 80040a0:	2100      	movs	r1, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fbb6 	bl	8004814 <RCCEx_PLLSAI2_Config>
 80040a8:	4603      	mov	r3, r0
 80040aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040ac:	e003      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	74fb      	strb	r3, [r7, #19]
      break;
 80040b2:	e000      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040b6:	7cfb      	ldrb	r3, [r7, #19]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10b      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040bc:	4b76      	ldr	r3, [pc, #472]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ca:	4973      	ldr	r1, [pc, #460]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040d2:	e001      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d041      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040ec:	d02a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80040ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040f2:	d824      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040f8:	d008      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040fe:	d81e      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004108:	d010      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800410a:	e018      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800410c:	4b62      	ldr	r3, [pc, #392]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4a61      	ldr	r2, [pc, #388]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004116:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004118:	e015      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3304      	adds	r3, #4
 800411e:	2100      	movs	r1, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fa85 	bl	8004630 <RCCEx_PLLSAI1_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800412a:	e00c      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3320      	adds	r3, #32
 8004130:	2100      	movs	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fb6e 	bl	8004814 <RCCEx_PLLSAI2_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800413c:	e003      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	74fb      	strb	r3, [r7, #19]
      break;
 8004142:	e000      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004146:	7cfb      	ldrb	r3, [r7, #19]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800414c:	4b52      	ldr	r3, [pc, #328]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415a:	494f      	ldr	r1, [pc, #316]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004162:	e001      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80a0 	beq.w	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004176:	2300      	movs	r3, #0
 8004178:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800417a:	4b47      	ldr	r3, [pc, #284]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00d      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004190:	4b41      	ldr	r3, [pc, #260]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	4a40      	ldr	r2, [pc, #256]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419a:	6593      	str	r3, [r2, #88]	; 0x58
 800419c:	4b3e      	ldr	r3, [pc, #248]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a8:	2301      	movs	r3, #1
 80041aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ac:	4b3b      	ldr	r3, [pc, #236]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a3a      	ldr	r2, [pc, #232]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041b8:	f7fd fb4c 	bl	8001854 <HAL_GetTick>
 80041bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041be:	e009      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c0:	f7fd fb48 	bl	8001854 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d902      	bls.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	74fb      	strb	r3, [r7, #19]
        break;
 80041d2:	e005      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041d4:	4b31      	ldr	r3, [pc, #196]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0ef      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d15c      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041e6:	4b2c      	ldr	r3, [pc, #176]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01f      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	429a      	cmp	r2, r3
 8004202:	d019      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004204:	4b24      	ldr	r3, [pc, #144]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004210:	4b21      	ldr	r3, [pc, #132]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	4a20      	ldr	r2, [pc, #128]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004220:	4b1d      	ldr	r3, [pc, #116]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004226:	4a1c      	ldr	r2, [pc, #112]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004230:	4a19      	ldr	r2, [pc, #100]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004242:	f7fd fb07 	bl	8001854 <HAL_GetTick>
 8004246:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004248:	e00b      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424a:	f7fd fb03 	bl	8001854 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	; 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d902      	bls.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	74fb      	strb	r3, [r7, #19]
            break;
 8004260:	e006      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004262:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0ec      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004270:	7cfb      	ldrb	r3, [r7, #19]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10c      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	4904      	ldr	r1, [pc, #16]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800428e:	e009      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004290:	7cfb      	ldrb	r3, [r7, #19]
 8004292:	74bb      	strb	r3, [r7, #18]
 8004294:	e006      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042a4:	7c7b      	ldrb	r3, [r7, #17]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d105      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042aa:	4ba6      	ldr	r3, [pc, #664]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	4aa5      	ldr	r2, [pc, #660]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042c2:	4ba0      	ldr	r3, [pc, #640]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c8:	f023 0203 	bic.w	r2, r3, #3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	499c      	ldr	r1, [pc, #624]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042e4:	4b97      	ldr	r3, [pc, #604]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ea:	f023 020c 	bic.w	r2, r3, #12
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	4994      	ldr	r1, [pc, #592]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004306:	4b8f      	ldr	r3, [pc, #572]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	498b      	ldr	r1, [pc, #556]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004328:	4b86      	ldr	r3, [pc, #536]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004336:	4983      	ldr	r1, [pc, #524]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800434a:	4b7e      	ldr	r3, [pc, #504]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004358:	497a      	ldr	r1, [pc, #488]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800436c:	4b75      	ldr	r3, [pc, #468]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437a:	4972      	ldr	r1, [pc, #456]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800438e:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439c:	4969      	ldr	r1, [pc, #420]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043b0:	4b64      	ldr	r3, [pc, #400]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043be:	4961      	ldr	r1, [pc, #388]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043d2:	4b5c      	ldr	r3, [pc, #368]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e0:	4958      	ldr	r1, [pc, #352]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043f4:	4b53      	ldr	r3, [pc, #332]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	4950      	ldr	r1, [pc, #320]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004416:	4b4b      	ldr	r3, [pc, #300]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004424:	4947      	ldr	r1, [pc, #284]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004438:	4b42      	ldr	r3, [pc, #264]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800443a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800443e:	f023 0203 	bic.w	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004446:	493f      	ldr	r1, [pc, #252]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d028      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800445a:	4b3a      	ldr	r3, [pc, #232]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004460:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	4936      	ldr	r1, [pc, #216]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004478:	d106      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800447a:	4b32      	ldr	r3, [pc, #200]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	4a31      	ldr	r2, [pc, #196]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004484:	60d3      	str	r3, [r2, #12]
 8004486:	e011      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004490:	d10c      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	2101      	movs	r1, #1
 8004498:	4618      	mov	r0, r3
 800449a:	f000 f8c9 	bl	8004630 <RCCEx_PLLSAI1_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044a2:	7cfb      	ldrb	r3, [r7, #19]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80044a8:	7cfb      	ldrb	r3, [r7, #19]
 80044aa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d028      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044b8:	4b22      	ldr	r3, [pc, #136]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c6:	491f      	ldr	r1, [pc, #124]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d6:	d106      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4a19      	ldr	r2, [pc, #100]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044e2:	60d3      	str	r3, [r2, #12]
 80044e4:	e011      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044ee:	d10c      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	2101      	movs	r1, #1
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f89a 	bl	8004630 <RCCEx_PLLSAI1_Config>
 80044fc:	4603      	mov	r3, r0
 80044fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004506:	7cfb      	ldrb	r3, [r7, #19]
 8004508:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d02a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004524:	4907      	ldr	r1, [pc, #28]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004534:	d108      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004536:	4b03      	ldr	r3, [pc, #12]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	4a02      	ldr	r2, [pc, #8]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800453c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004540:	60d3      	str	r3, [r2, #12]
 8004542:	e013      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004544:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800454c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004550:	d10c      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3304      	adds	r3, #4
 8004556:	2101      	movs	r1, #1
 8004558:	4618      	mov	r0, r3
 800455a:	f000 f869 	bl	8004630 <RCCEx_PLLSAI1_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004562:	7cfb      	ldrb	r3, [r7, #19]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004568:	7cfb      	ldrb	r3, [r7, #19]
 800456a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d02f      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004578:	4b2c      	ldr	r3, [pc, #176]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004586:	4929      	ldr	r1, [pc, #164]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004596:	d10d      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	2102      	movs	r1, #2
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f846 	bl	8004630 <RCCEx_PLLSAI1_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d014      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
 80045b0:	74bb      	strb	r3, [r7, #18]
 80045b2:	e011      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3320      	adds	r3, #32
 80045c2:	2102      	movs	r1, #2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f925 	bl	8004814 <RCCEx_PLLSAI2_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ce:	7cfb      	ldrb	r3, [r7, #19]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80045d4:	7cfb      	ldrb	r3, [r7, #19]
 80045d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045f4:	490d      	ldr	r1, [pc, #52]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004608:	4b08      	ldr	r3, [pc, #32]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004618:	4904      	ldr	r1, [pc, #16]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004620:	7cbb      	ldrb	r3, [r7, #18]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000

08004630 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800463e:	4b74      	ldr	r3, [pc, #464]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d018      	beq.n	800467c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800464a:	4b71      	ldr	r3, [pc, #452]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f003 0203 	and.w	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d10d      	bne.n	8004676 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
       ||
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004662:	4b6b      	ldr	r3, [pc, #428]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
       ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d047      	beq.n	8004706 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
 800467a:	e044      	b.n	8004706 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d018      	beq.n	80046b6 <RCCEx_PLLSAI1_Config+0x86>
 8004684:	2b03      	cmp	r3, #3
 8004686:	d825      	bhi.n	80046d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004688:	2b01      	cmp	r3, #1
 800468a:	d002      	beq.n	8004692 <RCCEx_PLLSAI1_Config+0x62>
 800468c:	2b02      	cmp	r3, #2
 800468e:	d009      	beq.n	80046a4 <RCCEx_PLLSAI1_Config+0x74>
 8004690:	e020      	b.n	80046d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004692:	4b5f      	ldr	r3, [pc, #380]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d11d      	bne.n	80046da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a2:	e01a      	b.n	80046da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046a4:	4b5a      	ldr	r3, [pc, #360]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d116      	bne.n	80046de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b4:	e013      	b.n	80046de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046b6:	4b56      	ldr	r3, [pc, #344]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10f      	bne.n	80046e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046c2:	4b53      	ldr	r3, [pc, #332]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046d2:	e006      	b.n	80046e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
      break;
 80046d8:	e004      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046da:	bf00      	nop
 80046dc:	e002      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046de:	bf00      	nop
 80046e0:	e000      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10d      	bne.n	8004706 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ea:	4b49      	ldr	r3, [pc, #292]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6819      	ldr	r1, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	430b      	orrs	r3, r1
 8004700:	4943      	ldr	r1, [pc, #268]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004702:	4313      	orrs	r3, r2
 8004704:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d17c      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800470c:	4b40      	ldr	r3, [pc, #256]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a3f      	ldr	r2, [pc, #252]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004712:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004718:	f7fd f89c 	bl	8001854 <HAL_GetTick>
 800471c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800471e:	e009      	b.n	8004734 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004720:	f7fd f898 	bl	8001854 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d902      	bls.n	8004734 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	73fb      	strb	r3, [r7, #15]
        break;
 8004732:	e005      	b.n	8004740 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004734:	4b36      	ldr	r3, [pc, #216]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1ef      	bne.n	8004720 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d15f      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d110      	bne.n	800476e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800474c:	4b30      	ldr	r3, [pc, #192]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004754:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6892      	ldr	r2, [r2, #8]
 800475c:	0211      	lsls	r1, r2, #8
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68d2      	ldr	r2, [r2, #12]
 8004762:	06d2      	lsls	r2, r2, #27
 8004764:	430a      	orrs	r2, r1
 8004766:	492a      	ldr	r1, [pc, #168]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004768:	4313      	orrs	r3, r2
 800476a:	610b      	str	r3, [r1, #16]
 800476c:	e027      	b.n	80047be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d112      	bne.n	800479a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004774:	4b26      	ldr	r3, [pc, #152]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800477c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6892      	ldr	r2, [r2, #8]
 8004784:	0211      	lsls	r1, r2, #8
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6912      	ldr	r2, [r2, #16]
 800478a:	0852      	lsrs	r2, r2, #1
 800478c:	3a01      	subs	r2, #1
 800478e:	0552      	lsls	r2, r2, #21
 8004790:	430a      	orrs	r2, r1
 8004792:	491f      	ldr	r1, [pc, #124]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004794:	4313      	orrs	r3, r2
 8004796:	610b      	str	r3, [r1, #16]
 8004798:	e011      	b.n	80047be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800479a:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6892      	ldr	r2, [r2, #8]
 80047aa:	0211      	lsls	r1, r2, #8
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6952      	ldr	r2, [r2, #20]
 80047b0:	0852      	lsrs	r2, r2, #1
 80047b2:	3a01      	subs	r2, #1
 80047b4:	0652      	lsls	r2, r2, #25
 80047b6:	430a      	orrs	r2, r1
 80047b8:	4915      	ldr	r1, [pc, #84]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047be:	4b14      	ldr	r3, [pc, #80]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a13      	ldr	r2, [pc, #76]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ca:	f7fd f843 	bl	8001854 <HAL_GetTick>
 80047ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047d0:	e009      	b.n	80047e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047d2:	f7fd f83f 	bl	8001854 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d902      	bls.n	80047e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	73fb      	strb	r3, [r7, #15]
          break;
 80047e4:	e005      	b.n	80047f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047e6:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ef      	beq.n	80047d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d106      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004802:	4313      	orrs	r3, r2
 8004804:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000

08004814 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004822:	4b69      	ldr	r3, [pc, #420]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d018      	beq.n	8004860 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800482e:	4b66      	ldr	r3, [pc, #408]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0203 	and.w	r2, r3, #3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d10d      	bne.n	800485a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
       ||
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004846:	4b60      	ldr	r3, [pc, #384]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
       ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d047      	beq.n	80048ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
 800485e:	e044      	b.n	80048ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d018      	beq.n	800489a <RCCEx_PLLSAI2_Config+0x86>
 8004868:	2b03      	cmp	r3, #3
 800486a:	d825      	bhi.n	80048b8 <RCCEx_PLLSAI2_Config+0xa4>
 800486c:	2b01      	cmp	r3, #1
 800486e:	d002      	beq.n	8004876 <RCCEx_PLLSAI2_Config+0x62>
 8004870:	2b02      	cmp	r3, #2
 8004872:	d009      	beq.n	8004888 <RCCEx_PLLSAI2_Config+0x74>
 8004874:	e020      	b.n	80048b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004876:	4b54      	ldr	r3, [pc, #336]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d11d      	bne.n	80048be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004886:	e01a      	b.n	80048be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004888:	4b4f      	ldr	r3, [pc, #316]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004890:	2b00      	cmp	r3, #0
 8004892:	d116      	bne.n	80048c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004898:	e013      	b.n	80048c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800489a:	4b4b      	ldr	r3, [pc, #300]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048a6:	4b48      	ldr	r3, [pc, #288]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048b6:	e006      	b.n	80048c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
      break;
 80048bc:	e004      	b.n	80048c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048be:	bf00      	nop
 80048c0:	e002      	b.n	80048c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048c2:	bf00      	nop
 80048c4:	e000      	b.n	80048c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10d      	bne.n	80048ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048ce:	4b3e      	ldr	r3, [pc, #248]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6819      	ldr	r1, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	3b01      	subs	r3, #1
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	430b      	orrs	r3, r1
 80048e4:	4938      	ldr	r1, [pc, #224]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d166      	bne.n	80049be <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048f0:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a34      	ldr	r2, [pc, #208]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048fc:	f7fc ffaa 	bl	8001854 <HAL_GetTick>
 8004900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004902:	e009      	b.n	8004918 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004904:	f7fc ffa6 	bl	8001854 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d902      	bls.n	8004918 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	73fb      	strb	r3, [r7, #15]
        break;
 8004916:	e005      	b.n	8004924 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004918:	4b2b      	ldr	r3, [pc, #172]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1ef      	bne.n	8004904 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d149      	bne.n	80049be <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d110      	bne.n	8004952 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004930:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004938:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6892      	ldr	r2, [r2, #8]
 8004940:	0211      	lsls	r1, r2, #8
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68d2      	ldr	r2, [r2, #12]
 8004946:	06d2      	lsls	r2, r2, #27
 8004948:	430a      	orrs	r2, r1
 800494a:	491f      	ldr	r1, [pc, #124]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800494c:	4313      	orrs	r3, r2
 800494e:	614b      	str	r3, [r1, #20]
 8004950:	e011      	b.n	8004976 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004952:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800495a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6892      	ldr	r2, [r2, #8]
 8004962:	0211      	lsls	r1, r2, #8
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6912      	ldr	r2, [r2, #16]
 8004968:	0852      	lsrs	r2, r2, #1
 800496a:	3a01      	subs	r2, #1
 800496c:	0652      	lsls	r2, r2, #25
 800496e:	430a      	orrs	r2, r1
 8004970:	4915      	ldr	r1, [pc, #84]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004972:	4313      	orrs	r3, r2
 8004974:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004976:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a13      	ldr	r2, [pc, #76]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800497c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004980:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004982:	f7fc ff67 	bl	8001854 <HAL_GetTick>
 8004986:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004988:	e009      	b.n	800499e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800498a:	f7fc ff63 	bl	8001854 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d902      	bls.n	800499e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	73fb      	strb	r3, [r7, #15]
          break;
 800499c:	e005      	b.n	80049aa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0ef      	beq.n	800498a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d106      	bne.n	80049be <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	4903      	ldr	r1, [pc, #12]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049be:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40021000 	.word	0x40021000

080049cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e049      	b.n	8004a72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f841 	bl	8004a7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f000 f9da 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d001      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e04f      	b.n	8004b48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01d      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0x76>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad2:	d018      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0x76>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1f      	ldr	r2, [pc, #124]	; (8004b58 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0x76>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00e      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0x76>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d009      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0x76>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1b      	ldr	r2, [pc, #108]	; (8004b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d004      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0x76>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a19      	ldr	r2, [pc, #100]	; (8004b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d115      	bne.n	8004b32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b06      	cmp	r3, #6
 8004b16:	d015      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0xb4>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1e:	d011      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b30:	e008      	b.n	8004b44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e000      	b.n	8004b46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40000c00 	.word	0x40000c00
 8004b64:	40013400 	.word	0x40013400
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	00010007 	.word	0x00010007

08004b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d020      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01b      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0202 	mvn.w	r2, #2
 8004ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f8e4 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 8004bc0:	e005      	b.n	8004bce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f8d6 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f8e7 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d020      	beq.n	8004c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01b      	beq.n	8004c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0204 	mvn.w	r2, #4
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f8be 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f8b0 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f8c1 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d020      	beq.n	8004c6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01b      	beq.n	8004c6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0208 	mvn.w	r2, #8
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2204      	movs	r2, #4
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f898 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f88a 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f89b 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d020      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01b      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0210 	mvn.w	r2, #16
 8004c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f872 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f864 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f875 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0201 	mvn.w	r2, #1
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fb fd62 	bl	80007a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f906 	bl	8004f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f8fe 	bl	8004f20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00c      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f834 	bl	8004db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00c      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0220 	mvn.w	r2, #32
 8004d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f8c6 	bl	8004ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a40      	ldr	r2, [pc, #256]	; (8004ed8 <TIM_Base_SetConfig+0x114>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d013      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de2:	d00f      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3d      	ldr	r2, [pc, #244]	; (8004edc <TIM_Base_SetConfig+0x118>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00b      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a3c      	ldr	r2, [pc, #240]	; (8004ee0 <TIM_Base_SetConfig+0x11c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a3b      	ldr	r2, [pc, #236]	; (8004ee4 <TIM_Base_SetConfig+0x120>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a3a      	ldr	r2, [pc, #232]	; (8004ee8 <TIM_Base_SetConfig+0x124>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d108      	bne.n	8004e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2f      	ldr	r2, [pc, #188]	; (8004ed8 <TIM_Base_SetConfig+0x114>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01f      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e24:	d01b      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2c      	ldr	r2, [pc, #176]	; (8004edc <TIM_Base_SetConfig+0x118>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d017      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2b      	ldr	r2, [pc, #172]	; (8004ee0 <TIM_Base_SetConfig+0x11c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2a      	ldr	r2, [pc, #168]	; (8004ee4 <TIM_Base_SetConfig+0x120>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00f      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a29      	ldr	r2, [pc, #164]	; (8004ee8 <TIM_Base_SetConfig+0x124>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a28      	ldr	r2, [pc, #160]	; (8004eec <TIM_Base_SetConfig+0x128>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a27      	ldr	r2, [pc, #156]	; (8004ef0 <TIM_Base_SetConfig+0x12c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_Base_SetConfig+0x9a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a26      	ldr	r2, [pc, #152]	; (8004ef4 <TIM_Base_SetConfig+0x130>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <TIM_Base_SetConfig+0x114>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00f      	beq.n	8004ebc <TIM_Base_SetConfig+0xf8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a12      	ldr	r2, [pc, #72]	; (8004ee8 <TIM_Base_SetConfig+0x124>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <TIM_Base_SetConfig+0xf8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a11      	ldr	r2, [pc, #68]	; (8004eec <TIM_Base_SetConfig+0x128>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d007      	beq.n	8004ebc <TIM_Base_SetConfig+0xf8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a10      	ldr	r2, [pc, #64]	; (8004ef0 <TIM_Base_SetConfig+0x12c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_Base_SetConfig+0xf8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a0f      	ldr	r2, [pc, #60]	; (8004ef4 <TIM_Base_SetConfig+0x130>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d103      	bne.n	8004ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	615a      	str	r2, [r3, #20]
}
 8004eca:	bf00      	nop
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40013400 	.word	0x40013400
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800

08004ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e040      	b.n	8004fc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fb fc62 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2224      	movs	r2, #36	; 0x24
 8004f60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fdea 	bl	8005b54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fb2f 	bl	80055e4 <UART_SetConfig>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e01b      	b.n	8004fc8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fe69 	bl	8005c98 <UART_CheckIdleState>
 8004fc6:	4603      	mov	r3, r0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b0ba      	sub	sp, #232	; 0xe8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ff6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004ffa:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ffe:	4013      	ands	r3, r2
 8005000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005004:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d115      	bne.n	8005038 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800500c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00f      	beq.n	8005038 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 82ae 	beq.w	800558a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	4798      	blx	r3
      }
      return;
 8005036:	e2a8      	b.n	800558a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005038:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8117 	beq.w	8005270 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800504e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005052:	4b85      	ldr	r3, [pc, #532]	; (8005268 <HAL_UART_IRQHandler+0x298>)
 8005054:	4013      	ands	r3, r2
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 810a 	beq.w	8005270 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800505c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d011      	beq.n	800508c <HAL_UART_IRQHandler+0xbc>
 8005068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00b      	beq.n	800508c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2201      	movs	r2, #1
 800507a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005082:	f043 0201 	orr.w	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800508c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d011      	beq.n	80050bc <HAL_UART_IRQHandler+0xec>
 8005098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00b      	beq.n	80050bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2202      	movs	r2, #2
 80050aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b2:	f043 0204 	orr.w	r2, r3, #4
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d011      	beq.n	80050ec <HAL_UART_IRQHandler+0x11c>
 80050c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00b      	beq.n	80050ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2204      	movs	r2, #4
 80050da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e2:	f043 0202 	orr.w	r2, r3, #2
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d017      	beq.n	8005128 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d105      	bne.n	8005110 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005108:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00b      	beq.n	8005128 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2208      	movs	r2, #8
 8005116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511e:	f043 0208 	orr.w	r2, r3, #8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005130:	2b00      	cmp	r3, #0
 8005132:	d012      	beq.n	800515a <HAL_UART_IRQHandler+0x18a>
 8005134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005138:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00c      	beq.n	800515a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005148:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005150:	f043 0220 	orr.w	r2, r3, #32
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8214 	beq.w	800558e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00d      	beq.n	800518e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b00      	cmp	r3, #0
 800517c:	d007      	beq.n	800518e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005194:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	d005      	beq.n	80051b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d04f      	beq.n	8005252 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fe7f 	bl	8005eb6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c2:	2b40      	cmp	r3, #64	; 0x40
 80051c4:	d141      	bne.n	800524a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3308      	adds	r3, #8
 80051cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3308      	adds	r3, #8
 80051ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800520a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1d9      	bne.n	80051c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005216:	2b00      	cmp	r3, #0
 8005218:	d013      	beq.n	8005242 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521e:	4a13      	ldr	r2, [pc, #76]	; (800526c <HAL_UART_IRQHandler+0x29c>)
 8005220:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005226:	4618      	mov	r0, r3
 8005228:	f7fc fc64 	bl	8001af4 <HAL_DMA_Abort_IT>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d017      	beq.n	8005262 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800523c:	4610      	mov	r0, r2
 800523e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	e00f      	b.n	8005262 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f9b8 	bl	80055b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005248:	e00b      	b.n	8005262 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f9b4 	bl	80055b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005250:	e007      	b.n	8005262 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9b0 	bl	80055b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005260:	e195      	b.n	800558e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005262:	bf00      	nop
    return;
 8005264:	e193      	b.n	800558e <HAL_UART_IRQHandler+0x5be>
 8005266:	bf00      	nop
 8005268:	04000120 	.word	0x04000120
 800526c:	08005f7f 	.word	0x08005f7f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005274:	2b01      	cmp	r3, #1
 8005276:	f040 814e 	bne.w	8005516 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800527a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 8147 	beq.w	8005516 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8140 	beq.w	8005516 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2210      	movs	r2, #16
 800529c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	f040 80b8 	bne.w	800541e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8167 	beq.w	8005592 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052ce:	429a      	cmp	r2, r3
 80052d0:	f080 815f 	bcs.w	8005592 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f040 8086 	bne.w	80053fc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800530c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800531a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800531e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005326:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1da      	bne.n	80052f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3308      	adds	r3, #8
 8005340:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800534a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3308      	adds	r3, #8
 800535a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800535e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005362:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005366:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e1      	bne.n	800533a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3308      	adds	r3, #8
 800537c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800538c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800539a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800539c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e3      	bne.n	8005376 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053cc:	f023 0310 	bic.w	r3, r3, #16
 80053d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053de:	65bb      	str	r3, [r7, #88]	; 0x58
 80053e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e4      	bne.n	80053bc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fc fb3e 	bl	8001a78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800540e:	b29b      	uxth	r3, r3
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	b29b      	uxth	r3, r3
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f8d8 	bl	80055cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800541c:	e0b9      	b.n	8005592 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800542a:	b29b      	uxth	r3, r3
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 80ab 	beq.w	8005596 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80a6 	beq.w	8005596 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800545e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800546c:	647b      	str	r3, [r7, #68]	; 0x44
 800546e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800547a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e4      	bne.n	800544a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	623b      	str	r3, [r7, #32]
   return(result);
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3308      	adds	r3, #8
 80054a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054a4:	633a      	str	r2, [r7, #48]	; 0x30
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e3      	bne.n	8005480 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f023 0310 	bic.w	r3, r3, #16
 80054e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	69b9      	ldr	r1, [r7, #24]
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	617b      	str	r3, [r7, #20]
   return(result);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e4      	bne.n	80054cc <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005508:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f85c 	bl	80055cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005514:	e03f      	b.n	8005596 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00e      	beq.n	8005540 <HAL_UART_IRQHandler+0x570>
 8005522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d008      	beq.n	8005540 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005536:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fd60 	bl	8005ffe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800553e:	e02d      	b.n	800559c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00e      	beq.n	800556a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800554c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005554:	2b00      	cmp	r3, #0
 8005556:	d008      	beq.n	800556a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01c      	beq.n	800559a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	4798      	blx	r3
    }
    return;
 8005568:	e017      	b.n	800559a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800556a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d012      	beq.n	800559c <HAL_UART_IRQHandler+0x5cc>
 8005576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fd11 	bl	8005faa <UART_EndTransmit_IT>
    return;
 8005588:	e008      	b.n	800559c <HAL_UART_IRQHandler+0x5cc>
      return;
 800558a:	bf00      	nop
 800558c:	e006      	b.n	800559c <HAL_UART_IRQHandler+0x5cc>
    return;
 800558e:	bf00      	nop
 8005590:	e004      	b.n	800559c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005592:	bf00      	nop
 8005594:	e002      	b.n	800559c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005596:	bf00      	nop
 8005598:	e000      	b.n	800559c <HAL_UART_IRQHandler+0x5cc>
    return;
 800559a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800559c:	37e8      	adds	r7, #232	; 0xe8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop

080055a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e8:	b08a      	sub	sp, #40	; 0x28
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	431a      	orrs	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	4313      	orrs	r3, r2
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4ba4      	ldr	r3, [pc, #656]	; (80058a4 <UART_SetConfig+0x2c0>)
 8005614:	4013      	ands	r3, r2
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	6812      	ldr	r2, [r2, #0]
 800561a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800561c:	430b      	orrs	r3, r1
 800561e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a99      	ldr	r2, [pc, #612]	; (80058a8 <UART_SetConfig+0x2c4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d004      	beq.n	8005650 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564c:	4313      	orrs	r3, r2
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005660:	430a      	orrs	r2, r1
 8005662:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a90      	ldr	r2, [pc, #576]	; (80058ac <UART_SetConfig+0x2c8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d126      	bne.n	80056bc <UART_SetConfig+0xd8>
 800566e:	4b90      	ldr	r3, [pc, #576]	; (80058b0 <UART_SetConfig+0x2cc>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	2b03      	cmp	r3, #3
 800567a:	d81b      	bhi.n	80056b4 <UART_SetConfig+0xd0>
 800567c:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <UART_SetConfig+0xa0>)
 800567e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005682:	bf00      	nop
 8005684:	08005695 	.word	0x08005695
 8005688:	080056a5 	.word	0x080056a5
 800568c:	0800569d 	.word	0x0800569d
 8005690:	080056ad 	.word	0x080056ad
 8005694:	2301      	movs	r3, #1
 8005696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800569a:	e116      	b.n	80058ca <UART_SetConfig+0x2e6>
 800569c:	2302      	movs	r3, #2
 800569e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a2:	e112      	b.n	80058ca <UART_SetConfig+0x2e6>
 80056a4:	2304      	movs	r3, #4
 80056a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056aa:	e10e      	b.n	80058ca <UART_SetConfig+0x2e6>
 80056ac:	2308      	movs	r3, #8
 80056ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056b2:	e10a      	b.n	80058ca <UART_SetConfig+0x2e6>
 80056b4:	2310      	movs	r3, #16
 80056b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ba:	e106      	b.n	80058ca <UART_SetConfig+0x2e6>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a7c      	ldr	r2, [pc, #496]	; (80058b4 <UART_SetConfig+0x2d0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d138      	bne.n	8005738 <UART_SetConfig+0x154>
 80056c6:	4b7a      	ldr	r3, [pc, #488]	; (80058b0 <UART_SetConfig+0x2cc>)
 80056c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056cc:	f003 030c 	and.w	r3, r3, #12
 80056d0:	2b0c      	cmp	r3, #12
 80056d2:	d82d      	bhi.n	8005730 <UART_SetConfig+0x14c>
 80056d4:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <UART_SetConfig+0xf8>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	08005711 	.word	0x08005711
 80056e0:	08005731 	.word	0x08005731
 80056e4:	08005731 	.word	0x08005731
 80056e8:	08005731 	.word	0x08005731
 80056ec:	08005721 	.word	0x08005721
 80056f0:	08005731 	.word	0x08005731
 80056f4:	08005731 	.word	0x08005731
 80056f8:	08005731 	.word	0x08005731
 80056fc:	08005719 	.word	0x08005719
 8005700:	08005731 	.word	0x08005731
 8005704:	08005731 	.word	0x08005731
 8005708:	08005731 	.word	0x08005731
 800570c:	08005729 	.word	0x08005729
 8005710:	2300      	movs	r3, #0
 8005712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005716:	e0d8      	b.n	80058ca <UART_SetConfig+0x2e6>
 8005718:	2302      	movs	r3, #2
 800571a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571e:	e0d4      	b.n	80058ca <UART_SetConfig+0x2e6>
 8005720:	2304      	movs	r3, #4
 8005722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005726:	e0d0      	b.n	80058ca <UART_SetConfig+0x2e6>
 8005728:	2308      	movs	r3, #8
 800572a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572e:	e0cc      	b.n	80058ca <UART_SetConfig+0x2e6>
 8005730:	2310      	movs	r3, #16
 8005732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005736:	e0c8      	b.n	80058ca <UART_SetConfig+0x2e6>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a5e      	ldr	r2, [pc, #376]	; (80058b8 <UART_SetConfig+0x2d4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d125      	bne.n	800578e <UART_SetConfig+0x1aa>
 8005742:	4b5b      	ldr	r3, [pc, #364]	; (80058b0 <UART_SetConfig+0x2cc>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005748:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800574c:	2b30      	cmp	r3, #48	; 0x30
 800574e:	d016      	beq.n	800577e <UART_SetConfig+0x19a>
 8005750:	2b30      	cmp	r3, #48	; 0x30
 8005752:	d818      	bhi.n	8005786 <UART_SetConfig+0x1a2>
 8005754:	2b20      	cmp	r3, #32
 8005756:	d00a      	beq.n	800576e <UART_SetConfig+0x18a>
 8005758:	2b20      	cmp	r3, #32
 800575a:	d814      	bhi.n	8005786 <UART_SetConfig+0x1a2>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <UART_SetConfig+0x182>
 8005760:	2b10      	cmp	r3, #16
 8005762:	d008      	beq.n	8005776 <UART_SetConfig+0x192>
 8005764:	e00f      	b.n	8005786 <UART_SetConfig+0x1a2>
 8005766:	2300      	movs	r3, #0
 8005768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800576c:	e0ad      	b.n	80058ca <UART_SetConfig+0x2e6>
 800576e:	2302      	movs	r3, #2
 8005770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005774:	e0a9      	b.n	80058ca <UART_SetConfig+0x2e6>
 8005776:	2304      	movs	r3, #4
 8005778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800577c:	e0a5      	b.n	80058ca <UART_SetConfig+0x2e6>
 800577e:	2308      	movs	r3, #8
 8005780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005784:	e0a1      	b.n	80058ca <UART_SetConfig+0x2e6>
 8005786:	2310      	movs	r3, #16
 8005788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800578c:	e09d      	b.n	80058ca <UART_SetConfig+0x2e6>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a4a      	ldr	r2, [pc, #296]	; (80058bc <UART_SetConfig+0x2d8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d125      	bne.n	80057e4 <UART_SetConfig+0x200>
 8005798:	4b45      	ldr	r3, [pc, #276]	; (80058b0 <UART_SetConfig+0x2cc>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057a2:	2bc0      	cmp	r3, #192	; 0xc0
 80057a4:	d016      	beq.n	80057d4 <UART_SetConfig+0x1f0>
 80057a6:	2bc0      	cmp	r3, #192	; 0xc0
 80057a8:	d818      	bhi.n	80057dc <UART_SetConfig+0x1f8>
 80057aa:	2b80      	cmp	r3, #128	; 0x80
 80057ac:	d00a      	beq.n	80057c4 <UART_SetConfig+0x1e0>
 80057ae:	2b80      	cmp	r3, #128	; 0x80
 80057b0:	d814      	bhi.n	80057dc <UART_SetConfig+0x1f8>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <UART_SetConfig+0x1d8>
 80057b6:	2b40      	cmp	r3, #64	; 0x40
 80057b8:	d008      	beq.n	80057cc <UART_SetConfig+0x1e8>
 80057ba:	e00f      	b.n	80057dc <UART_SetConfig+0x1f8>
 80057bc:	2300      	movs	r3, #0
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c2:	e082      	b.n	80058ca <UART_SetConfig+0x2e6>
 80057c4:	2302      	movs	r3, #2
 80057c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ca:	e07e      	b.n	80058ca <UART_SetConfig+0x2e6>
 80057cc:	2304      	movs	r3, #4
 80057ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d2:	e07a      	b.n	80058ca <UART_SetConfig+0x2e6>
 80057d4:	2308      	movs	r3, #8
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057da:	e076      	b.n	80058ca <UART_SetConfig+0x2e6>
 80057dc:	2310      	movs	r3, #16
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e2:	e072      	b.n	80058ca <UART_SetConfig+0x2e6>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a35      	ldr	r2, [pc, #212]	; (80058c0 <UART_SetConfig+0x2dc>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d12a      	bne.n	8005844 <UART_SetConfig+0x260>
 80057ee:	4b30      	ldr	r3, [pc, #192]	; (80058b0 <UART_SetConfig+0x2cc>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057fc:	d01a      	beq.n	8005834 <UART_SetConfig+0x250>
 80057fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005802:	d81b      	bhi.n	800583c <UART_SetConfig+0x258>
 8005804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005808:	d00c      	beq.n	8005824 <UART_SetConfig+0x240>
 800580a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800580e:	d815      	bhi.n	800583c <UART_SetConfig+0x258>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <UART_SetConfig+0x238>
 8005814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005818:	d008      	beq.n	800582c <UART_SetConfig+0x248>
 800581a:	e00f      	b.n	800583c <UART_SetConfig+0x258>
 800581c:	2300      	movs	r3, #0
 800581e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005822:	e052      	b.n	80058ca <UART_SetConfig+0x2e6>
 8005824:	2302      	movs	r3, #2
 8005826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800582a:	e04e      	b.n	80058ca <UART_SetConfig+0x2e6>
 800582c:	2304      	movs	r3, #4
 800582e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005832:	e04a      	b.n	80058ca <UART_SetConfig+0x2e6>
 8005834:	2308      	movs	r3, #8
 8005836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800583a:	e046      	b.n	80058ca <UART_SetConfig+0x2e6>
 800583c:	2310      	movs	r3, #16
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005842:	e042      	b.n	80058ca <UART_SetConfig+0x2e6>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <UART_SetConfig+0x2c4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d13a      	bne.n	80058c4 <UART_SetConfig+0x2e0>
 800584e:	4b18      	ldr	r3, [pc, #96]	; (80058b0 <UART_SetConfig+0x2cc>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005854:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800585c:	d01a      	beq.n	8005894 <UART_SetConfig+0x2b0>
 800585e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005862:	d81b      	bhi.n	800589c <UART_SetConfig+0x2b8>
 8005864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005868:	d00c      	beq.n	8005884 <UART_SetConfig+0x2a0>
 800586a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800586e:	d815      	bhi.n	800589c <UART_SetConfig+0x2b8>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <UART_SetConfig+0x298>
 8005874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005878:	d008      	beq.n	800588c <UART_SetConfig+0x2a8>
 800587a:	e00f      	b.n	800589c <UART_SetConfig+0x2b8>
 800587c:	2300      	movs	r3, #0
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005882:	e022      	b.n	80058ca <UART_SetConfig+0x2e6>
 8005884:	2302      	movs	r3, #2
 8005886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800588a:	e01e      	b.n	80058ca <UART_SetConfig+0x2e6>
 800588c:	2304      	movs	r3, #4
 800588e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005892:	e01a      	b.n	80058ca <UART_SetConfig+0x2e6>
 8005894:	2308      	movs	r3, #8
 8005896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589a:	e016      	b.n	80058ca <UART_SetConfig+0x2e6>
 800589c:	2310      	movs	r3, #16
 800589e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a2:	e012      	b.n	80058ca <UART_SetConfig+0x2e6>
 80058a4:	efff69f3 	.word	0xefff69f3
 80058a8:	40008000 	.word	0x40008000
 80058ac:	40013800 	.word	0x40013800
 80058b0:	40021000 	.word	0x40021000
 80058b4:	40004400 	.word	0x40004400
 80058b8:	40004800 	.word	0x40004800
 80058bc:	40004c00 	.word	0x40004c00
 80058c0:	40005000 	.word	0x40005000
 80058c4:	2310      	movs	r3, #16
 80058c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a9f      	ldr	r2, [pc, #636]	; (8005b4c <UART_SetConfig+0x568>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d17a      	bne.n	80059ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d824      	bhi.n	8005926 <UART_SetConfig+0x342>
 80058dc:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <UART_SetConfig+0x300>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	08005909 	.word	0x08005909
 80058e8:	08005927 	.word	0x08005927
 80058ec:	08005911 	.word	0x08005911
 80058f0:	08005927 	.word	0x08005927
 80058f4:	08005917 	.word	0x08005917
 80058f8:	08005927 	.word	0x08005927
 80058fc:	08005927 	.word	0x08005927
 8005900:	08005927 	.word	0x08005927
 8005904:	0800591f 	.word	0x0800591f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005908:	f7fe fad8 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 800590c:	61f8      	str	r0, [r7, #28]
        break;
 800590e:	e010      	b.n	8005932 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005910:	4b8f      	ldr	r3, [pc, #572]	; (8005b50 <UART_SetConfig+0x56c>)
 8005912:	61fb      	str	r3, [r7, #28]
        break;
 8005914:	e00d      	b.n	8005932 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005916:	f7fe fa39 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 800591a:	61f8      	str	r0, [r7, #28]
        break;
 800591c:	e009      	b.n	8005932 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800591e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005922:	61fb      	str	r3, [r7, #28]
        break;
 8005924:	e005      	b.n	8005932 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005930:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80fb 	beq.w	8005b30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	4413      	add	r3, r2
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	429a      	cmp	r2, r3
 8005948:	d305      	bcc.n	8005956 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	429a      	cmp	r2, r3
 8005954:	d903      	bls.n	800595e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800595c:	e0e8      	b.n	8005b30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	2200      	movs	r2, #0
 8005962:	461c      	mov	r4, r3
 8005964:	4615      	mov	r5, r2
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	022b      	lsls	r3, r5, #8
 8005970:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005974:	0222      	lsls	r2, r4, #8
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	6849      	ldr	r1, [r1, #4]
 800597a:	0849      	lsrs	r1, r1, #1
 800597c:	2000      	movs	r0, #0
 800597e:	4688      	mov	r8, r1
 8005980:	4681      	mov	r9, r0
 8005982:	eb12 0a08 	adds.w	sl, r2, r8
 8005986:	eb43 0b09 	adc.w	fp, r3, r9
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	603b      	str	r3, [r7, #0]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005998:	4650      	mov	r0, sl
 800599a:	4659      	mov	r1, fp
 800599c:	f7fa fc28 	bl	80001f0 <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4613      	mov	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ae:	d308      	bcc.n	80059c2 <UART_SetConfig+0x3de>
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059b6:	d204      	bcs.n	80059c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	e0b6      	b.n	8005b30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059c8:	e0b2      	b.n	8005b30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d2:	d15e      	bne.n	8005a92 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80059d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d828      	bhi.n	8005a2e <UART_SetConfig+0x44a>
 80059dc:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <UART_SetConfig+0x400>)
 80059de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e2:	bf00      	nop
 80059e4:	08005a09 	.word	0x08005a09
 80059e8:	08005a11 	.word	0x08005a11
 80059ec:	08005a19 	.word	0x08005a19
 80059f0:	08005a2f 	.word	0x08005a2f
 80059f4:	08005a1f 	.word	0x08005a1f
 80059f8:	08005a2f 	.word	0x08005a2f
 80059fc:	08005a2f 	.word	0x08005a2f
 8005a00:	08005a2f 	.word	0x08005a2f
 8005a04:	08005a27 	.word	0x08005a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a08:	f7fe fa58 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8005a0c:	61f8      	str	r0, [r7, #28]
        break;
 8005a0e:	e014      	b.n	8005a3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a10:	f7fe fa6a 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 8005a14:	61f8      	str	r0, [r7, #28]
        break;
 8005a16:	e010      	b.n	8005a3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a18:	4b4d      	ldr	r3, [pc, #308]	; (8005b50 <UART_SetConfig+0x56c>)
 8005a1a:	61fb      	str	r3, [r7, #28]
        break;
 8005a1c:	e00d      	b.n	8005a3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a1e:	f7fe f9b5 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8005a22:	61f8      	str	r0, [r7, #28]
        break;
 8005a24:	e009      	b.n	8005a3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2a:	61fb      	str	r3, [r7, #28]
        break;
 8005a2c:	e005      	b.n	8005a3a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d077      	beq.n	8005b30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	005a      	lsls	r2, r3, #1
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	085b      	lsrs	r3, r3, #1
 8005a4a:	441a      	add	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	2b0f      	cmp	r3, #15
 8005a5a:	d916      	bls.n	8005a8a <UART_SetConfig+0x4a6>
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a62:	d212      	bcs.n	8005a8a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f023 030f 	bic.w	r3, r3, #15
 8005a6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	085b      	lsrs	r3, r3, #1
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	8afb      	ldrh	r3, [r7, #22]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	8afa      	ldrh	r2, [r7, #22]
 8005a86:	60da      	str	r2, [r3, #12]
 8005a88:	e052      	b.n	8005b30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a90:	e04e      	b.n	8005b30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d827      	bhi.n	8005aea <UART_SetConfig+0x506>
 8005a9a:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <UART_SetConfig+0x4bc>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005acd 	.word	0x08005acd
 8005aa8:	08005ad5 	.word	0x08005ad5
 8005aac:	08005aeb 	.word	0x08005aeb
 8005ab0:	08005adb 	.word	0x08005adb
 8005ab4:	08005aeb 	.word	0x08005aeb
 8005ab8:	08005aeb 	.word	0x08005aeb
 8005abc:	08005aeb 	.word	0x08005aeb
 8005ac0:	08005ae3 	.word	0x08005ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac4:	f7fe f9fa 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8005ac8:	61f8      	str	r0, [r7, #28]
        break;
 8005aca:	e014      	b.n	8005af6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005acc:	f7fe fa0c 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 8005ad0:	61f8      	str	r0, [r7, #28]
        break;
 8005ad2:	e010      	b.n	8005af6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad4:	4b1e      	ldr	r3, [pc, #120]	; (8005b50 <UART_SetConfig+0x56c>)
 8005ad6:	61fb      	str	r3, [r7, #28]
        break;
 8005ad8:	e00d      	b.n	8005af6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ada:	f7fe f957 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8005ade:	61f8      	str	r0, [r7, #28]
        break;
 8005ae0:	e009      	b.n	8005af6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae6:	61fb      	str	r3, [r7, #28]
        break;
 8005ae8:	e005      	b.n	8005af6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005af4:	bf00      	nop
    }

    if (pclk != 0U)
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d019      	beq.n	8005b30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	085a      	lsrs	r2, r3, #1
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	441a      	add	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b0f      	cmp	r3, #15
 8005b14:	d909      	bls.n	8005b2a <UART_SetConfig+0x546>
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1c:	d205      	bcs.n	8005b2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60da      	str	r2, [r3, #12]
 8005b28:	e002      	b.n	8005b30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3728      	adds	r7, #40	; 0x28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40008000 	.word	0x40008000
 8005b50:	00f42400 	.word	0x00f42400

08005b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00a      	beq.n	8005b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00a      	beq.n	8005bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00a      	beq.n	8005c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	f003 0320 	and.w	r3, r3, #32
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00a      	beq.n	8005c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01a      	beq.n	8005c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c52:	d10a      	bne.n	8005c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	605a      	str	r2, [r3, #4]
  }
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b098      	sub	sp, #96	; 0x60
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ca8:	f7fb fdd4 	bl	8001854 <HAL_GetTick>
 8005cac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d12e      	bne.n	8005d1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f88c 	bl	8005de8 <UART_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d021      	beq.n	8005d1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	e853 3f00 	ldrex	r3, [r3]
 8005ce2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cea:	653b      	str	r3, [r7, #80]	; 0x50
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cfc:	e841 2300 	strex	r3, r2, [r1]
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e6      	bne.n	8005cd6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e062      	b.n	8005de0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d149      	bne.n	8005dbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d30:	2200      	movs	r2, #0
 8005d32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f856 	bl	8005de8 <UART_WaitOnFlagUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d03c      	beq.n	8005dbc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d60:	633b      	str	r3, [r7, #48]	; 0x30
 8005d62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e6      	bne.n	8005d42 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3308      	adds	r3, #8
 8005d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0301 	bic.w	r3, r3, #1
 8005d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3308      	adds	r3, #8
 8005d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d94:	61fa      	str	r2, [r7, #28]
 8005d96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	69b9      	ldr	r1, [r7, #24]
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	617b      	str	r3, [r7, #20]
   return(result);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e5      	bne.n	8005d74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e011      	b.n	8005de0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3758      	adds	r7, #88	; 0x58
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	4613      	mov	r3, r2
 8005df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df8:	e049      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d045      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e02:	f7fb fd27 	bl	8001854 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d302      	bcc.n	8005e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e048      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d031      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d110      	bne.n	8005e5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f838 	bl	8005eb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2208      	movs	r2, #8
 8005e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e029      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e68:	d111      	bne.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f81e 	bl	8005eb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e00f      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4013      	ands	r3, r2
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2301      	moveq	r3, #1
 8005ea0:	2300      	movne	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d0a6      	beq.n	8005dfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b095      	sub	sp, #84	; 0x54
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ece:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005edc:	643b      	str	r3, [r7, #64]	; 0x40
 8005ede:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ee4:	e841 2300 	strex	r3, r2, [r1]
 8005ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e6      	bne.n	8005ebe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	e853 3f00 	ldrex	r3, [r3]
 8005efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f023 0301 	bic.w	r3, r3, #1
 8005f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f18:	e841 2300 	strex	r3, r2, [r1]
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e5      	bne.n	8005ef0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d118      	bne.n	8005f5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f023 0310 	bic.w	r3, r3, #16
 8005f40:	647b      	str	r3, [r7, #68]	; 0x44
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	6979      	ldr	r1, [r7, #20]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	613b      	str	r3, [r7, #16]
   return(result);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e6      	bne.n	8005f2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f72:	bf00      	nop
 8005f74:	3754      	adds	r7, #84	; 0x54
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7ff fb0b 	bl	80055b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b088      	sub	sp, #32
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6979      	ldr	r1, [r7, #20]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e6      	bne.n	8005fb2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff fad7 	bl	80055a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ff6:	bf00      	nop
 8005ff8:	3720      	adds	r7, #32
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006012:	b084      	sub	sp, #16
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	f107 001c 	add.w	r0, r7, #28
 8006020:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 fa1d 	bl	8007470 <USB_CoreReset>
 8006036:	4603      	mov	r3, r0
 8006038:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800603a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	d106      	bne.n	800604e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	639a      	str	r2, [r3, #56]	; 0x38
 800604c:	e005      	b.n	800605a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800605a:	7bfb      	ldrb	r3, [r7, #15]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006066:	b004      	add	sp, #16
 8006068:	4770      	bx	lr
	...

0800606c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d165      	bne.n	800614c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4a3e      	ldr	r2, [pc, #248]	; (800617c <USB_SetTurnaroundTime+0x110>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d906      	bls.n	8006096 <USB_SetTurnaroundTime+0x2a>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4a3d      	ldr	r2, [pc, #244]	; (8006180 <USB_SetTurnaroundTime+0x114>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d202      	bcs.n	8006096 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006090:	230f      	movs	r3, #15
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	e05c      	b.n	8006150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	4a39      	ldr	r2, [pc, #228]	; (8006180 <USB_SetTurnaroundTime+0x114>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d306      	bcc.n	80060ac <USB_SetTurnaroundTime+0x40>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	4a38      	ldr	r2, [pc, #224]	; (8006184 <USB_SetTurnaroundTime+0x118>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d202      	bcs.n	80060ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80060a6:	230e      	movs	r3, #14
 80060a8:	617b      	str	r3, [r7, #20]
 80060aa:	e051      	b.n	8006150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4a35      	ldr	r2, [pc, #212]	; (8006184 <USB_SetTurnaroundTime+0x118>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d306      	bcc.n	80060c2 <USB_SetTurnaroundTime+0x56>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4a34      	ldr	r2, [pc, #208]	; (8006188 <USB_SetTurnaroundTime+0x11c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d202      	bcs.n	80060c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80060bc:	230d      	movs	r3, #13
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	e046      	b.n	8006150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	4a30      	ldr	r2, [pc, #192]	; (8006188 <USB_SetTurnaroundTime+0x11c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d306      	bcc.n	80060d8 <USB_SetTurnaroundTime+0x6c>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	4a2f      	ldr	r2, [pc, #188]	; (800618c <USB_SetTurnaroundTime+0x120>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d802      	bhi.n	80060d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80060d2:	230c      	movs	r3, #12
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	e03b      	b.n	8006150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4a2c      	ldr	r2, [pc, #176]	; (800618c <USB_SetTurnaroundTime+0x120>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d906      	bls.n	80060ee <USB_SetTurnaroundTime+0x82>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	4a2b      	ldr	r2, [pc, #172]	; (8006190 <USB_SetTurnaroundTime+0x124>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d802      	bhi.n	80060ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80060e8:	230b      	movs	r3, #11
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	e030      	b.n	8006150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	4a27      	ldr	r2, [pc, #156]	; (8006190 <USB_SetTurnaroundTime+0x124>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d906      	bls.n	8006104 <USB_SetTurnaroundTime+0x98>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4a26      	ldr	r2, [pc, #152]	; (8006194 <USB_SetTurnaroundTime+0x128>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d802      	bhi.n	8006104 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80060fe:	230a      	movs	r3, #10
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	e025      	b.n	8006150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4a23      	ldr	r2, [pc, #140]	; (8006194 <USB_SetTurnaroundTime+0x128>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d906      	bls.n	800611a <USB_SetTurnaroundTime+0xae>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4a22      	ldr	r2, [pc, #136]	; (8006198 <USB_SetTurnaroundTime+0x12c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d202      	bcs.n	800611a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006114:	2309      	movs	r3, #9
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	e01a      	b.n	8006150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	4a1e      	ldr	r2, [pc, #120]	; (8006198 <USB_SetTurnaroundTime+0x12c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d306      	bcc.n	8006130 <USB_SetTurnaroundTime+0xc4>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4a1d      	ldr	r2, [pc, #116]	; (800619c <USB_SetTurnaroundTime+0x130>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d802      	bhi.n	8006130 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800612a:	2308      	movs	r3, #8
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e00f      	b.n	8006150 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4a1a      	ldr	r2, [pc, #104]	; (800619c <USB_SetTurnaroundTime+0x130>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d906      	bls.n	8006146 <USB_SetTurnaroundTime+0xda>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4a19      	ldr	r2, [pc, #100]	; (80061a0 <USB_SetTurnaroundTime+0x134>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d202      	bcs.n	8006146 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006140:	2307      	movs	r3, #7
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	e004      	b.n	8006150 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006146:	2306      	movs	r3, #6
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	e001      	b.n	8006150 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800614c:	2309      	movs	r3, #9
 800614e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	029b      	lsls	r3, r3, #10
 8006164:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006168:	431a      	orrs	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	00d8acbf 	.word	0x00d8acbf
 8006180:	00e4e1c0 	.word	0x00e4e1c0
 8006184:	00f42400 	.word	0x00f42400
 8006188:	01067380 	.word	0x01067380
 800618c:	011a499f 	.word	0x011a499f
 8006190:	01312cff 	.word	0x01312cff
 8006194:	014ca43f 	.word	0x014ca43f
 8006198:	016e3600 	.word	0x016e3600
 800619c:	01a6ab1f 	.word	0x01a6ab1f
 80061a0:	01e84800 	.word	0x01e84800

080061a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f043 0201 	orr.w	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f023 0201 	bic.w	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006204:	78fb      	ldrb	r3, [r7, #3]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d115      	bne.n	8006236 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006216:	2001      	movs	r0, #1
 8006218:	f7fb fb28 	bl	800186c <HAL_Delay>
      ms++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3301      	adds	r3, #1
 8006220:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f001 f8ab 	bl	800737e <USB_GetMode>
 8006228:	4603      	mov	r3, r0
 800622a:	2b01      	cmp	r3, #1
 800622c:	d01e      	beq.n	800626c <USB_SetCurrentMode+0x84>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b31      	cmp	r3, #49	; 0x31
 8006232:	d9f0      	bls.n	8006216 <USB_SetCurrentMode+0x2e>
 8006234:	e01a      	b.n	800626c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d115      	bne.n	8006268 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006248:	2001      	movs	r0, #1
 800624a:	f7fb fb0f 	bl	800186c <HAL_Delay>
      ms++;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 f892 	bl	800737e <USB_GetMode>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <USB_SetCurrentMode+0x84>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b31      	cmp	r3, #49	; 0x31
 8006264:	d9f0      	bls.n	8006248 <USB_SetCurrentMode+0x60>
 8006266:	e001      	b.n	800626c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e005      	b.n	8006278 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b32      	cmp	r3, #50	; 0x32
 8006270:	d101      	bne.n	8006276 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e000      	b.n	8006278 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006280:	b084      	sub	sp, #16
 8006282:	b580      	push	{r7, lr}
 8006284:	b086      	sub	sp, #24
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800628e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800629a:	2300      	movs	r3, #0
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	e009      	b.n	80062b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	3340      	adds	r3, #64	; 0x40
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	2200      	movs	r2, #0
 80062ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	3301      	adds	r3, #1
 80062b2:	613b      	str	r3, [r7, #16]
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b0e      	cmp	r3, #14
 80062b8:	d9f2      	bls.n	80062a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d11c      	bne.n	80062fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ce:	f043 0302 	orr.w	r3, r3, #2
 80062d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	e005      	b.n	8006306 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800630c:	461a      	mov	r2, r3
 800630e:	2300      	movs	r3, #0
 8006310:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006312:	2103      	movs	r1, #3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f959 	bl	80065cc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800631a:	2110      	movs	r1, #16
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f8f1 	bl	8006504 <USB_FlushTxFifo>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f91d 	bl	800656c <USB_FlushRxFifo>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006342:	461a      	mov	r2, r3
 8006344:	2300      	movs	r3, #0
 8006346:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634e:	461a      	mov	r2, r3
 8006350:	2300      	movs	r3, #0
 8006352:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635a:	461a      	mov	r2, r3
 800635c:	2300      	movs	r3, #0
 800635e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006360:	2300      	movs	r3, #0
 8006362:	613b      	str	r3, [r7, #16]
 8006364:	e043      	b.n	80063ee <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800637c:	d118      	bne.n	80063b0 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006390:	461a      	mov	r2, r3
 8006392:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	e013      	b.n	80063c2 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a6:	461a      	mov	r2, r3
 80063a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	e008      	b.n	80063c2 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063bc:	461a      	mov	r2, r3
 80063be:	2300      	movs	r3, #0
 80063c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ce:	461a      	mov	r2, r3
 80063d0:	2300      	movs	r3, #0
 80063d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	461a      	mov	r2, r3
 80063e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	3301      	adds	r3, #1
 80063ec:	613b      	str	r3, [r7, #16]
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d3b7      	bcc.n	8006366 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063f6:	2300      	movs	r3, #0
 80063f8:	613b      	str	r3, [r7, #16]
 80063fa:	e043      	b.n	8006484 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800640e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006412:	d118      	bne.n	8006446 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006426:	461a      	mov	r2, r3
 8006428:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	e013      	b.n	8006458 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643c:	461a      	mov	r2, r3
 800643e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	e008      	b.n	8006458 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006452:	461a      	mov	r2, r3
 8006454:	2300      	movs	r3, #0
 8006456:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	461a      	mov	r2, r3
 8006466:	2300      	movs	r3, #0
 8006468:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006476:	461a      	mov	r2, r3
 8006478:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800647c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	3301      	adds	r3, #1
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	429a      	cmp	r2, r3
 800648a:	d3b7      	bcc.n	80063fc <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800649a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800649e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80064ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f043 0210 	orr.w	r2, r3, #16
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	4b10      	ldr	r3, [pc, #64]	; (8006500 <USB_DevInit+0x280>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	f043 0208 	orr.w	r2, r3, #8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d107      	bne.n	80064ee <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064e6:	f043 0304 	orr.w	r3, r3, #4
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064fa:	b004      	add	sp, #16
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	803c3800 	.word	0x803c3800

08006504 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3301      	adds	r3, #1
 8006516:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4a13      	ldr	r2, [pc, #76]	; (8006568 <USB_FlushTxFifo+0x64>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d901      	bls.n	8006524 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e01b      	b.n	800655c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	daf2      	bge.n	8006512 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	019b      	lsls	r3, r3, #6
 8006534:	f043 0220 	orr.w	r2, r3, #32
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3301      	adds	r3, #1
 8006540:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4a08      	ldr	r2, [pc, #32]	; (8006568 <USB_FlushTxFifo+0x64>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d901      	bls.n	800654e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e006      	b.n	800655c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b20      	cmp	r3, #32
 8006558:	d0f0      	beq.n	800653c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	00030d40 	.word	0x00030d40

0800656c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3301      	adds	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4a11      	ldr	r2, [pc, #68]	; (80065c8 <USB_FlushRxFifo+0x5c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d901      	bls.n	800658a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e018      	b.n	80065bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	daf2      	bge.n	8006578 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2210      	movs	r2, #16
 800659a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3301      	adds	r3, #1
 80065a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4a08      	ldr	r2, [pc, #32]	; (80065c8 <USB_FlushRxFifo+0x5c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d901      	bls.n	80065ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e006      	b.n	80065bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	f003 0310 	and.w	r3, r3, #16
 80065b6:	2b10      	cmp	r3, #16
 80065b8:	d0f0      	beq.n	800659c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	00030d40 	.word	0x00030d40

080065cc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	68f9      	ldr	r1, [r7, #12]
 80065e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065ec:	4313      	orrs	r3, r2
 80065ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80065fe:	b480      	push	{r7}
 8006600:	b087      	sub	sp, #28
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 0306 	and.w	r3, r3, #6
 8006616:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d002      	beq.n	8006624 <USB_GetDevSpeed+0x26>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b06      	cmp	r3, #6
 8006622:	d102      	bne.n	800662a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006624:	2302      	movs	r3, #2
 8006626:	75fb      	strb	r3, [r7, #23]
 8006628:	e001      	b.n	800662e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800662a:	230f      	movs	r3, #15
 800662c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800662e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006630:	4618      	mov	r0, r3
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d13a      	bne.n	80066ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	2101      	movs	r1, #1
 800666a:	fa01 f303 	lsl.w	r3, r1, r3
 800666e:	b29b      	uxth	r3, r3
 8006670:	68f9      	ldr	r1, [r7, #12]
 8006672:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006676:	4313      	orrs	r3, r2
 8006678:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d155      	bne.n	800673c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	791b      	ldrb	r3, [r3, #4]
 80066aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	059b      	lsls	r3, r3, #22
 80066b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066b4:	4313      	orrs	r3, r2
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	e036      	b.n	800673c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d4:	69da      	ldr	r2, [r3, #28]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	2101      	movs	r1, #1
 80066e0:	fa01 f303 	lsl.w	r3, r1, r3
 80066e4:	041b      	lsls	r3, r3, #16
 80066e6:	68f9      	ldr	r1, [r7, #12]
 80066e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066ec:	4313      	orrs	r3, r2
 80066ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d11a      	bne.n	800673c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	791b      	ldrb	r3, [r3, #4]
 8006720:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006722:	430b      	orrs	r3, r1
 8006724:	4313      	orrs	r3, r2
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	0151      	lsls	r1, r2, #5
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	440a      	add	r2, r1
 800672e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800673a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
	...

0800674c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	785b      	ldrb	r3, [r3, #1]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d161      	bne.n	800682c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800677a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800677e:	d11f      	bne.n	80067c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	440a      	add	r2, r1
 8006796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800679a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800679e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	2101      	movs	r1, #1
 80067d2:	fa01 f303 	lsl.w	r3, r1, r3
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	43db      	mvns	r3, r3
 80067da:	68f9      	ldr	r1, [r7, #12]
 80067dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067e0:	4013      	ands	r3, r2
 80067e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	2101      	movs	r1, #1
 80067f6:	fa01 f303 	lsl.w	r3, r1, r3
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	43db      	mvns	r3, r3
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006804:	4013      	ands	r3, r2
 8006806:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	0159      	lsls	r1, r3, #5
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	440b      	add	r3, r1
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	4619      	mov	r1, r3
 8006824:	4b35      	ldr	r3, [pc, #212]	; (80068fc <USB_DeactivateEndpoint+0x1b0>)
 8006826:	4013      	ands	r3, r2
 8006828:	600b      	str	r3, [r1, #0]
 800682a:	e060      	b.n	80068ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800683e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006842:	d11f      	bne.n	8006884 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	0151      	lsls	r1, r2, #5
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	440a      	add	r2, r1
 800685a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800685e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006862:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006882:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	2101      	movs	r1, #1
 8006896:	fa01 f303 	lsl.w	r3, r1, r3
 800689a:	041b      	lsls	r3, r3, #16
 800689c:	43db      	mvns	r3, r3
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068a4:	4013      	ands	r3, r2
 80068a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ae:	69da      	ldr	r2, [r3, #28]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	2101      	movs	r1, #1
 80068ba:	fa01 f303 	lsl.w	r3, r1, r3
 80068be:	041b      	lsls	r3, r3, #16
 80068c0:	43db      	mvns	r3, r3
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068c8:	4013      	ands	r3, r2
 80068ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	0159      	lsls	r1, r3, #5
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	440b      	add	r3, r1
 80068e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e6:	4619      	mov	r1, r3
 80068e8:	4b05      	ldr	r3, [pc, #20]	; (8006900 <USB_DeactivateEndpoint+0x1b4>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	ec337800 	.word	0xec337800
 8006900:	eff37800 	.word	0xeff37800

08006904 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	2b01      	cmp	r3, #1
 800691e:	f040 8128 	bne.w	8006b72 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d132      	bne.n	8006990 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	0151      	lsls	r1, r2, #5
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	440a      	add	r2, r1
 8006940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006944:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006948:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800694c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800696c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	0151      	lsls	r1, r2, #5
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	440a      	add	r2, r1
 8006984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006988:	0cdb      	lsrs	r3, r3, #19
 800698a:	04db      	lsls	r3, r3, #19
 800698c:	6113      	str	r3, [r2, #16]
 800698e:	e092      	b.n	8006ab6 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069aa:	0cdb      	lsrs	r3, r3, #19
 80069ac:	04db      	lsls	r3, r3, #19
 80069ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	0151      	lsls	r1, r2, #5
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	440a      	add	r2, r1
 80069c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069d2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d11a      	bne.n	8006a10 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	691a      	ldr	r2, [r3, #16]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d903      	bls.n	80069ee <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a0c:	6113      	str	r3, [r2, #16]
 8006a0e:	e01b      	b.n	8006a48 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6919      	ldr	r1, [r3, #16]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	440b      	add	r3, r1
 8006a28:	1e59      	subs	r1, r3, #1
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a32:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a34:	4b8d      	ldr	r3, [pc, #564]	; (8006c6c <USB_EPStartXfer+0x368>)
 8006a36:	400b      	ands	r3, r1
 8006a38:	6939      	ldr	r1, [r7, #16]
 8006a3a:	0148      	lsls	r0, r1, #5
 8006a3c:	6979      	ldr	r1, [r7, #20]
 8006a3e:	4401      	add	r1, r0
 8006a40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a44:	4313      	orrs	r3, r2
 8006a46:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a5e:	6939      	ldr	r1, [r7, #16]
 8006a60:	0148      	lsls	r0, r1, #5
 8006a62:	6979      	ldr	r1, [r7, #20]
 8006a64:	4401      	add	r1, r0
 8006a66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	791b      	ldrb	r3, [r3, #4]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d11f      	bne.n	8006ab6 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006a94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ab4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ad4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	791b      	ldrb	r3, [r3, #4]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d015      	beq.n	8006b0a <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 8139 	beq.w	8006d5a <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	f003 030f 	and.w	r3, r3, #15
 8006af8:	2101      	movs	r1, #1
 8006afa:	fa01 f303 	lsl.w	r3, r1, r3
 8006afe:	6979      	ldr	r1, [r7, #20]
 8006b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b04:	4313      	orrs	r3, r2
 8006b06:	634b      	str	r3, [r1, #52]	; 0x34
 8006b08:	e127      	b.n	8006d5a <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d110      	bne.n	8006b3c <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	e00f      	b.n	8006b5c <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	0151      	lsls	r1, r2, #5
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	440a      	add	r2, r1
 8006b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	68d9      	ldr	r1, [r3, #12]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781a      	ldrb	r2, [r3, #0]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f9a6 	bl	8006ebc <USB_WritePacket>
 8006b70:	e0f3      	b.n	8006d5a <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	0151      	lsls	r1, r2, #5
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	440a      	add	r2, r1
 8006b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b8c:	0cdb      	lsrs	r3, r3, #19
 8006b8e:	04db      	lsls	r3, r3, #19
 8006b90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	0151      	lsls	r1, r2, #5
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bb4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d12f      	bne.n	8006c1c <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be0:	691a      	ldr	r2, [r3, #16]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bea:	6939      	ldr	r1, [r7, #16]
 8006bec:	0148      	lsls	r0, r1, #5
 8006bee:	6979      	ldr	r1, [r7, #20]
 8006bf0:	4401      	add	r1, r0
 8006bf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c18:	6113      	str	r3, [r2, #16]
 8006c1a:	e061      	b.n	8006ce0 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d125      	bne.n	8006c70 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c30:	691a      	ldr	r2, [r3, #16]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c3a:	6939      	ldr	r1, [r7, #16]
 8006c3c:	0148      	lsls	r0, r1, #5
 8006c3e:	6979      	ldr	r1, [r7, #20]
 8006c40:	4401      	add	r1, r0
 8006c42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c46:	4313      	orrs	r3, r2
 8006c48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	0151      	lsls	r1, r2, #5
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	440a      	add	r2, r1
 8006c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c68:	6113      	str	r3, [r2, #16]
 8006c6a:	e039      	b.n	8006ce0 <USB_EPStartXfer+0x3dc>
 8006c6c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	4413      	add	r3, r2
 8006c7a:	1e5a      	subs	r2, r3, #1
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c84:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	89fa      	ldrh	r2, [r7, #14]
 8006c8c:	fb03 f202 	mul.w	r2, r3, r2
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	89fb      	ldrh	r3, [r7, #14]
 8006ca4:	04d9      	lsls	r1, r3, #19
 8006ca6:	4b2f      	ldr	r3, [pc, #188]	; (8006d64 <USB_EPStartXfer+0x460>)
 8006ca8:	400b      	ands	r3, r1
 8006caa:	6939      	ldr	r1, [r7, #16]
 8006cac:	0148      	lsls	r0, r1, #5
 8006cae:	6979      	ldr	r1, [r7, #20]
 8006cb0:	4401      	add	r1, r0
 8006cb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd0:	6939      	ldr	r1, [r7, #16]
 8006cd2:	0148      	lsls	r0, r1, #5
 8006cd4:	6979      	ldr	r1, [r7, #20]
 8006cd6:	4401      	add	r1, r0
 8006cd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	791b      	ldrb	r3, [r3, #4]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d128      	bne.n	8006d3a <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d110      	bne.n	8006d1a <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	e00f      	b.n	8006d3a <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	0151      	lsls	r1, r2, #5
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	440a      	add	r2, r1
 8006d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d38:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	0151      	lsls	r1, r2, #5
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	440a      	add	r2, r1
 8006d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	1ff80000 	.word	0x1ff80000

08006d68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	785b      	ldrb	r3, [r3, #1]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d14a      	bne.n	8006e1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d9e:	f040 8086 	bne.w	8006eae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	7812      	ldrb	r2, [r2, #0]
 8006db6:	0151      	lsls	r1, r2, #5
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	440a      	add	r2, r1
 8006dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	7812      	ldrb	r2, [r2, #0]
 8006dda:	0151      	lsls	r1, r2, #5
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	440a      	add	r2, r1
 8006de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006de8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3301      	adds	r3, #1
 8006dee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f242 7210 	movw	r2, #10000	; 0x2710
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d902      	bls.n	8006e00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	75fb      	strb	r3, [r7, #23]
          break;
 8006dfe:	e056      	b.n	8006eae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e18:	d0e7      	beq.n	8006dea <USB_EPStopXfer+0x82>
 8006e1a:	e048      	b.n	8006eae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e34:	d13b      	bne.n	8006eae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	7812      	ldrb	r2, [r2, #0]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	7812      	ldrb	r2, [r2, #0]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3301      	adds	r3, #1
 8006e82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f242 7210 	movw	r2, #10000	; 0x2710
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d902      	bls.n	8006e94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
          break;
 8006e92:	e00c      	b.n	8006eae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eac:	d0e7      	beq.n	8006e7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b089      	sub	sp, #36	; 0x24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	461a      	mov	r2, r3
 8006eca:	460b      	mov	r3, r1
 8006ecc:	71fb      	strb	r3, [r7, #7]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006eda:	88bb      	ldrh	r3, [r7, #4]
 8006edc:	3303      	adds	r3, #3
 8006ede:	089b      	lsrs	r3, r3, #2
 8006ee0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	e018      	b.n	8006f1a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	031a      	lsls	r2, r3, #12
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	3301      	adds	r3, #1
 8006f00:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	3301      	adds	r3, #1
 8006f06:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	3301      	adds	r3, #1
 8006f12:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	3301      	adds	r3, #1
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d3e2      	bcc.n	8006ee8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3724      	adds	r7, #36	; 0x24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b08b      	sub	sp, #44	; 0x2c
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f46:	88fb      	ldrh	r3, [r7, #6]
 8006f48:	089b      	lsrs	r3, r3, #2
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f4e:	88fb      	ldrh	r3, [r7, #6]
 8006f50:	f003 0303 	and.w	r3, r3, #3
 8006f54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f56:	2300      	movs	r3, #0
 8006f58:	623b      	str	r3, [r7, #32]
 8006f5a:	e014      	b.n	8006f86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	3301      	adds	r3, #1
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	3301      	adds	r3, #1
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	3301      	adds	r3, #1
 8006f84:	623b      	str	r3, [r7, #32]
 8006f86:	6a3a      	ldr	r2, [r7, #32]
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d3e6      	bcc.n	8006f5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f8e:	8bfb      	ldrh	r3, [r7, #30]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01e      	beq.n	8006fd2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f107 0310 	add.w	r3, r7, #16
 8006fa4:	6812      	ldr	r2, [r2, #0]
 8006fa6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	701a      	strb	r2, [r3, #0]
      i++;
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	623b      	str	r3, [r7, #32]
      pDest++;
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006fc6:	8bfb      	ldrh	r3, [r7, #30]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006fcc:	8bfb      	ldrh	r3, [r7, #30]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1ea      	bne.n	8006fa8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	372c      	adds	r7, #44	; 0x2c
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	785b      	ldrb	r3, [r3, #1]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d12c      	bne.n	8007056 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	db12      	blt.n	8007034 <USB_EPSetStall+0x54>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00f      	beq.n	8007034 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	440a      	add	r2, r1
 800702a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007032:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800704e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	e02b      	b.n	80070ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4413      	add	r3, r2
 800705e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	db12      	blt.n	800708e <USB_EPSetStall+0xae>
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00f      	beq.n	800708e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	0151      	lsls	r1, r2, #5
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	440a      	add	r2, r1
 8007084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007088:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800708c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	785b      	ldrb	r3, [r3, #1]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d128      	bne.n	800712a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	0151      	lsls	r1, r2, #5
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	440a      	add	r2, r1
 80070ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	791b      	ldrb	r3, [r3, #4]
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d003      	beq.n	8007108 <USB_EPClearStall+0x4c>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	791b      	ldrb	r3, [r3, #4]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d138      	bne.n	800717a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	0151      	lsls	r1, r2, #5
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	440a      	add	r2, r1
 800711e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	e027      	b.n	800717a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	440a      	add	r2, r1
 8007140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007144:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007148:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	791b      	ldrb	r3, [r3, #4]
 800714e:	2b03      	cmp	r3, #3
 8007150:	d003      	beq.n	800715a <USB_EPClearStall+0x9e>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	791b      	ldrb	r3, [r3, #4]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d10f      	bne.n	800717a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	0151      	lsls	r1, r2, #5
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	440a      	add	r2, r1
 8007170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007178:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80071aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80071bc:	68f9      	ldr	r1, [r7, #12]
 80071be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071c2:	4313      	orrs	r3, r2
 80071c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071ee:	f023 0303 	bic.w	r3, r3, #3
 80071f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007202:	f023 0302 	bic.w	r3, r3, #2
 8007206:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007216:	b480      	push	{r7}
 8007218:	b085      	sub	sp, #20
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007230:	f023 0303 	bic.w	r3, r3, #3
 8007234:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007244:	f043 0302 	orr.w	r3, r3, #2
 8007248:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4013      	ands	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007270:	68fb      	ldr	r3, [r7, #12]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	4013      	ands	r3, r2
 80072a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	0c1b      	lsrs	r3, r3, #16
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	4013      	ands	r3, r2
 80072d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	b29b      	uxth	r3, r3
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80072f6:	78fb      	ldrb	r3, [r7, #3]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	4013      	ands	r3, r2
 8007312:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007314:	68bb      	ldr	r3, [r7, #8]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007322:	b480      	push	{r7}
 8007324:	b087      	sub	sp, #28
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	460b      	mov	r3, r1
 800732c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007344:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007346:	78fb      	ldrb	r3, [r7, #3]
 8007348:	f003 030f 	and.w	r3, r3, #15
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	fa22 f303 	lsr.w	r3, r2, r3
 8007352:	01db      	lsls	r3, r3, #7
 8007354:	b2db      	uxtb	r3, r3
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	4313      	orrs	r3, r2
 800735a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800735c:	78fb      	ldrb	r3, [r7, #3]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	4013      	ands	r3, r2
 800736e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007370:	68bb      	ldr	r3, [r7, #8]
}
 8007372:	4618      	mov	r0, r3
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	f003 0301 	and.w	r3, r3, #1
}
 800738e:	4618      	mov	r0, r3
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800739a:	b480      	push	{r7}
 800739c:	b085      	sub	sp, #20
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80073b8:	f023 0307 	bic.w	r3, r3, #7
 80073bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	333c      	adds	r3, #60	; 0x3c
 80073f2:	3304      	adds	r3, #4
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4a1c      	ldr	r2, [pc, #112]	; (800746c <USB_EP0_OutStart+0x8c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d90a      	bls.n	8007416 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800740c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007410:	d101      	bne.n	8007416 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	e024      	b.n	8007460 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741c:	461a      	mov	r2, r3
 800741e:	2300      	movs	r3, #0
 8007420:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007434:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007444:	f043 0318 	orr.w	r3, r3, #24
 8007448:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007458:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800745c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	4f54300a 	.word	0x4f54300a

08007470 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4a13      	ldr	r2, [pc, #76]	; (80074d4 <USB_CoreReset+0x64>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d901      	bls.n	800748e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e01b      	b.n	80074c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	daf2      	bge.n	800747c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f043 0201 	orr.w	r2, r3, #1
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3301      	adds	r3, #1
 80074aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4a09      	ldr	r2, [pc, #36]	; (80074d4 <USB_CoreReset+0x64>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d901      	bls.n	80074b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e006      	b.n	80074c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d0f0      	beq.n	80074a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	00030d40 	.word	0x00030d40

080074d8 <__NVIC_SetPriority>:
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	6039      	str	r1, [r7, #0]
 80074e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	db0a      	blt.n	8007502 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	490c      	ldr	r1, [pc, #48]	; (8007524 <__NVIC_SetPriority+0x4c>)
 80074f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074f6:	0112      	lsls	r2, r2, #4
 80074f8:	b2d2      	uxtb	r2, r2
 80074fa:	440b      	add	r3, r1
 80074fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007500:	e00a      	b.n	8007518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	b2da      	uxtb	r2, r3
 8007506:	4908      	ldr	r1, [pc, #32]	; (8007528 <__NVIC_SetPriority+0x50>)
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	f003 030f 	and.w	r3, r3, #15
 800750e:	3b04      	subs	r3, #4
 8007510:	0112      	lsls	r2, r2, #4
 8007512:	b2d2      	uxtb	r2, r2
 8007514:	440b      	add	r3, r1
 8007516:	761a      	strb	r2, [r3, #24]
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	e000e100 	.word	0xe000e100
 8007528:	e000ed00 	.word	0xe000ed00

0800752c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007530:	4b05      	ldr	r3, [pc, #20]	; (8007548 <SysTick_Handler+0x1c>)
 8007532:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007534:	f002 f964 	bl	8009800 <xTaskGetSchedulerState>
 8007538:	4603      	mov	r3, r0
 800753a:	2b01      	cmp	r3, #1
 800753c:	d001      	beq.n	8007542 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800753e:	f000 fd9b 	bl	8008078 <xPortSysTickHandler>
  }
}
 8007542:	bf00      	nop
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	e000e010 	.word	0xe000e010

0800754c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007550:	2100      	movs	r1, #0
 8007552:	f06f 0004 	mvn.w	r0, #4
 8007556:	f7ff ffbf 	bl	80074d8 <__NVIC_SetPriority>
#endif
}
 800755a:	bf00      	nop
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007566:	f3ef 8305 	mrs	r3, IPSR
 800756a:	603b      	str	r3, [r7, #0]
  return(result);
 800756c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007572:	f06f 0305 	mvn.w	r3, #5
 8007576:	607b      	str	r3, [r7, #4]
 8007578:	e00c      	b.n	8007594 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800757a:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <osKernelInitialize+0x44>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d105      	bne.n	800758e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007582:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <osKernelInitialize+0x44>)
 8007584:	2201      	movs	r2, #1
 8007586:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007588:	2300      	movs	r3, #0
 800758a:	607b      	str	r3, [r7, #4]
 800758c:	e002      	b.n	8007594 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800758e:	f04f 33ff 	mov.w	r3, #4294967295
 8007592:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007594:	687b      	ldr	r3, [r7, #4]
}
 8007596:	4618      	mov	r0, r3
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	20001e80 	.word	0x20001e80

080075a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ae:	f3ef 8305 	mrs	r3, IPSR
 80075b2:	603b      	str	r3, [r7, #0]
  return(result);
 80075b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80075ba:	f06f 0305 	mvn.w	r3, #5
 80075be:	607b      	str	r3, [r7, #4]
 80075c0:	e010      	b.n	80075e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80075c2:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <osKernelStart+0x48>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d109      	bne.n	80075de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80075ca:	f7ff ffbf 	bl	800754c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80075ce:	4b08      	ldr	r3, [pc, #32]	; (80075f0 <osKernelStart+0x48>)
 80075d0:	2202      	movs	r2, #2
 80075d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80075d4:	f001 fcb8 	bl	8008f48 <vTaskStartScheduler>
      stat = osOK;
 80075d8:	2300      	movs	r3, #0
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	e002      	b.n	80075e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80075de:	f04f 33ff 	mov.w	r3, #4294967295
 80075e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80075e4:	687b      	ldr	r3, [r7, #4]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	20001e80 	.word	0x20001e80

080075f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08e      	sub	sp, #56	; 0x38
 80075f8:	af04      	add	r7, sp, #16
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007600:	2300      	movs	r3, #0
 8007602:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007604:	f3ef 8305 	mrs	r3, IPSR
 8007608:	617b      	str	r3, [r7, #20]
  return(result);
 800760a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800760c:	2b00      	cmp	r3, #0
 800760e:	d17e      	bne.n	800770e <osThreadNew+0x11a>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d07b      	beq.n	800770e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007616:	2380      	movs	r3, #128	; 0x80
 8007618:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800761a:	2318      	movs	r3, #24
 800761c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007622:	f04f 33ff 	mov.w	r3, #4294967295
 8007626:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d045      	beq.n	80076ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <osThreadNew+0x48>
        name = attr->name;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d008      	beq.n	8007662 <osThreadNew+0x6e>
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	2b38      	cmp	r3, #56	; 0x38
 8007654:	d805      	bhi.n	8007662 <osThreadNew+0x6e>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <osThreadNew+0x72>
        return (NULL);
 8007662:	2300      	movs	r3, #0
 8007664:	e054      	b.n	8007710 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	089b      	lsrs	r3, r3, #2
 8007674:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00e      	beq.n	800769c <osThreadNew+0xa8>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	2bbb      	cmp	r3, #187	; 0xbb
 8007684:	d90a      	bls.n	800769c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800768a:	2b00      	cmp	r3, #0
 800768c:	d006      	beq.n	800769c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <osThreadNew+0xa8>
        mem = 1;
 8007696:	2301      	movs	r3, #1
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	e010      	b.n	80076be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10c      	bne.n	80076be <osThreadNew+0xca>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d108      	bne.n	80076be <osThreadNew+0xca>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <osThreadNew+0xca>
          mem = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	61bb      	str	r3, [r7, #24]
 80076b8:	e001      	b.n	80076be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d110      	bne.n	80076e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076cc:	9202      	str	r2, [sp, #8]
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	6a3a      	ldr	r2, [r7, #32]
 80076d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f001 fa48 	bl	8008b70 <xTaskCreateStatic>
 80076e0:	4603      	mov	r3, r0
 80076e2:	613b      	str	r3, [r7, #16]
 80076e4:	e013      	b.n	800770e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d110      	bne.n	800770e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	f107 0310 	add.w	r3, r7, #16
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f001 fa93 	bl	8008c2a <xTaskCreate>
 8007704:	4603      	mov	r3, r0
 8007706:	2b01      	cmp	r3, #1
 8007708:	d001      	beq.n	800770e <osThreadNew+0x11a>
            hTask = NULL;
 800770a:	2300      	movs	r3, #0
 800770c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800770e:	693b      	ldr	r3, [r7, #16]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3728      	adds	r7, #40	; 0x28
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007720:	f3ef 8305 	mrs	r3, IPSR
 8007724:	60bb      	str	r3, [r7, #8]
  return(result);
 8007726:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <osDelay+0x1c>
    stat = osErrorISR;
 800772c:	f06f 0305 	mvn.w	r3, #5
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	e007      	b.n	8007744 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007734:	2300      	movs	r3, #0
 8007736:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <osDelay+0x2c>
      vTaskDelay(ticks);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 fbce 	bl	8008ee0 <vTaskDelay>
    }
  }

  return (stat);
 8007744:	68fb      	ldr	r3, [r7, #12]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4a07      	ldr	r2, [pc, #28]	; (800777c <vApplicationGetIdleTaskMemory+0x2c>)
 8007760:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	4a06      	ldr	r2, [pc, #24]	; (8007780 <vApplicationGetIdleTaskMemory+0x30>)
 8007766:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2280      	movs	r2, #128	; 0x80
 800776c:	601a      	str	r2, [r3, #0]
}
 800776e:	bf00      	nop
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	20001e84 	.word	0x20001e84
 8007780:	20001f40 	.word	0x20001f40

08007784 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4a07      	ldr	r2, [pc, #28]	; (80077b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007794:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	4a06      	ldr	r2, [pc, #24]	; (80077b4 <vApplicationGetTimerTaskMemory+0x30>)
 800779a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077a2:	601a      	str	r2, [r3, #0]
}
 80077a4:	bf00      	nop
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	20002140 	.word	0x20002140
 80077b4:	200021fc 	.word	0x200021fc

080077b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08a      	sub	sp, #40	; 0x28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077c4:	f001 fc30 	bl	8009028 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077c8:	4b5b      	ldr	r3, [pc, #364]	; (8007938 <pvPortMalloc+0x180>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077d0:	f000 f920 	bl	8007a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077d4:	4b59      	ldr	r3, [pc, #356]	; (800793c <pvPortMalloc+0x184>)
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4013      	ands	r3, r2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f040 8093 	bne.w	8007908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d01d      	beq.n	8007824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80077e8:	2208      	movs	r2, #8
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4413      	add	r3, r2
 80077ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d014      	beq.n	8007824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f023 0307 	bic.w	r3, r3, #7
 8007800:	3308      	adds	r3, #8
 8007802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f003 0307 	and.w	r3, r3, #7
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <pvPortMalloc+0x6c>
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	617b      	str	r3, [r7, #20]
}
 8007820:	bf00      	nop
 8007822:	e7fe      	b.n	8007822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d06e      	beq.n	8007908 <pvPortMalloc+0x150>
 800782a:	4b45      	ldr	r3, [pc, #276]	; (8007940 <pvPortMalloc+0x188>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	429a      	cmp	r2, r3
 8007832:	d869      	bhi.n	8007908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007834:	4b43      	ldr	r3, [pc, #268]	; (8007944 <pvPortMalloc+0x18c>)
 8007836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007838:	4b42      	ldr	r3, [pc, #264]	; (8007944 <pvPortMalloc+0x18c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800783e:	e004      	b.n	800784a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	429a      	cmp	r2, r3
 8007852:	d903      	bls.n	800785c <pvPortMalloc+0xa4>
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1f1      	bne.n	8007840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800785c:	4b36      	ldr	r3, [pc, #216]	; (8007938 <pvPortMalloc+0x180>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007862:	429a      	cmp	r2, r3
 8007864:	d050      	beq.n	8007908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2208      	movs	r2, #8
 800786c:	4413      	add	r3, r2
 800786e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	1ad2      	subs	r2, r2, r3
 8007880:	2308      	movs	r3, #8
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	429a      	cmp	r2, r3
 8007886:	d91f      	bls.n	80078c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4413      	add	r3, r2
 800788e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <pvPortMalloc+0xf8>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	613b      	str	r3, [r7, #16]
}
 80078ac:	bf00      	nop
 80078ae:	e7fe      	b.n	80078ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	1ad2      	subs	r2, r2, r3
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078c2:	69b8      	ldr	r0, [r7, #24]
 80078c4:	f000 f908 	bl	8007ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078c8:	4b1d      	ldr	r3, [pc, #116]	; (8007940 <pvPortMalloc+0x188>)
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	4a1b      	ldr	r2, [pc, #108]	; (8007940 <pvPortMalloc+0x188>)
 80078d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078d6:	4b1a      	ldr	r3, [pc, #104]	; (8007940 <pvPortMalloc+0x188>)
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	4b1b      	ldr	r3, [pc, #108]	; (8007948 <pvPortMalloc+0x190>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d203      	bcs.n	80078ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078e2:	4b17      	ldr	r3, [pc, #92]	; (8007940 <pvPortMalloc+0x188>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a18      	ldr	r2, [pc, #96]	; (8007948 <pvPortMalloc+0x190>)
 80078e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	4b13      	ldr	r3, [pc, #76]	; (800793c <pvPortMalloc+0x184>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	431a      	orrs	r2, r3
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078fe:	4b13      	ldr	r3, [pc, #76]	; (800794c <pvPortMalloc+0x194>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3301      	adds	r3, #1
 8007904:	4a11      	ldr	r2, [pc, #68]	; (800794c <pvPortMalloc+0x194>)
 8007906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007908:	f001 fb9c 	bl	8009044 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	f003 0307 	and.w	r3, r3, #7
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <pvPortMalloc+0x174>
	__asm volatile
 8007916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	60fb      	str	r3, [r7, #12]
}
 8007928:	bf00      	nop
 800792a:	e7fe      	b.n	800792a <pvPortMalloc+0x172>
	return pvReturn;
 800792c:	69fb      	ldr	r3, [r7, #28]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3728      	adds	r7, #40	; 0x28
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	200031bc 	.word	0x200031bc
 800793c:	200031d0 	.word	0x200031d0
 8007940:	200031c0 	.word	0x200031c0
 8007944:	200031b4 	.word	0x200031b4
 8007948:	200031c4 	.word	0x200031c4
 800794c:	200031c8 	.word	0x200031c8

08007950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d04d      	beq.n	80079fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007962:	2308      	movs	r3, #8
 8007964:	425b      	negs	r3, r3
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4413      	add	r3, r2
 800796a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	4b24      	ldr	r3, [pc, #144]	; (8007a08 <vPortFree+0xb8>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4013      	ands	r3, r2
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <vPortFree+0x44>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	60fb      	str	r3, [r7, #12]
}
 8007990:	bf00      	nop
 8007992:	e7fe      	b.n	8007992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00a      	beq.n	80079b2 <vPortFree+0x62>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	60bb      	str	r3, [r7, #8]
}
 80079ae:	bf00      	nop
 80079b0:	e7fe      	b.n	80079b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <vPortFree+0xb8>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4013      	ands	r3, r2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01e      	beq.n	80079fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d11a      	bne.n	80079fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	4b0e      	ldr	r3, [pc, #56]	; (8007a08 <vPortFree+0xb8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	43db      	mvns	r3, r3
 80079d2:	401a      	ands	r2, r3
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079d8:	f001 fb26 	bl	8009028 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <vPortFree+0xbc>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4413      	add	r3, r2
 80079e6:	4a09      	ldr	r2, [pc, #36]	; (8007a0c <vPortFree+0xbc>)
 80079e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079ea:	6938      	ldr	r0, [r7, #16]
 80079ec:	f000 f874 	bl	8007ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079f0:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <vPortFree+0xc0>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3301      	adds	r3, #1
 80079f6:	4a06      	ldr	r2, [pc, #24]	; (8007a10 <vPortFree+0xc0>)
 80079f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079fa:	f001 fb23 	bl	8009044 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079fe:	bf00      	nop
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	200031d0 	.word	0x200031d0
 8007a0c:	200031c0 	.word	0x200031c0
 8007a10:	200031cc 	.word	0x200031cc

08007a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a20:	4b27      	ldr	r3, [pc, #156]	; (8007ac0 <prvHeapInit+0xac>)
 8007a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f003 0307 	and.w	r3, r3, #7
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00c      	beq.n	8007a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3307      	adds	r3, #7
 8007a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0307 	bic.w	r3, r3, #7
 8007a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	4a1f      	ldr	r2, [pc, #124]	; (8007ac0 <prvHeapInit+0xac>)
 8007a44:	4413      	add	r3, r2
 8007a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a4c:	4a1d      	ldr	r2, [pc, #116]	; (8007ac4 <prvHeapInit+0xb0>)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a52:	4b1c      	ldr	r3, [pc, #112]	; (8007ac4 <prvHeapInit+0xb0>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a60:	2208      	movs	r2, #8
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	1a9b      	subs	r3, r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 0307 	bic.w	r3, r3, #7
 8007a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4a15      	ldr	r2, [pc, #84]	; (8007ac8 <prvHeapInit+0xb4>)
 8007a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a76:	4b14      	ldr	r3, [pc, #80]	; (8007ac8 <prvHeapInit+0xb4>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a7e:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <prvHeapInit+0xb4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	1ad2      	subs	r2, r2, r3
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a94:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <prvHeapInit+0xb4>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	4a0a      	ldr	r2, [pc, #40]	; (8007acc <prvHeapInit+0xb8>)
 8007aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	4a09      	ldr	r2, [pc, #36]	; (8007ad0 <prvHeapInit+0xbc>)
 8007aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007aac:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <prvHeapInit+0xc0>)
 8007aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ab2:	601a      	str	r2, [r3, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	200025fc 	.word	0x200025fc
 8007ac4:	200031b4 	.word	0x200031b4
 8007ac8:	200031bc 	.word	0x200031bc
 8007acc:	200031c4 	.word	0x200031c4
 8007ad0:	200031c0 	.word	0x200031c0
 8007ad4:	200031d0 	.word	0x200031d0

08007ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ae0:	4b28      	ldr	r3, [pc, #160]	; (8007b84 <prvInsertBlockIntoFreeList+0xac>)
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	e002      	b.n	8007aec <prvInsertBlockIntoFreeList+0x14>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d8f7      	bhi.n	8007ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	4413      	add	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d108      	bne.n	8007b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	441a      	add	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	441a      	add	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d118      	bne.n	8007b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	4b15      	ldr	r3, [pc, #84]	; (8007b88 <prvInsertBlockIntoFreeList+0xb0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d00d      	beq.n	8007b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	441a      	add	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	e008      	b.n	8007b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b56:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <prvInsertBlockIntoFreeList+0xb0>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	e003      	b.n	8007b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d002      	beq.n	8007b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b76:	bf00      	nop
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	200031b4 	.word	0x200031b4
 8007b88:	200031bc 	.word	0x200031bc

08007b8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f103 0208 	add.w	r2, r3, #8
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f103 0208 	add.w	r2, r3, #8
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f103 0208 	add.w	r2, r3, #8
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007be6:	b480      	push	{r7}
 8007be8:	b085      	sub	sp, #20
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	601a      	str	r2, [r3, #0]
}
 8007c22:	bf00      	nop
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d103      	bne.n	8007c4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	e00c      	b.n	8007c68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3308      	adds	r3, #8
 8007c52:	60fb      	str	r3, [r7, #12]
 8007c54:	e002      	b.n	8007c5c <vListInsert+0x2e>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d2f6      	bcs.n	8007c56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	601a      	str	r2, [r3, #0]
}
 8007c94:	bf00      	nop
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6892      	ldr	r2, [r2, #8]
 8007cb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6852      	ldr	r2, [r2, #4]
 8007cc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d103      	bne.n	8007cd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	1e5a      	subs	r2, r3, #1
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3b04      	subs	r3, #4
 8007d04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3b04      	subs	r3, #4
 8007d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f023 0201 	bic.w	r2, r3, #1
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3b04      	subs	r3, #4
 8007d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d24:	4a0c      	ldr	r2, [pc, #48]	; (8007d58 <pxPortInitialiseStack+0x64>)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3b14      	subs	r3, #20
 8007d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3b04      	subs	r3, #4
 8007d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f06f 0202 	mvn.w	r2, #2
 8007d42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	3b20      	subs	r3, #32
 8007d48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	08007d5d 	.word	0x08007d5d

08007d5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d66:	4b12      	ldr	r3, [pc, #72]	; (8007db0 <prvTaskExitError+0x54>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6e:	d00a      	beq.n	8007d86 <prvTaskExitError+0x2a>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	60fb      	str	r3, [r7, #12]
}
 8007d82:	bf00      	nop
 8007d84:	e7fe      	b.n	8007d84 <prvTaskExitError+0x28>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	60bb      	str	r3, [r7, #8]
}
 8007d98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d9a:	bf00      	nop
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0fc      	beq.n	8007d9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007da2:	bf00      	nop
 8007da4:	bf00      	nop
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	20000080 	.word	0x20000080
	...

08007dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007dc0:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <pxCurrentTCBConst2>)
 8007dc2:	6819      	ldr	r1, [r3, #0]
 8007dc4:	6808      	ldr	r0, [r1, #0]
 8007dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dca:	f380 8809 	msr	PSP, r0
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f04f 0000 	mov.w	r0, #0
 8007dd6:	f380 8811 	msr	BASEPRI, r0
 8007dda:	4770      	bx	lr
 8007ddc:	f3af 8000 	nop.w

08007de0 <pxCurrentTCBConst2>:
 8007de0:	2000321c 	.word	0x2000321c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop

08007de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007de8:	4808      	ldr	r0, [pc, #32]	; (8007e0c <prvPortStartFirstTask+0x24>)
 8007dea:	6800      	ldr	r0, [r0, #0]
 8007dec:	6800      	ldr	r0, [r0, #0]
 8007dee:	f380 8808 	msr	MSP, r0
 8007df2:	f04f 0000 	mov.w	r0, #0
 8007df6:	f380 8814 	msr	CONTROL, r0
 8007dfa:	b662      	cpsie	i
 8007dfc:	b661      	cpsie	f
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	df00      	svc	0
 8007e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e0a:	bf00      	nop
 8007e0c:	e000ed08 	.word	0xe000ed08

08007e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e16:	4b46      	ldr	r3, [pc, #280]	; (8007f30 <xPortStartScheduler+0x120>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a46      	ldr	r2, [pc, #280]	; (8007f34 <xPortStartScheduler+0x124>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d10a      	bne.n	8007e36 <xPortStartScheduler+0x26>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	613b      	str	r3, [r7, #16]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e36:	4b3e      	ldr	r3, [pc, #248]	; (8007f30 <xPortStartScheduler+0x120>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a3f      	ldr	r2, [pc, #252]	; (8007f38 <xPortStartScheduler+0x128>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d10a      	bne.n	8007e56 <xPortStartScheduler+0x46>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	60fb      	str	r3, [r7, #12]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e56:	4b39      	ldr	r3, [pc, #228]	; (8007f3c <xPortStartScheduler+0x12c>)
 8007e58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	22ff      	movs	r2, #255	; 0xff
 8007e66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	4b31      	ldr	r3, [pc, #196]	; (8007f40 <xPortStartScheduler+0x130>)
 8007e7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e7e:	4b31      	ldr	r3, [pc, #196]	; (8007f44 <xPortStartScheduler+0x134>)
 8007e80:	2207      	movs	r2, #7
 8007e82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e84:	e009      	b.n	8007e9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e86:	4b2f      	ldr	r3, [pc, #188]	; (8007f44 <xPortStartScheduler+0x134>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	4a2d      	ldr	r2, [pc, #180]	; (8007f44 <xPortStartScheduler+0x134>)
 8007e8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e90:	78fb      	ldrb	r3, [r7, #3]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea2:	2b80      	cmp	r3, #128	; 0x80
 8007ea4:	d0ef      	beq.n	8007e86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ea6:	4b27      	ldr	r3, [pc, #156]	; (8007f44 <xPortStartScheduler+0x134>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f1c3 0307 	rsb	r3, r3, #7
 8007eae:	2b04      	cmp	r3, #4
 8007eb0:	d00a      	beq.n	8007ec8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	60bb      	str	r3, [r7, #8]
}
 8007ec4:	bf00      	nop
 8007ec6:	e7fe      	b.n	8007ec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ec8:	4b1e      	ldr	r3, [pc, #120]	; (8007f44 <xPortStartScheduler+0x134>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	4a1d      	ldr	r2, [pc, #116]	; (8007f44 <xPortStartScheduler+0x134>)
 8007ed0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ed2:	4b1c      	ldr	r3, [pc, #112]	; (8007f44 <xPortStartScheduler+0x134>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eda:	4a1a      	ldr	r2, [pc, #104]	; (8007f44 <xPortStartScheduler+0x134>)
 8007edc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ee6:	4b18      	ldr	r3, [pc, #96]	; (8007f48 <xPortStartScheduler+0x138>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a17      	ldr	r2, [pc, #92]	; (8007f48 <xPortStartScheduler+0x138>)
 8007eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ef2:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <xPortStartScheduler+0x138>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a14      	ldr	r2, [pc, #80]	; (8007f48 <xPortStartScheduler+0x138>)
 8007ef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007efc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007efe:	f000 f8dd 	bl	80080bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f02:	4b12      	ldr	r3, [pc, #72]	; (8007f4c <xPortStartScheduler+0x13c>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f08:	f000 f8fc 	bl	8008104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f0c:	4b10      	ldr	r3, [pc, #64]	; (8007f50 <xPortStartScheduler+0x140>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a0f      	ldr	r2, [pc, #60]	; (8007f50 <xPortStartScheduler+0x140>)
 8007f12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f18:	f7ff ff66 	bl	8007de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f1c:	f001 f9fa 	bl	8009314 <vTaskSwitchContext>
	prvTaskExitError();
 8007f20:	f7ff ff1c 	bl	8007d5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	e000ed00 	.word	0xe000ed00
 8007f34:	410fc271 	.word	0x410fc271
 8007f38:	410fc270 	.word	0x410fc270
 8007f3c:	e000e400 	.word	0xe000e400
 8007f40:	200031d4 	.word	0x200031d4
 8007f44:	200031d8 	.word	0x200031d8
 8007f48:	e000ed20 	.word	0xe000ed20
 8007f4c:	20000080 	.word	0x20000080
 8007f50:	e000ef34 	.word	0xe000ef34

08007f54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	607b      	str	r3, [r7, #4]
}
 8007f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f6e:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <vPortEnterCritical+0x58>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3301      	adds	r3, #1
 8007f74:	4a0d      	ldr	r2, [pc, #52]	; (8007fac <vPortEnterCritical+0x58>)
 8007f76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f78:	4b0c      	ldr	r3, [pc, #48]	; (8007fac <vPortEnterCritical+0x58>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d10f      	bne.n	8007fa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f80:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <vPortEnterCritical+0x5c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	603b      	str	r3, [r7, #0]
}
 8007f9c:	bf00      	nop
 8007f9e:	e7fe      	b.n	8007f9e <vPortEnterCritical+0x4a>
	}
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	20000080 	.word	0x20000080
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fba:	4b12      	ldr	r3, [pc, #72]	; (8008004 <vPortExitCritical+0x50>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <vPortExitCritical+0x24>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	607b      	str	r3, [r7, #4]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fd8:	4b0a      	ldr	r3, [pc, #40]	; (8008004 <vPortExitCritical+0x50>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	4a09      	ldr	r2, [pc, #36]	; (8008004 <vPortExitCritical+0x50>)
 8007fe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fe2:	4b08      	ldr	r3, [pc, #32]	; (8008004 <vPortExitCritical+0x50>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d105      	bne.n	8007ff6 <vPortExitCritical+0x42>
 8007fea:	2300      	movs	r3, #0
 8007fec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	f383 8811 	msr	BASEPRI, r3
}
 8007ff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	20000080 	.word	0x20000080
	...

08008010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008010:	f3ef 8009 	mrs	r0, PSP
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	4b15      	ldr	r3, [pc, #84]	; (8008070 <pxCurrentTCBConst>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	f01e 0f10 	tst.w	lr, #16
 8008020:	bf08      	it	eq
 8008022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802a:	6010      	str	r0, [r2, #0]
 800802c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008034:	f380 8811 	msr	BASEPRI, r0
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f001 f968 	bl	8009314 <vTaskSwitchContext>
 8008044:	f04f 0000 	mov.w	r0, #0
 8008048:	f380 8811 	msr	BASEPRI, r0
 800804c:	bc09      	pop	{r0, r3}
 800804e:	6819      	ldr	r1, [r3, #0]
 8008050:	6808      	ldr	r0, [r1, #0]
 8008052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008056:	f01e 0f10 	tst.w	lr, #16
 800805a:	bf08      	it	eq
 800805c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008060:	f380 8809 	msr	PSP, r0
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	f3af 8000 	nop.w

08008070 <pxCurrentTCBConst>:
 8008070:	2000321c 	.word	0x2000321c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop

08008078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	607b      	str	r3, [r7, #4]
}
 8008090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008092:	f001 f885 	bl	80091a0 <xTaskIncrementTick>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800809c:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <xPortSysTickHandler+0x40>)
 800809e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	2300      	movs	r3, #0
 80080a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f383 8811 	msr	BASEPRI, r3
}
 80080ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080c0:	4b0b      	ldr	r3, [pc, #44]	; (80080f0 <vPortSetupTimerInterrupt+0x34>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080c6:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <vPortSetupTimerInterrupt+0x38>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <vPortSetupTimerInterrupt+0x3c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <vPortSetupTimerInterrupt+0x40>)
 80080d2:	fba2 2303 	umull	r2, r3, r2, r3
 80080d6:	099b      	lsrs	r3, r3, #6
 80080d8:	4a09      	ldr	r2, [pc, #36]	; (8008100 <vPortSetupTimerInterrupt+0x44>)
 80080da:	3b01      	subs	r3, #1
 80080dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080de:	4b04      	ldr	r3, [pc, #16]	; (80080f0 <vPortSetupTimerInterrupt+0x34>)
 80080e0:	2207      	movs	r2, #7
 80080e2:	601a      	str	r2, [r3, #0]
}
 80080e4:	bf00      	nop
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	e000e010 	.word	0xe000e010
 80080f4:	e000e018 	.word	0xe000e018
 80080f8:	20000074 	.word	0x20000074
 80080fc:	10624dd3 	.word	0x10624dd3
 8008100:	e000e014 	.word	0xe000e014

08008104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008114 <vPortEnableVFP+0x10>
 8008108:	6801      	ldr	r1, [r0, #0]
 800810a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800810e:	6001      	str	r1, [r0, #0]
 8008110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008112:	bf00      	nop
 8008114:	e000ed88 	.word	0xe000ed88

08008118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800811e:	f3ef 8305 	mrs	r3, IPSR
 8008122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b0f      	cmp	r3, #15
 8008128:	d914      	bls.n	8008154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800812a:	4a17      	ldr	r2, [pc, #92]	; (8008188 <vPortValidateInterruptPriority+0x70>)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4413      	add	r3, r2
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008134:	4b15      	ldr	r3, [pc, #84]	; (800818c <vPortValidateInterruptPriority+0x74>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	7afa      	ldrb	r2, [r7, #11]
 800813a:	429a      	cmp	r2, r3
 800813c:	d20a      	bcs.n	8008154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	607b      	str	r3, [r7, #4]
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008154:	4b0e      	ldr	r3, [pc, #56]	; (8008190 <vPortValidateInterruptPriority+0x78>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800815c:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <vPortValidateInterruptPriority+0x7c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	429a      	cmp	r2, r3
 8008162:	d90a      	bls.n	800817a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	603b      	str	r3, [r7, #0]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <vPortValidateInterruptPriority+0x60>
	}
 800817a:	bf00      	nop
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	e000e3f0 	.word	0xe000e3f0
 800818c:	200031d4 	.word	0x200031d4
 8008190:	e000ed0c 	.word	0xe000ed0c
 8008194:	200031d8 	.word	0x200031d8

08008198 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10a      	bne.n	80081c2 <xQueueGenericReset+0x2a>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	60bb      	str	r3, [r7, #8]
}
 80081be:	bf00      	nop
 80081c0:	e7fe      	b.n	80081c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80081c2:	f7ff fec7 	bl	8007f54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ce:	68f9      	ldr	r1, [r7, #12]
 80081d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081d2:	fb01 f303 	mul.w	r3, r1, r3
 80081d6:	441a      	add	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f2:	3b01      	subs	r3, #1
 80081f4:	68f9      	ldr	r1, [r7, #12]
 80081f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081f8:	fb01 f303 	mul.w	r3, r1, r3
 80081fc:	441a      	add	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	22ff      	movs	r2, #255	; 0xff
 8008206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	22ff      	movs	r2, #255	; 0xff
 800820e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d114      	bne.n	8008242 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01a      	beq.n	8008256 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3310      	adds	r3, #16
 8008224:	4618      	mov	r0, r3
 8008226:	f001 f929 	bl	800947c <xTaskRemoveFromEventList>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d012      	beq.n	8008256 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008230:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <xQueueGenericReset+0xcc>)
 8008232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	e009      	b.n	8008256 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3310      	adds	r3, #16
 8008246:	4618      	mov	r0, r3
 8008248:	f7ff fca0 	bl	8007b8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3324      	adds	r3, #36	; 0x24
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fc9b 	bl	8007b8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008256:	f7ff fead 	bl	8007fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800825a:	2301      	movs	r3, #1
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	e000ed04 	.word	0xe000ed04

08008268 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08e      	sub	sp, #56	; 0x38
 800826c:	af02      	add	r7, sp, #8
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10a      	bne.n	8008292 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10a      	bne.n	80082ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082aa:	bf00      	nop
 80082ac:	e7fe      	b.n	80082ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <xQueueGenericCreateStatic+0x52>
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <xQueueGenericCreateStatic+0x56>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e000      	b.n	80082c0 <xQueueGenericCreateStatic+0x58>
 80082be:	2300      	movs	r3, #0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10a      	bne.n	80082da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	623b      	str	r3, [r7, #32]
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d102      	bne.n	80082e6 <xQueueGenericCreateStatic+0x7e>
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <xQueueGenericCreateStatic+0x82>
 80082e6:	2301      	movs	r3, #1
 80082e8:	e000      	b.n	80082ec <xQueueGenericCreateStatic+0x84>
 80082ea:	2300      	movs	r3, #0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	61fb      	str	r3, [r7, #28]
}
 8008302:	bf00      	nop
 8008304:	e7fe      	b.n	8008304 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008306:	2350      	movs	r3, #80	; 0x50
 8008308:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b50      	cmp	r3, #80	; 0x50
 800830e:	d00a      	beq.n	8008326 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	61bb      	str	r3, [r7, #24]
}
 8008322:	bf00      	nop
 8008324:	e7fe      	b.n	8008324 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008326:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800832c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00d      	beq.n	800834e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800833a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800833e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	4613      	mov	r3, r2
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	68b9      	ldr	r1, [r7, #8]
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 f805 	bl	8008358 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008350:	4618      	mov	r0, r3
 8008352:	3730      	adds	r7, #48	; 0x30
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d103      	bne.n	8008374 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	e002      	b.n	800837a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008386:	2101      	movs	r1, #1
 8008388:	69b8      	ldr	r0, [r7, #24]
 800838a:	f7ff ff05 	bl	8008198 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	78fa      	ldrb	r2, [r7, #3]
 8008392:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b08e      	sub	sp, #56	; 0x38
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083ae:	2300      	movs	r3, #0
 80083b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10a      	bne.n	80083d2 <xQueueGenericSend+0x32>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083ce:	bf00      	nop
 80083d0:	e7fe      	b.n	80083d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d103      	bne.n	80083e0 <xQueueGenericSend+0x40>
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <xQueueGenericSend+0x44>
 80083e0:	2301      	movs	r3, #1
 80083e2:	e000      	b.n	80083e6 <xQueueGenericSend+0x46>
 80083e4:	2300      	movs	r3, #0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10a      	bne.n	8008400 <xQueueGenericSend+0x60>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083fc:	bf00      	nop
 80083fe:	e7fe      	b.n	80083fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2b02      	cmp	r3, #2
 8008404:	d103      	bne.n	800840e <xQueueGenericSend+0x6e>
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840a:	2b01      	cmp	r3, #1
 800840c:	d101      	bne.n	8008412 <xQueueGenericSend+0x72>
 800840e:	2301      	movs	r3, #1
 8008410:	e000      	b.n	8008414 <xQueueGenericSend+0x74>
 8008412:	2300      	movs	r3, #0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <xQueueGenericSend+0x8e>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	623b      	str	r3, [r7, #32]
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800842e:	f001 f9e7 	bl	8009800 <xTaskGetSchedulerState>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <xQueueGenericSend+0x9e>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <xQueueGenericSend+0xa2>
 800843e:	2301      	movs	r3, #1
 8008440:	e000      	b.n	8008444 <xQueueGenericSend+0xa4>
 8008442:	2300      	movs	r3, #0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10a      	bne.n	800845e <xQueueGenericSend+0xbe>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	61fb      	str	r3, [r7, #28]
}
 800845a:	bf00      	nop
 800845c:	e7fe      	b.n	800845c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800845e:	f7ff fd79 	bl	8007f54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846a:	429a      	cmp	r2, r3
 800846c:	d302      	bcc.n	8008474 <xQueueGenericSend+0xd4>
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b02      	cmp	r3, #2
 8008472:	d129      	bne.n	80084c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	68b9      	ldr	r1, [r7, #8]
 8008478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800847a:	f000 fa0b 	bl	8008894 <prvCopyDataToQueue>
 800847e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	2b00      	cmp	r3, #0
 8008486:	d010      	beq.n	80084aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	3324      	adds	r3, #36	; 0x24
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fff5 	bl	800947c <xTaskRemoveFromEventList>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d013      	beq.n	80084c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008498:	4b3f      	ldr	r3, [pc, #252]	; (8008598 <xQueueGenericSend+0x1f8>)
 800849a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	e00a      	b.n	80084c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d007      	beq.n	80084c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084b0:	4b39      	ldr	r3, [pc, #228]	; (8008598 <xQueueGenericSend+0x1f8>)
 80084b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084c0:	f7ff fd78 	bl	8007fb4 <vPortExitCritical>
				return pdPASS;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e063      	b.n	8008590 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d103      	bne.n	80084d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084ce:	f7ff fd71 	bl	8007fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084d2:	2300      	movs	r3, #0
 80084d4:	e05c      	b.n	8008590 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d106      	bne.n	80084ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084dc:	f107 0314 	add.w	r3, r7, #20
 80084e0:	4618      	mov	r0, r3
 80084e2:	f001 f82f 	bl	8009544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084e6:	2301      	movs	r3, #1
 80084e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084ea:	f7ff fd63 	bl	8007fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084ee:	f000 fd9b 	bl	8009028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084f2:	f7ff fd2f 	bl	8007f54 <vPortEnterCritical>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084fc:	b25b      	sxtb	r3, r3
 80084fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008502:	d103      	bne.n	800850c <xQueueGenericSend+0x16c>
 8008504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008512:	b25b      	sxtb	r3, r3
 8008514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008518:	d103      	bne.n	8008522 <xQueueGenericSend+0x182>
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008522:	f7ff fd47 	bl	8007fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008526:	1d3a      	adds	r2, r7, #4
 8008528:	f107 0314 	add.w	r3, r7, #20
 800852c:	4611      	mov	r1, r2
 800852e:	4618      	mov	r0, r3
 8008530:	f001 f81e 	bl	8009570 <xTaskCheckForTimeOut>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d124      	bne.n	8008584 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800853a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800853c:	f000 faa2 	bl	8008a84 <prvIsQueueFull>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d018      	beq.n	8008578 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	3310      	adds	r3, #16
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	4611      	mov	r1, r2
 800854e:	4618      	mov	r0, r3
 8008550:	f000 ff44 	bl	80093dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008556:	f000 fa2d 	bl	80089b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800855a:	f000 fd73 	bl	8009044 <xTaskResumeAll>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	f47f af7c 	bne.w	800845e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008566:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <xQueueGenericSend+0x1f8>)
 8008568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	e772      	b.n	800845e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800857a:	f000 fa1b 	bl	80089b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800857e:	f000 fd61 	bl	8009044 <xTaskResumeAll>
 8008582:	e76c      	b.n	800845e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008586:	f000 fa15 	bl	80089b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800858a:	f000 fd5b 	bl	8009044 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800858e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008590:	4618      	mov	r0, r3
 8008592:	3738      	adds	r7, #56	; 0x38
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b090      	sub	sp, #64	; 0x40
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10a      	bne.n	80085ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085c6:	bf00      	nop
 80085c8:	e7fe      	b.n	80085c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d103      	bne.n	80085d8 <xQueueGenericSendFromISR+0x3c>
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <xQueueGenericSendFromISR+0x40>
 80085d8:	2301      	movs	r3, #1
 80085da:	e000      	b.n	80085de <xQueueGenericSendFromISR+0x42>
 80085dc:	2300      	movs	r3, #0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10a      	bne.n	80085f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085f4:	bf00      	nop
 80085f6:	e7fe      	b.n	80085f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d103      	bne.n	8008606 <xQueueGenericSendFromISR+0x6a>
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008602:	2b01      	cmp	r3, #1
 8008604:	d101      	bne.n	800860a <xQueueGenericSendFromISR+0x6e>
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <xQueueGenericSendFromISR+0x70>
 800860a:	2300      	movs	r3, #0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	623b      	str	r3, [r7, #32]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008626:	f7ff fd77 	bl	8008118 <vPortValidateInterruptPriority>
	__asm volatile
 800862a:	f3ef 8211 	mrs	r2, BASEPRI
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	61fa      	str	r2, [r7, #28]
 8008640:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008642:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008644:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864e:	429a      	cmp	r2, r3
 8008650:	d302      	bcc.n	8008658 <xQueueGenericSendFromISR+0xbc>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b02      	cmp	r3, #2
 8008656:	d12f      	bne.n	80086b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800865e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008666:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	68b9      	ldr	r1, [r7, #8]
 800866c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800866e:	f000 f911 	bl	8008894 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008672:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867a:	d112      	bne.n	80086a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800867c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	2b00      	cmp	r3, #0
 8008682:	d016      	beq.n	80086b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008686:	3324      	adds	r3, #36	; 0x24
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fef7 	bl	800947c <xTaskRemoveFromEventList>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00e      	beq.n	80086b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00b      	beq.n	80086b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	e007      	b.n	80086b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80086a6:	3301      	adds	r3, #1
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	b25a      	sxtb	r2, r3
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80086b2:	2301      	movs	r3, #1
 80086b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80086b6:	e001      	b.n	80086bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086b8:	2300      	movs	r3, #0
 80086ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086be:	617b      	str	r3, [r7, #20]
	__asm volatile
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f383 8811 	msr	BASEPRI, r3
}
 80086c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3740      	adds	r7, #64	; 0x40
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b08c      	sub	sp, #48	; 0x30
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086e0:	2300      	movs	r3, #0
 80086e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10a      	bne.n	8008704 <xQueueReceive+0x30>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	623b      	str	r3, [r7, #32]
}
 8008700:	bf00      	nop
 8008702:	e7fe      	b.n	8008702 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d103      	bne.n	8008712 <xQueueReceive+0x3e>
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <xQueueReceive+0x42>
 8008712:	2301      	movs	r3, #1
 8008714:	e000      	b.n	8008718 <xQueueReceive+0x44>
 8008716:	2300      	movs	r3, #0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10a      	bne.n	8008732 <xQueueReceive+0x5e>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	61fb      	str	r3, [r7, #28]
}
 800872e:	bf00      	nop
 8008730:	e7fe      	b.n	8008730 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008732:	f001 f865 	bl	8009800 <xTaskGetSchedulerState>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d102      	bne.n	8008742 <xQueueReceive+0x6e>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <xQueueReceive+0x72>
 8008742:	2301      	movs	r3, #1
 8008744:	e000      	b.n	8008748 <xQueueReceive+0x74>
 8008746:	2300      	movs	r3, #0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <xQueueReceive+0x8e>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	61bb      	str	r3, [r7, #24]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008762:	f7ff fbf7 	bl	8007f54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	2b00      	cmp	r3, #0
 8008770:	d01f      	beq.n	80087b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008776:	f000 f8f7 	bl	8008968 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	1e5a      	subs	r2, r3, #1
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00f      	beq.n	80087aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878c:	3310      	adds	r3, #16
 800878e:	4618      	mov	r0, r3
 8008790:	f000 fe74 	bl	800947c <xTaskRemoveFromEventList>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d007      	beq.n	80087aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800879a:	4b3d      	ldr	r3, [pc, #244]	; (8008890 <xQueueReceive+0x1bc>)
 800879c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087aa:	f7ff fc03 	bl	8007fb4 <vPortExitCritical>
				return pdPASS;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e069      	b.n	8008886 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d103      	bne.n	80087c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087b8:	f7ff fbfc 	bl	8007fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087bc:	2300      	movs	r3, #0
 80087be:	e062      	b.n	8008886 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d106      	bne.n	80087d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087c6:	f107 0310 	add.w	r3, r7, #16
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 feba 	bl	8009544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087d0:	2301      	movs	r3, #1
 80087d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087d4:	f7ff fbee 	bl	8007fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087d8:	f000 fc26 	bl	8009028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087dc:	f7ff fbba 	bl	8007f54 <vPortEnterCritical>
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087e6:	b25b      	sxtb	r3, r3
 80087e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ec:	d103      	bne.n	80087f6 <xQueueReceive+0x122>
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087fc:	b25b      	sxtb	r3, r3
 80087fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008802:	d103      	bne.n	800880c <xQueueReceive+0x138>
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	2200      	movs	r2, #0
 8008808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800880c:	f7ff fbd2 	bl	8007fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008810:	1d3a      	adds	r2, r7, #4
 8008812:	f107 0310 	add.w	r3, r7, #16
 8008816:	4611      	mov	r1, r2
 8008818:	4618      	mov	r0, r3
 800881a:	f000 fea9 	bl	8009570 <xTaskCheckForTimeOut>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d123      	bne.n	800886c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008826:	f000 f917 	bl	8008a58 <prvIsQueueEmpty>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d017      	beq.n	8008860 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	3324      	adds	r3, #36	; 0x24
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	4611      	mov	r1, r2
 8008838:	4618      	mov	r0, r3
 800883a:	f000 fdcf 	bl	80093dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800883e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008840:	f000 f8b8 	bl	80089b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008844:	f000 fbfe 	bl	8009044 <xTaskResumeAll>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d189      	bne.n	8008762 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800884e:	4b10      	ldr	r3, [pc, #64]	; (8008890 <xQueueReceive+0x1bc>)
 8008850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	e780      	b.n	8008762 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008862:	f000 f8a7 	bl	80089b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008866:	f000 fbed 	bl	8009044 <xTaskResumeAll>
 800886a:	e77a      	b.n	8008762 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800886c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800886e:	f000 f8a1 	bl	80089b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008872:	f000 fbe7 	bl	8009044 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008878:	f000 f8ee 	bl	8008a58 <prvIsQueueEmpty>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	f43f af6f 	beq.w	8008762 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008884:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008886:	4618      	mov	r0, r3
 8008888:	3730      	adds	r7, #48	; 0x30
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	e000ed04 	.word	0xe000ed04

08008894 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088a0:	2300      	movs	r3, #0
 80088a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10d      	bne.n	80088ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d14d      	bne.n	8008956 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 ffbc 	bl	800983c <xTaskPriorityDisinherit>
 80088c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	609a      	str	r2, [r3, #8]
 80088cc:	e043      	b.n	8008956 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d119      	bne.n	8008908 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6858      	ldr	r0, [r3, #4]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088dc:	461a      	mov	r2, r3
 80088de:	68b9      	ldr	r1, [r7, #8]
 80088e0:	f003 fb92 	bl	800c008 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	441a      	add	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d32b      	bcc.n	8008956 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	605a      	str	r2, [r3, #4]
 8008906:	e026      	b.n	8008956 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	68d8      	ldr	r0, [r3, #12]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008910:	461a      	mov	r2, r3
 8008912:	68b9      	ldr	r1, [r7, #8]
 8008914:	f003 fb78 	bl	800c008 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008920:	425b      	negs	r3, r3
 8008922:	441a      	add	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	429a      	cmp	r2, r3
 8008932:	d207      	bcs.n	8008944 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893c:	425b      	negs	r3, r3
 800893e:	441a      	add	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b02      	cmp	r3, #2
 8008948:	d105      	bne.n	8008956 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d002      	beq.n	8008956 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	3b01      	subs	r3, #1
 8008954:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800895e:	697b      	ldr	r3, [r7, #20]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008976:	2b00      	cmp	r3, #0
 8008978:	d018      	beq.n	80089ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68da      	ldr	r2, [r3, #12]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008982:	441a      	add	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	429a      	cmp	r2, r3
 8008992:	d303      	bcc.n	800899c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	68d9      	ldr	r1, [r3, #12]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	461a      	mov	r2, r3
 80089a6:	6838      	ldr	r0, [r7, #0]
 80089a8:	f003 fb2e 	bl	800c008 <memcpy>
	}
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089bc:	f7ff faca 	bl	8007f54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089c8:	e011      	b.n	80089ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d012      	beq.n	80089f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	3324      	adds	r3, #36	; 0x24
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fd50 	bl	800947c <xTaskRemoveFromEventList>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089e2:	f000 fe27 	bl	8009634 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	dce9      	bgt.n	80089ca <prvUnlockQueue+0x16>
 80089f6:	e000      	b.n	80089fa <prvUnlockQueue+0x46>
					break;
 80089f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	22ff      	movs	r2, #255	; 0xff
 80089fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a02:	f7ff fad7 	bl	8007fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a06:	f7ff faa5 	bl	8007f54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a12:	e011      	b.n	8008a38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d012      	beq.n	8008a42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3310      	adds	r3, #16
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 fd2b 	bl	800947c <xTaskRemoveFromEventList>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a2c:	f000 fe02 	bl	8009634 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dce9      	bgt.n	8008a14 <prvUnlockQueue+0x60>
 8008a40:	e000      	b.n	8008a44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	22ff      	movs	r2, #255	; 0xff
 8008a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a4c:	f7ff fab2 	bl	8007fb4 <vPortExitCritical>
}
 8008a50:	bf00      	nop
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a60:	f7ff fa78 	bl	8007f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d102      	bne.n	8008a72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	e001      	b.n	8008a76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a76:	f7ff fa9d 	bl	8007fb4 <vPortExitCritical>

	return xReturn;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a8c:	f7ff fa62 	bl	8007f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d102      	bne.n	8008aa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	e001      	b.n	8008aa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008aa6:	f7ff fa85 	bl	8007fb4 <vPortExitCritical>

	return xReturn;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60fb      	str	r3, [r7, #12]
 8008ac2:	e014      	b.n	8008aee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ac4:	4a0f      	ldr	r2, [pc, #60]	; (8008b04 <vQueueAddToRegistry+0x50>)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10b      	bne.n	8008ae8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ad0:	490c      	ldr	r1, [pc, #48]	; (8008b04 <vQueueAddToRegistry+0x50>)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ada:	4a0a      	ldr	r2, [pc, #40]	; (8008b04 <vQueueAddToRegistry+0x50>)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	00db      	lsls	r3, r3, #3
 8008ae0:	4413      	add	r3, r2
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ae6:	e006      	b.n	8008af6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3301      	adds	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b07      	cmp	r3, #7
 8008af2:	d9e7      	bls.n	8008ac4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	200031dc 	.word	0x200031dc

08008b08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b18:	f7ff fa1c 	bl	8007f54 <vPortEnterCritical>
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b22:	b25b      	sxtb	r3, r3
 8008b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b28:	d103      	bne.n	8008b32 <vQueueWaitForMessageRestricted+0x2a>
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b38:	b25b      	sxtb	r3, r3
 8008b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3e:	d103      	bne.n	8008b48 <vQueueWaitForMessageRestricted+0x40>
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b48:	f7ff fa34 	bl	8007fb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	3324      	adds	r3, #36	; 0x24
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	68b9      	ldr	r1, [r7, #8]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fc61 	bl	8009424 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b62:	6978      	ldr	r0, [r7, #20]
 8008b64:	f7ff ff26 	bl	80089b4 <prvUnlockQueue>
	}
 8008b68:	bf00      	nop
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08e      	sub	sp, #56	; 0x38
 8008b74:	af04      	add	r7, sp, #16
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
 8008b7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	623b      	str	r3, [r7, #32]
}
 8008b96:	bf00      	nop
 8008b98:	e7fe      	b.n	8008b98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10a      	bne.n	8008bb6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	61fb      	str	r3, [r7, #28]
}
 8008bb2:	bf00      	nop
 8008bb4:	e7fe      	b.n	8008bb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008bb6:	23bc      	movs	r3, #188	; 0xbc
 8008bb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	2bbc      	cmp	r3, #188	; 0xbc
 8008bbe:	d00a      	beq.n	8008bd6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	61bb      	str	r3, [r7, #24]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008bd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d01e      	beq.n	8008c1c <xTaskCreateStatic+0xac>
 8008bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d01b      	beq.n	8008c1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	9303      	str	r3, [sp, #12]
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	9302      	str	r3, [sp, #8]
 8008bfe:	f107 0314 	add.w	r3, r7, #20
 8008c02:	9301      	str	r3, [sp, #4]
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	68b9      	ldr	r1, [r7, #8]
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f000 f850 	bl	8008cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c16:	f000 f8f3 	bl	8008e00 <prvAddNewTaskToReadyList>
 8008c1a:	e001      	b.n	8008c20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c20:	697b      	ldr	r3, [r7, #20]
	}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3728      	adds	r7, #40	; 0x28
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b08c      	sub	sp, #48	; 0x30
 8008c2e:	af04      	add	r7, sp, #16
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	603b      	str	r3, [r7, #0]
 8008c36:	4613      	mov	r3, r2
 8008c38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c3a:	88fb      	ldrh	r3, [r7, #6]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fe fdba 	bl	80077b8 <pvPortMalloc>
 8008c44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00e      	beq.n	8008c6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c4c:	20bc      	movs	r0, #188	; 0xbc
 8008c4e:	f7fe fdb3 	bl	80077b8 <pvPortMalloc>
 8008c52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8008c60:	e005      	b.n	8008c6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c62:	6978      	ldr	r0, [r7, #20]
 8008c64:	f7fe fe74 	bl	8007950 <vPortFree>
 8008c68:	e001      	b.n	8008c6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d017      	beq.n	8008ca4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c7c:	88fa      	ldrh	r2, [r7, #6]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	9303      	str	r3, [sp, #12]
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	9302      	str	r3, [sp, #8]
 8008c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	68b9      	ldr	r1, [r7, #8]
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f80e 	bl	8008cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c98:	69f8      	ldr	r0, [r7, #28]
 8008c9a:	f000 f8b1 	bl	8008e00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	61bb      	str	r3, [r7, #24]
 8008ca2:	e002      	b.n	8008caa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008caa:	69bb      	ldr	r3, [r7, #24]
	}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3720      	adds	r7, #32
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	461a      	mov	r2, r3
 8008ccc:	21a5      	movs	r1, #165	; 0xa5
 8008cce:	f003 f9a9 	bl	800c024 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	f023 0307 	bic.w	r3, r3, #7
 8008cea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	f003 0307 	and.w	r3, r3, #7
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00a      	beq.n	8008d0c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	617b      	str	r3, [r7, #20]
}
 8008d08:	bf00      	nop
 8008d0a:	e7fe      	b.n	8008d0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01f      	beq.n	8008d52 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d12:	2300      	movs	r3, #0
 8008d14:	61fb      	str	r3, [r7, #28]
 8008d16:	e012      	b.n	8008d3e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	7819      	ldrb	r1, [r3, #0]
 8008d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	4413      	add	r3, r2
 8008d26:	3334      	adds	r3, #52	; 0x34
 8008d28:	460a      	mov	r2, r1
 8008d2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	4413      	add	r3, r2
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d006      	beq.n	8008d46 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	61fb      	str	r3, [r7, #28]
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	2b0f      	cmp	r3, #15
 8008d42:	d9e9      	bls.n	8008d18 <prvInitialiseNewTask+0x64>
 8008d44:	e000      	b.n	8008d48 <prvInitialiseNewTask+0x94>
			{
				break;
 8008d46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d50:	e003      	b.n	8008d5a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	2b37      	cmp	r3, #55	; 0x37
 8008d5e:	d901      	bls.n	8008d64 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d60:	2337      	movs	r3, #55	; 0x37
 8008d62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d72:	2200      	movs	r2, #0
 8008d74:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	3304      	adds	r3, #4
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe ff26 	bl	8007bcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	3318      	adds	r3, #24
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fe ff21 	bl	8007bcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da2:	2200      	movs	r2, #0
 8008da4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db2:	3354      	adds	r3, #84	; 0x54
 8008db4:	2260      	movs	r2, #96	; 0x60
 8008db6:	2100      	movs	r1, #0
 8008db8:	4618      	mov	r0, r3
 8008dba:	f003 f933 	bl	800c024 <memset>
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	4a0c      	ldr	r2, [pc, #48]	; (8008df4 <prvInitialiseNewTask+0x140>)
 8008dc2:	659a      	str	r2, [r3, #88]	; 0x58
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc6:	4a0c      	ldr	r2, [pc, #48]	; (8008df8 <prvInitialiseNewTask+0x144>)
 8008dc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	4a0b      	ldr	r2, [pc, #44]	; (8008dfc <prvInitialiseNewTask+0x148>)
 8008dce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	68f9      	ldr	r1, [r7, #12]
 8008dd4:	69b8      	ldr	r0, [r7, #24]
 8008dd6:	f7fe ff8d 	bl	8007cf4 <pxPortInitialiseStack>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dec:	bf00      	nop
 8008dee:	3720      	adds	r7, #32
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	0800c2c8 	.word	0x0800c2c8
 8008df8:	0800c2e8 	.word	0x0800c2e8
 8008dfc:	0800c2a8 	.word	0x0800c2a8

08008e00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e08:	f7ff f8a4 	bl	8007f54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e0c:	4b2d      	ldr	r3, [pc, #180]	; (8008ec4 <prvAddNewTaskToReadyList+0xc4>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3301      	adds	r3, #1
 8008e12:	4a2c      	ldr	r2, [pc, #176]	; (8008ec4 <prvAddNewTaskToReadyList+0xc4>)
 8008e14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e16:	4b2c      	ldr	r3, [pc, #176]	; (8008ec8 <prvAddNewTaskToReadyList+0xc8>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d109      	bne.n	8008e32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e1e:	4a2a      	ldr	r2, [pc, #168]	; (8008ec8 <prvAddNewTaskToReadyList+0xc8>)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e24:	4b27      	ldr	r3, [pc, #156]	; (8008ec4 <prvAddNewTaskToReadyList+0xc4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d110      	bne.n	8008e4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e2c:	f000 fc26 	bl	800967c <prvInitialiseTaskLists>
 8008e30:	e00d      	b.n	8008e4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e32:	4b26      	ldr	r3, [pc, #152]	; (8008ecc <prvAddNewTaskToReadyList+0xcc>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d109      	bne.n	8008e4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e3a:	4b23      	ldr	r3, [pc, #140]	; (8008ec8 <prvAddNewTaskToReadyList+0xc8>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d802      	bhi.n	8008e4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e48:	4a1f      	ldr	r2, [pc, #124]	; (8008ec8 <prvAddNewTaskToReadyList+0xc8>)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e4e:	4b20      	ldr	r3, [pc, #128]	; (8008ed0 <prvAddNewTaskToReadyList+0xd0>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3301      	adds	r3, #1
 8008e54:	4a1e      	ldr	r2, [pc, #120]	; (8008ed0 <prvAddNewTaskToReadyList+0xd0>)
 8008e56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e58:	4b1d      	ldr	r3, [pc, #116]	; (8008ed0 <prvAddNewTaskToReadyList+0xd0>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e64:	4b1b      	ldr	r3, [pc, #108]	; (8008ed4 <prvAddNewTaskToReadyList+0xd4>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d903      	bls.n	8008e74 <prvAddNewTaskToReadyList+0x74>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e70:	4a18      	ldr	r2, [pc, #96]	; (8008ed4 <prvAddNewTaskToReadyList+0xd4>)
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e78:	4613      	mov	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4a15      	ldr	r2, [pc, #84]	; (8008ed8 <prvAddNewTaskToReadyList+0xd8>)
 8008e82:	441a      	add	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	f7fe feab 	bl	8007be6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e90:	f7ff f890 	bl	8007fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e94:	4b0d      	ldr	r3, [pc, #52]	; (8008ecc <prvAddNewTaskToReadyList+0xcc>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00e      	beq.n	8008eba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <prvAddNewTaskToReadyList+0xc8>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d207      	bcs.n	8008eba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008eaa:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <prvAddNewTaskToReadyList+0xdc>)
 8008eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eba:	bf00      	nop
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	200036f0 	.word	0x200036f0
 8008ec8:	2000321c 	.word	0x2000321c
 8008ecc:	200036fc 	.word	0x200036fc
 8008ed0:	2000370c 	.word	0x2000370c
 8008ed4:	200036f8 	.word	0x200036f8
 8008ed8:	20003220 	.word	0x20003220
 8008edc:	e000ed04 	.word	0xe000ed04

08008ee0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d017      	beq.n	8008f22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ef2:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <vTaskDelay+0x60>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00a      	beq.n	8008f10 <vTaskDelay+0x30>
	__asm volatile
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	60bb      	str	r3, [r7, #8]
}
 8008f0c:	bf00      	nop
 8008f0e:	e7fe      	b.n	8008f0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f10:	f000 f88a 	bl	8009028 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f14:	2100      	movs	r1, #0
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fcfe 	bl	8009918 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f1c:	f000 f892 	bl	8009044 <xTaskResumeAll>
 8008f20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d107      	bne.n	8008f38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008f28:	4b06      	ldr	r3, [pc, #24]	; (8008f44 <vTaskDelay+0x64>)
 8008f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f2e:	601a      	str	r2, [r3, #0]
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f38:	bf00      	nop
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	20003718 	.word	0x20003718
 8008f44:	e000ed04 	.word	0xe000ed04

08008f48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08a      	sub	sp, #40	; 0x28
 8008f4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f56:	463a      	mov	r2, r7
 8008f58:	1d39      	adds	r1, r7, #4
 8008f5a:	f107 0308 	add.w	r3, r7, #8
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fe fbf6 	bl	8007750 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f64:	6839      	ldr	r1, [r7, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	9202      	str	r2, [sp, #8]
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	2300      	movs	r3, #0
 8008f74:	460a      	mov	r2, r1
 8008f76:	4924      	ldr	r1, [pc, #144]	; (8009008 <vTaskStartScheduler+0xc0>)
 8008f78:	4824      	ldr	r0, [pc, #144]	; (800900c <vTaskStartScheduler+0xc4>)
 8008f7a:	f7ff fdf9 	bl	8008b70 <xTaskCreateStatic>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	4a23      	ldr	r2, [pc, #140]	; (8009010 <vTaskStartScheduler+0xc8>)
 8008f82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f84:	4b22      	ldr	r3, [pc, #136]	; (8009010 <vTaskStartScheduler+0xc8>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	617b      	str	r3, [r7, #20]
 8008f90:	e001      	b.n	8008f96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d102      	bne.n	8008fa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f9c:	f000 fd10 	bl	80099c0 <xTimerCreateTimerTask>
 8008fa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d11b      	bne.n	8008fe0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	613b      	str	r3, [r7, #16]
}
 8008fba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fbc:	4b15      	ldr	r3, [pc, #84]	; (8009014 <vTaskStartScheduler+0xcc>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3354      	adds	r3, #84	; 0x54
 8008fc2:	4a15      	ldr	r2, [pc, #84]	; (8009018 <vTaskStartScheduler+0xd0>)
 8008fc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fc6:	4b15      	ldr	r3, [pc, #84]	; (800901c <vTaskStartScheduler+0xd4>)
 8008fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fce:	4b14      	ldr	r3, [pc, #80]	; (8009020 <vTaskStartScheduler+0xd8>)
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fd4:	4b13      	ldr	r3, [pc, #76]	; (8009024 <vTaskStartScheduler+0xdc>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fda:	f7fe ff19 	bl	8007e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fde:	e00e      	b.n	8008ffe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe6:	d10a      	bne.n	8008ffe <vTaskStartScheduler+0xb6>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	60fb      	str	r3, [r7, #12]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <vTaskStartScheduler+0xb4>
}
 8008ffe:	bf00      	nop
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	0800c224 	.word	0x0800c224
 800900c:	0800964d 	.word	0x0800964d
 8009010:	20003714 	.word	0x20003714
 8009014:	2000321c 	.word	0x2000321c
 8009018:	20000110 	.word	0x20000110
 800901c:	20003710 	.word	0x20003710
 8009020:	200036fc 	.word	0x200036fc
 8009024:	200036f4 	.word	0x200036f4

08009028 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800902c:	4b04      	ldr	r3, [pc, #16]	; (8009040 <vTaskSuspendAll+0x18>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3301      	adds	r3, #1
 8009032:	4a03      	ldr	r2, [pc, #12]	; (8009040 <vTaskSuspendAll+0x18>)
 8009034:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009036:	bf00      	nop
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	20003718 	.word	0x20003718

08009044 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800904e:	2300      	movs	r3, #0
 8009050:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009052:	4b42      	ldr	r3, [pc, #264]	; (800915c <xTaskResumeAll+0x118>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10a      	bne.n	8009070 <xTaskResumeAll+0x2c>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	603b      	str	r3, [r7, #0]
}
 800906c:	bf00      	nop
 800906e:	e7fe      	b.n	800906e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009070:	f7fe ff70 	bl	8007f54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009074:	4b39      	ldr	r3, [pc, #228]	; (800915c <xTaskResumeAll+0x118>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3b01      	subs	r3, #1
 800907a:	4a38      	ldr	r2, [pc, #224]	; (800915c <xTaskResumeAll+0x118>)
 800907c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800907e:	4b37      	ldr	r3, [pc, #220]	; (800915c <xTaskResumeAll+0x118>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d162      	bne.n	800914c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009086:	4b36      	ldr	r3, [pc, #216]	; (8009160 <xTaskResumeAll+0x11c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d05e      	beq.n	800914c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800908e:	e02f      	b.n	80090f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009090:	4b34      	ldr	r3, [pc, #208]	; (8009164 <xTaskResumeAll+0x120>)
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3318      	adds	r3, #24
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe fdff 	bl	8007ca0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3304      	adds	r3, #4
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fdfa 	bl	8007ca0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b0:	4b2d      	ldr	r3, [pc, #180]	; (8009168 <xTaskResumeAll+0x124>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d903      	bls.n	80090c0 <xTaskResumeAll+0x7c>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090bc:	4a2a      	ldr	r2, [pc, #168]	; (8009168 <xTaskResumeAll+0x124>)
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4a27      	ldr	r2, [pc, #156]	; (800916c <xTaskResumeAll+0x128>)
 80090ce:	441a      	add	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3304      	adds	r3, #4
 80090d4:	4619      	mov	r1, r3
 80090d6:	4610      	mov	r0, r2
 80090d8:	f7fe fd85 	bl	8007be6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e0:	4b23      	ldr	r3, [pc, #140]	; (8009170 <xTaskResumeAll+0x12c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d302      	bcc.n	80090f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80090ea:	4b22      	ldr	r3, [pc, #136]	; (8009174 <xTaskResumeAll+0x130>)
 80090ec:	2201      	movs	r2, #1
 80090ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090f0:	4b1c      	ldr	r3, [pc, #112]	; (8009164 <xTaskResumeAll+0x120>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1cb      	bne.n	8009090 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090fe:	f000 fb5f 	bl	80097c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009102:	4b1d      	ldr	r3, [pc, #116]	; (8009178 <xTaskResumeAll+0x134>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d010      	beq.n	8009130 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800910e:	f000 f847 	bl	80091a0 <xTaskIncrementTick>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009118:	4b16      	ldr	r3, [pc, #88]	; (8009174 <xTaskResumeAll+0x130>)
 800911a:	2201      	movs	r2, #1
 800911c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	3b01      	subs	r3, #1
 8009122:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1f1      	bne.n	800910e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800912a:	4b13      	ldr	r3, [pc, #76]	; (8009178 <xTaskResumeAll+0x134>)
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009130:	4b10      	ldr	r3, [pc, #64]	; (8009174 <xTaskResumeAll+0x130>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d009      	beq.n	800914c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009138:	2301      	movs	r3, #1
 800913a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800913c:	4b0f      	ldr	r3, [pc, #60]	; (800917c <xTaskResumeAll+0x138>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800914c:	f7fe ff32 	bl	8007fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8009150:	68bb      	ldr	r3, [r7, #8]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20003718 	.word	0x20003718
 8009160:	200036f0 	.word	0x200036f0
 8009164:	200036b0 	.word	0x200036b0
 8009168:	200036f8 	.word	0x200036f8
 800916c:	20003220 	.word	0x20003220
 8009170:	2000321c 	.word	0x2000321c
 8009174:	20003704 	.word	0x20003704
 8009178:	20003700 	.word	0x20003700
 800917c:	e000ed04 	.word	0xe000ed04

08009180 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009186:	4b05      	ldr	r3, [pc, #20]	; (800919c <xTaskGetTickCount+0x1c>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800918c:	687b      	ldr	r3, [r7, #4]
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	200036f4 	.word	0x200036f4

080091a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091a6:	2300      	movs	r3, #0
 80091a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091aa:	4b4f      	ldr	r3, [pc, #316]	; (80092e8 <xTaskIncrementTick+0x148>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f040 808f 	bne.w	80092d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091b4:	4b4d      	ldr	r3, [pc, #308]	; (80092ec <xTaskIncrementTick+0x14c>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3301      	adds	r3, #1
 80091ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091bc:	4a4b      	ldr	r2, [pc, #300]	; (80092ec <xTaskIncrementTick+0x14c>)
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d120      	bne.n	800920a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80091c8:	4b49      	ldr	r3, [pc, #292]	; (80092f0 <xTaskIncrementTick+0x150>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	603b      	str	r3, [r7, #0]
}
 80091e4:	bf00      	nop
 80091e6:	e7fe      	b.n	80091e6 <xTaskIncrementTick+0x46>
 80091e8:	4b41      	ldr	r3, [pc, #260]	; (80092f0 <xTaskIncrementTick+0x150>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	4b41      	ldr	r3, [pc, #260]	; (80092f4 <xTaskIncrementTick+0x154>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a3f      	ldr	r2, [pc, #252]	; (80092f0 <xTaskIncrementTick+0x150>)
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	4a3f      	ldr	r2, [pc, #252]	; (80092f4 <xTaskIncrementTick+0x154>)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6013      	str	r3, [r2, #0]
 80091fc:	4b3e      	ldr	r3, [pc, #248]	; (80092f8 <xTaskIncrementTick+0x158>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3301      	adds	r3, #1
 8009202:	4a3d      	ldr	r2, [pc, #244]	; (80092f8 <xTaskIncrementTick+0x158>)
 8009204:	6013      	str	r3, [r2, #0]
 8009206:	f000 fadb 	bl	80097c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800920a:	4b3c      	ldr	r3, [pc, #240]	; (80092fc <xTaskIncrementTick+0x15c>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	429a      	cmp	r2, r3
 8009212:	d349      	bcc.n	80092a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009214:	4b36      	ldr	r3, [pc, #216]	; (80092f0 <xTaskIncrementTick+0x150>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d104      	bne.n	8009228 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800921e:	4b37      	ldr	r3, [pc, #220]	; (80092fc <xTaskIncrementTick+0x15c>)
 8009220:	f04f 32ff 	mov.w	r2, #4294967295
 8009224:	601a      	str	r2, [r3, #0]
					break;
 8009226:	e03f      	b.n	80092a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009228:	4b31      	ldr	r3, [pc, #196]	; (80092f0 <xTaskIncrementTick+0x150>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	429a      	cmp	r2, r3
 800923e:	d203      	bcs.n	8009248 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009240:	4a2e      	ldr	r2, [pc, #184]	; (80092fc <xTaskIncrementTick+0x15c>)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009246:	e02f      	b.n	80092a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	3304      	adds	r3, #4
 800924c:	4618      	mov	r0, r3
 800924e:	f7fe fd27 	bl	8007ca0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009256:	2b00      	cmp	r3, #0
 8009258:	d004      	beq.n	8009264 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	3318      	adds	r3, #24
 800925e:	4618      	mov	r0, r3
 8009260:	f7fe fd1e 	bl	8007ca0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009268:	4b25      	ldr	r3, [pc, #148]	; (8009300 <xTaskIncrementTick+0x160>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d903      	bls.n	8009278 <xTaskIncrementTick+0xd8>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	4a22      	ldr	r2, [pc, #136]	; (8009300 <xTaskIncrementTick+0x160>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4a1f      	ldr	r2, [pc, #124]	; (8009304 <xTaskIncrementTick+0x164>)
 8009286:	441a      	add	r2, r3
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7fe fca9 	bl	8007be6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009298:	4b1b      	ldr	r3, [pc, #108]	; (8009308 <xTaskIncrementTick+0x168>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929e:	429a      	cmp	r2, r3
 80092a0:	d3b8      	bcc.n	8009214 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80092a2:	2301      	movs	r3, #1
 80092a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092a6:	e7b5      	b.n	8009214 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092a8:	4b17      	ldr	r3, [pc, #92]	; (8009308 <xTaskIncrementTick+0x168>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ae:	4915      	ldr	r1, [pc, #84]	; (8009304 <xTaskIncrementTick+0x164>)
 80092b0:	4613      	mov	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	440b      	add	r3, r1
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d901      	bls.n	80092c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80092c0:	2301      	movs	r3, #1
 80092c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80092c4:	4b11      	ldr	r3, [pc, #68]	; (800930c <xTaskIncrementTick+0x16c>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d007      	beq.n	80092dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80092cc:	2301      	movs	r3, #1
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	e004      	b.n	80092dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80092d2:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <xTaskIncrementTick+0x170>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3301      	adds	r3, #1
 80092d8:	4a0d      	ldr	r2, [pc, #52]	; (8009310 <xTaskIncrementTick+0x170>)
 80092da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80092dc:	697b      	ldr	r3, [r7, #20]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3718      	adds	r7, #24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20003718 	.word	0x20003718
 80092ec:	200036f4 	.word	0x200036f4
 80092f0:	200036a8 	.word	0x200036a8
 80092f4:	200036ac 	.word	0x200036ac
 80092f8:	20003708 	.word	0x20003708
 80092fc:	20003710 	.word	0x20003710
 8009300:	200036f8 	.word	0x200036f8
 8009304:	20003220 	.word	0x20003220
 8009308:	2000321c 	.word	0x2000321c
 800930c:	20003704 	.word	0x20003704
 8009310:	20003700 	.word	0x20003700

08009314 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800931a:	4b2a      	ldr	r3, [pc, #168]	; (80093c4 <vTaskSwitchContext+0xb0>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009322:	4b29      	ldr	r3, [pc, #164]	; (80093c8 <vTaskSwitchContext+0xb4>)
 8009324:	2201      	movs	r2, #1
 8009326:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009328:	e046      	b.n	80093b8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800932a:	4b27      	ldr	r3, [pc, #156]	; (80093c8 <vTaskSwitchContext+0xb4>)
 800932c:	2200      	movs	r2, #0
 800932e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009330:	4b26      	ldr	r3, [pc, #152]	; (80093cc <vTaskSwitchContext+0xb8>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	e010      	b.n	800935a <vTaskSwitchContext+0x46>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10a      	bne.n	8009354 <vTaskSwitchContext+0x40>
	__asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	607b      	str	r3, [r7, #4]
}
 8009350:	bf00      	nop
 8009352:	e7fe      	b.n	8009352 <vTaskSwitchContext+0x3e>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3b01      	subs	r3, #1
 8009358:	60fb      	str	r3, [r7, #12]
 800935a:	491d      	ldr	r1, [pc, #116]	; (80093d0 <vTaskSwitchContext+0xbc>)
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	440b      	add	r3, r1
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d0e4      	beq.n	8009338 <vTaskSwitchContext+0x24>
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4a15      	ldr	r2, [pc, #84]	; (80093d0 <vTaskSwitchContext+0xbc>)
 800937a:	4413      	add	r3, r2
 800937c:	60bb      	str	r3, [r7, #8]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	605a      	str	r2, [r3, #4]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	3308      	adds	r3, #8
 8009390:	429a      	cmp	r2, r3
 8009392:	d104      	bne.n	800939e <vTaskSwitchContext+0x8a>
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	605a      	str	r2, [r3, #4]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	4a0b      	ldr	r2, [pc, #44]	; (80093d4 <vTaskSwitchContext+0xc0>)
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	4a08      	ldr	r2, [pc, #32]	; (80093cc <vTaskSwitchContext+0xb8>)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093ae:	4b09      	ldr	r3, [pc, #36]	; (80093d4 <vTaskSwitchContext+0xc0>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3354      	adds	r3, #84	; 0x54
 80093b4:	4a08      	ldr	r2, [pc, #32]	; (80093d8 <vTaskSwitchContext+0xc4>)
 80093b6:	6013      	str	r3, [r2, #0]
}
 80093b8:	bf00      	nop
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	20003718 	.word	0x20003718
 80093c8:	20003704 	.word	0x20003704
 80093cc:	200036f8 	.word	0x200036f8
 80093d0:	20003220 	.word	0x20003220
 80093d4:	2000321c 	.word	0x2000321c
 80093d8:	20000110 	.word	0x20000110

080093dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10a      	bne.n	8009402 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	60fb      	str	r3, [r7, #12]
}
 80093fe:	bf00      	nop
 8009400:	e7fe      	b.n	8009400 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009402:	4b07      	ldr	r3, [pc, #28]	; (8009420 <vTaskPlaceOnEventList+0x44>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3318      	adds	r3, #24
 8009408:	4619      	mov	r1, r3
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7fe fc0f 	bl	8007c2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009410:	2101      	movs	r1, #1
 8009412:	6838      	ldr	r0, [r7, #0]
 8009414:	f000 fa80 	bl	8009918 <prvAddCurrentTaskToDelayedList>
}
 8009418:	bf00      	nop
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	2000321c 	.word	0x2000321c

08009424 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10a      	bne.n	800944c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	617b      	str	r3, [r7, #20]
}
 8009448:	bf00      	nop
 800944a:	e7fe      	b.n	800944a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800944c:	4b0a      	ldr	r3, [pc, #40]	; (8009478 <vTaskPlaceOnEventListRestricted+0x54>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3318      	adds	r3, #24
 8009452:	4619      	mov	r1, r3
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f7fe fbc6 	bl	8007be6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009460:	f04f 33ff 	mov.w	r3, #4294967295
 8009464:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	68b8      	ldr	r0, [r7, #8]
 800946a:	f000 fa55 	bl	8009918 <prvAddCurrentTaskToDelayedList>
	}
 800946e:	bf00      	nop
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	2000321c 	.word	0x2000321c

0800947c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10a      	bne.n	80094a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	60fb      	str	r3, [r7, #12]
}
 80094a4:	bf00      	nop
 80094a6:	e7fe      	b.n	80094a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	3318      	adds	r3, #24
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fe fbf7 	bl	8007ca0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094b2:	4b1e      	ldr	r3, [pc, #120]	; (800952c <xTaskRemoveFromEventList+0xb0>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d11d      	bne.n	80094f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	3304      	adds	r3, #4
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe fbee 	bl	8007ca0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c8:	4b19      	ldr	r3, [pc, #100]	; (8009530 <xTaskRemoveFromEventList+0xb4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d903      	bls.n	80094d8 <xTaskRemoveFromEventList+0x5c>
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d4:	4a16      	ldr	r2, [pc, #88]	; (8009530 <xTaskRemoveFromEventList+0xb4>)
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094dc:	4613      	mov	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4a13      	ldr	r2, [pc, #76]	; (8009534 <xTaskRemoveFromEventList+0xb8>)
 80094e6:	441a      	add	r2, r3
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	3304      	adds	r3, #4
 80094ec:	4619      	mov	r1, r3
 80094ee:	4610      	mov	r0, r2
 80094f0:	f7fe fb79 	bl	8007be6 <vListInsertEnd>
 80094f4:	e005      	b.n	8009502 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	3318      	adds	r3, #24
 80094fa:	4619      	mov	r1, r3
 80094fc:	480e      	ldr	r0, [pc, #56]	; (8009538 <xTaskRemoveFromEventList+0xbc>)
 80094fe:	f7fe fb72 	bl	8007be6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009506:	4b0d      	ldr	r3, [pc, #52]	; (800953c <xTaskRemoveFromEventList+0xc0>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	429a      	cmp	r2, r3
 800950e:	d905      	bls.n	800951c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009510:	2301      	movs	r3, #1
 8009512:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009514:	4b0a      	ldr	r3, [pc, #40]	; (8009540 <xTaskRemoveFromEventList+0xc4>)
 8009516:	2201      	movs	r2, #1
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	e001      	b.n	8009520 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800951c:	2300      	movs	r3, #0
 800951e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009520:	697b      	ldr	r3, [r7, #20]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20003718 	.word	0x20003718
 8009530:	200036f8 	.word	0x200036f8
 8009534:	20003220 	.word	0x20003220
 8009538:	200036b0 	.word	0x200036b0
 800953c:	2000321c 	.word	0x2000321c
 8009540:	20003704 	.word	0x20003704

08009544 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800954c:	4b06      	ldr	r3, [pc, #24]	; (8009568 <vTaskInternalSetTimeOutState+0x24>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009554:	4b05      	ldr	r3, [pc, #20]	; (800956c <vTaskInternalSetTimeOutState+0x28>)
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	605a      	str	r2, [r3, #4]
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	20003708 	.word	0x20003708
 800956c:	200036f4 	.word	0x200036f4

08009570 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	613b      	str	r3, [r7, #16]
}
 8009592:	bf00      	nop
 8009594:	e7fe      	b.n	8009594 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10a      	bne.n	80095b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	60fb      	str	r3, [r7, #12]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80095b2:	f7fe fccf 	bl	8007f54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095b6:	4b1d      	ldr	r3, [pc, #116]	; (800962c <xTaskCheckForTimeOut+0xbc>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	69ba      	ldr	r2, [r7, #24]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ce:	d102      	bne.n	80095d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095d0:	2300      	movs	r3, #0
 80095d2:	61fb      	str	r3, [r7, #28]
 80095d4:	e023      	b.n	800961e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	4b15      	ldr	r3, [pc, #84]	; (8009630 <xTaskCheckForTimeOut+0xc0>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d007      	beq.n	80095f2 <xTaskCheckForTimeOut+0x82>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d302      	bcc.n	80095f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095ec:	2301      	movs	r3, #1
 80095ee:	61fb      	str	r3, [r7, #28]
 80095f0:	e015      	b.n	800961e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d20b      	bcs.n	8009614 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	1ad2      	subs	r2, r2, r3
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff ff9b 	bl	8009544 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800960e:	2300      	movs	r3, #0
 8009610:	61fb      	str	r3, [r7, #28]
 8009612:	e004      	b.n	800961e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	2200      	movs	r2, #0
 8009618:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800961a:	2301      	movs	r3, #1
 800961c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800961e:	f7fe fcc9 	bl	8007fb4 <vPortExitCritical>

	return xReturn;
 8009622:	69fb      	ldr	r3, [r7, #28]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3720      	adds	r7, #32
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	200036f4 	.word	0x200036f4
 8009630:	20003708 	.word	0x20003708

08009634 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009634:	b480      	push	{r7}
 8009636:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009638:	4b03      	ldr	r3, [pc, #12]	; (8009648 <vTaskMissedYield+0x14>)
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]
}
 800963e:	bf00      	nop
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	20003704 	.word	0x20003704

0800964c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009654:	f000 f852 	bl	80096fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009658:	4b06      	ldr	r3, [pc, #24]	; (8009674 <prvIdleTask+0x28>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d9f9      	bls.n	8009654 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009660:	4b05      	ldr	r3, [pc, #20]	; (8009678 <prvIdleTask+0x2c>)
 8009662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009670:	e7f0      	b.n	8009654 <prvIdleTask+0x8>
 8009672:	bf00      	nop
 8009674:	20003220 	.word	0x20003220
 8009678:	e000ed04 	.word	0xe000ed04

0800967c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009682:	2300      	movs	r3, #0
 8009684:	607b      	str	r3, [r7, #4]
 8009686:	e00c      	b.n	80096a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4a12      	ldr	r2, [pc, #72]	; (80096dc <prvInitialiseTaskLists+0x60>)
 8009694:	4413      	add	r3, r2
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe fa78 	bl	8007b8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3301      	adds	r3, #1
 80096a0:	607b      	str	r3, [r7, #4]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b37      	cmp	r3, #55	; 0x37
 80096a6:	d9ef      	bls.n	8009688 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096a8:	480d      	ldr	r0, [pc, #52]	; (80096e0 <prvInitialiseTaskLists+0x64>)
 80096aa:	f7fe fa6f 	bl	8007b8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096ae:	480d      	ldr	r0, [pc, #52]	; (80096e4 <prvInitialiseTaskLists+0x68>)
 80096b0:	f7fe fa6c 	bl	8007b8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096b4:	480c      	ldr	r0, [pc, #48]	; (80096e8 <prvInitialiseTaskLists+0x6c>)
 80096b6:	f7fe fa69 	bl	8007b8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096ba:	480c      	ldr	r0, [pc, #48]	; (80096ec <prvInitialiseTaskLists+0x70>)
 80096bc:	f7fe fa66 	bl	8007b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096c0:	480b      	ldr	r0, [pc, #44]	; (80096f0 <prvInitialiseTaskLists+0x74>)
 80096c2:	f7fe fa63 	bl	8007b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096c6:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <prvInitialiseTaskLists+0x78>)
 80096c8:	4a05      	ldr	r2, [pc, #20]	; (80096e0 <prvInitialiseTaskLists+0x64>)
 80096ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096cc:	4b0a      	ldr	r3, [pc, #40]	; (80096f8 <prvInitialiseTaskLists+0x7c>)
 80096ce:	4a05      	ldr	r2, [pc, #20]	; (80096e4 <prvInitialiseTaskLists+0x68>)
 80096d0:	601a      	str	r2, [r3, #0]
}
 80096d2:	bf00      	nop
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20003220 	.word	0x20003220
 80096e0:	20003680 	.word	0x20003680
 80096e4:	20003694 	.word	0x20003694
 80096e8:	200036b0 	.word	0x200036b0
 80096ec:	200036c4 	.word	0x200036c4
 80096f0:	200036dc 	.word	0x200036dc
 80096f4:	200036a8 	.word	0x200036a8
 80096f8:	200036ac 	.word	0x200036ac

080096fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009702:	e019      	b.n	8009738 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009704:	f7fe fc26 	bl	8007f54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009708:	4b10      	ldr	r3, [pc, #64]	; (800974c <prvCheckTasksWaitingTermination+0x50>)
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3304      	adds	r3, #4
 8009714:	4618      	mov	r0, r3
 8009716:	f7fe fac3 	bl	8007ca0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800971a:	4b0d      	ldr	r3, [pc, #52]	; (8009750 <prvCheckTasksWaitingTermination+0x54>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3b01      	subs	r3, #1
 8009720:	4a0b      	ldr	r2, [pc, #44]	; (8009750 <prvCheckTasksWaitingTermination+0x54>)
 8009722:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009724:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <prvCheckTasksWaitingTermination+0x58>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	3b01      	subs	r3, #1
 800972a:	4a0a      	ldr	r2, [pc, #40]	; (8009754 <prvCheckTasksWaitingTermination+0x58>)
 800972c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800972e:	f7fe fc41 	bl	8007fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f810 	bl	8009758 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009738:	4b06      	ldr	r3, [pc, #24]	; (8009754 <prvCheckTasksWaitingTermination+0x58>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1e1      	bne.n	8009704 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009740:	bf00      	nop
 8009742:	bf00      	nop
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	200036c4 	.word	0x200036c4
 8009750:	200036f0 	.word	0x200036f0
 8009754:	200036d8 	.word	0x200036d8

08009758 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	3354      	adds	r3, #84	; 0x54
 8009764:	4618      	mov	r0, r3
 8009766:	f002 fcbf 	bl	800c0e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009770:	2b00      	cmp	r3, #0
 8009772:	d108      	bne.n	8009786 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009778:	4618      	mov	r0, r3
 800977a:	f7fe f8e9 	bl	8007950 <vPortFree>
				vPortFree( pxTCB );
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7fe f8e6 	bl	8007950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009784:	e018      	b.n	80097b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800978c:	2b01      	cmp	r3, #1
 800978e:	d103      	bne.n	8009798 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7fe f8dd 	bl	8007950 <vPortFree>
	}
 8009796:	e00f      	b.n	80097b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d00a      	beq.n	80097b8 <prvDeleteTCB+0x60>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	60fb      	str	r3, [r7, #12]
}
 80097b4:	bf00      	nop
 80097b6:	e7fe      	b.n	80097b6 <prvDeleteTCB+0x5e>
	}
 80097b8:	bf00      	nop
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097c6:	4b0c      	ldr	r3, [pc, #48]	; (80097f8 <prvResetNextTaskUnblockTime+0x38>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d104      	bne.n	80097da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097d0:	4b0a      	ldr	r3, [pc, #40]	; (80097fc <prvResetNextTaskUnblockTime+0x3c>)
 80097d2:	f04f 32ff 	mov.w	r2, #4294967295
 80097d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097d8:	e008      	b.n	80097ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097da:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <prvResetNextTaskUnblockTime+0x38>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	4a04      	ldr	r2, [pc, #16]	; (80097fc <prvResetNextTaskUnblockTime+0x3c>)
 80097ea:	6013      	str	r3, [r2, #0]
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	200036a8 	.word	0x200036a8
 80097fc:	20003710 	.word	0x20003710

08009800 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009806:	4b0b      	ldr	r3, [pc, #44]	; (8009834 <xTaskGetSchedulerState+0x34>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d102      	bne.n	8009814 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800980e:	2301      	movs	r3, #1
 8009810:	607b      	str	r3, [r7, #4]
 8009812:	e008      	b.n	8009826 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009814:	4b08      	ldr	r3, [pc, #32]	; (8009838 <xTaskGetSchedulerState+0x38>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d102      	bne.n	8009822 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800981c:	2302      	movs	r3, #2
 800981e:	607b      	str	r3, [r7, #4]
 8009820:	e001      	b.n	8009826 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009822:	2300      	movs	r3, #0
 8009824:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009826:	687b      	ldr	r3, [r7, #4]
	}
 8009828:	4618      	mov	r0, r3
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	200036fc 	.word	0x200036fc
 8009838:	20003718 	.word	0x20003718

0800983c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009848:	2300      	movs	r3, #0
 800984a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d056      	beq.n	8009900 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009852:	4b2e      	ldr	r3, [pc, #184]	; (800990c <xTaskPriorityDisinherit+0xd0>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	429a      	cmp	r2, r3
 800985a:	d00a      	beq.n	8009872 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	60fb      	str	r3, [r7, #12]
}
 800986e:	bf00      	nop
 8009870:	e7fe      	b.n	8009870 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10a      	bne.n	8009890 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	60bb      	str	r3, [r7, #8]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009894:	1e5a      	subs	r2, r3, #1
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d02c      	beq.n	8009900 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d128      	bne.n	8009900 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	3304      	adds	r3, #4
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe f9f4 	bl	8007ca0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d0:	4b0f      	ldr	r3, [pc, #60]	; (8009910 <xTaskPriorityDisinherit+0xd4>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d903      	bls.n	80098e0 <xTaskPriorityDisinherit+0xa4>
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	4a0c      	ldr	r2, [pc, #48]	; (8009910 <xTaskPriorityDisinherit+0xd4>)
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e4:	4613      	mov	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4a09      	ldr	r2, [pc, #36]	; (8009914 <xTaskPriorityDisinherit+0xd8>)
 80098ee:	441a      	add	r2, r3
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f7fe f975 	bl	8007be6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098fc:	2301      	movs	r3, #1
 80098fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009900:	697b      	ldr	r3, [r7, #20]
	}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	2000321c 	.word	0x2000321c
 8009910:	200036f8 	.word	0x200036f8
 8009914:	20003220 	.word	0x20003220

08009918 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009922:	4b21      	ldr	r3, [pc, #132]	; (80099a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009928:	4b20      	ldr	r3, [pc, #128]	; (80099ac <prvAddCurrentTaskToDelayedList+0x94>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3304      	adds	r3, #4
 800992e:	4618      	mov	r0, r3
 8009930:	f7fe f9b6 	bl	8007ca0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993a:	d10a      	bne.n	8009952 <prvAddCurrentTaskToDelayedList+0x3a>
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d007      	beq.n	8009952 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009942:	4b1a      	ldr	r3, [pc, #104]	; (80099ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3304      	adds	r3, #4
 8009948:	4619      	mov	r1, r3
 800994a:	4819      	ldr	r0, [pc, #100]	; (80099b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800994c:	f7fe f94b 	bl	8007be6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009950:	e026      	b.n	80099a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4413      	add	r3, r2
 8009958:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800995a:	4b14      	ldr	r3, [pc, #80]	; (80099ac <prvAddCurrentTaskToDelayedList+0x94>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	429a      	cmp	r2, r3
 8009968:	d209      	bcs.n	800997e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800996a:	4b12      	ldr	r3, [pc, #72]	; (80099b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	4b0f      	ldr	r3, [pc, #60]	; (80099ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3304      	adds	r3, #4
 8009974:	4619      	mov	r1, r3
 8009976:	4610      	mov	r0, r2
 8009978:	f7fe f959 	bl	8007c2e <vListInsert>
}
 800997c:	e010      	b.n	80099a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800997e:	4b0e      	ldr	r3, [pc, #56]	; (80099b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3304      	adds	r3, #4
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f7fe f94f 	bl	8007c2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009990:	4b0a      	ldr	r3, [pc, #40]	; (80099bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	429a      	cmp	r2, r3
 8009998:	d202      	bcs.n	80099a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800999a:	4a08      	ldr	r2, [pc, #32]	; (80099bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	6013      	str	r3, [r2, #0]
}
 80099a0:	bf00      	nop
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	200036f4 	.word	0x200036f4
 80099ac:	2000321c 	.word	0x2000321c
 80099b0:	200036dc 	.word	0x200036dc
 80099b4:	200036ac 	.word	0x200036ac
 80099b8:	200036a8 	.word	0x200036a8
 80099bc:	20003710 	.word	0x20003710

080099c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08a      	sub	sp, #40	; 0x28
 80099c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099ca:	f000 fb07 	bl	8009fdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099ce:	4b1c      	ldr	r3, [pc, #112]	; (8009a40 <xTimerCreateTimerTask+0x80>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d021      	beq.n	8009a1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099de:	1d3a      	adds	r2, r7, #4
 80099e0:	f107 0108 	add.w	r1, r7, #8
 80099e4:	f107 030c 	add.w	r3, r7, #12
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fd fecb 	bl	8007784 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099ee:	6879      	ldr	r1, [r7, #4]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	9202      	str	r2, [sp, #8]
 80099f6:	9301      	str	r3, [sp, #4]
 80099f8:	2302      	movs	r3, #2
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	2300      	movs	r3, #0
 80099fe:	460a      	mov	r2, r1
 8009a00:	4910      	ldr	r1, [pc, #64]	; (8009a44 <xTimerCreateTimerTask+0x84>)
 8009a02:	4811      	ldr	r0, [pc, #68]	; (8009a48 <xTimerCreateTimerTask+0x88>)
 8009a04:	f7ff f8b4 	bl	8008b70 <xTaskCreateStatic>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	4a10      	ldr	r2, [pc, #64]	; (8009a4c <xTimerCreateTimerTask+0x8c>)
 8009a0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a0e:	4b0f      	ldr	r3, [pc, #60]	; (8009a4c <xTimerCreateTimerTask+0x8c>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a16:	2301      	movs	r3, #1
 8009a18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	613b      	str	r3, [r7, #16]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a36:	697b      	ldr	r3, [r7, #20]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	2000374c 	.word	0x2000374c
 8009a44:	0800c22c 	.word	0x0800c22c
 8009a48:	08009b85 	.word	0x08009b85
 8009a4c:	20003750 	.word	0x20003750

08009a50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08a      	sub	sp, #40	; 0x28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10a      	bne.n	8009a7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	623b      	str	r3, [r7, #32]
}
 8009a7a:	bf00      	nop
 8009a7c:	e7fe      	b.n	8009a7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a7e:	4b1a      	ldr	r3, [pc, #104]	; (8009ae8 <xTimerGenericCommand+0x98>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d02a      	beq.n	8009adc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2b05      	cmp	r3, #5
 8009a96:	dc18      	bgt.n	8009aca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a98:	f7ff feb2 	bl	8009800 <xTaskGetSchedulerState>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d109      	bne.n	8009ab6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009aa2:	4b11      	ldr	r3, [pc, #68]	; (8009ae8 <xTimerGenericCommand+0x98>)
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	f107 0110 	add.w	r1, r7, #16
 8009aaa:	2300      	movs	r3, #0
 8009aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aae:	f7fe fc77 	bl	80083a0 <xQueueGenericSend>
 8009ab2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ab4:	e012      	b.n	8009adc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ab6:	4b0c      	ldr	r3, [pc, #48]	; (8009ae8 <xTimerGenericCommand+0x98>)
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	f107 0110 	add.w	r1, r7, #16
 8009abe:	2300      	movs	r3, #0
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f7fe fc6d 	bl	80083a0 <xQueueGenericSend>
 8009ac6:	6278      	str	r0, [r7, #36]	; 0x24
 8009ac8:	e008      	b.n	8009adc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009aca:	4b07      	ldr	r3, [pc, #28]	; (8009ae8 <xTimerGenericCommand+0x98>)
 8009acc:	6818      	ldr	r0, [r3, #0]
 8009ace:	f107 0110 	add.w	r1, r7, #16
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	f7fe fd61 	bl	800859c <xQueueGenericSendFromISR>
 8009ada:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3728      	adds	r7, #40	; 0x28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	2000374c 	.word	0x2000374c

08009aec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b088      	sub	sp, #32
 8009af0:	af02      	add	r7, sp, #8
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009af6:	4b22      	ldr	r3, [pc, #136]	; (8009b80 <prvProcessExpiredTimer+0x94>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	3304      	adds	r3, #4
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7fe f8cb 	bl	8007ca0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d022      	beq.n	8009b5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	699a      	ldr	r2, [r3, #24]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	18d1      	adds	r1, r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	6978      	ldr	r0, [r7, #20]
 8009b26:	f000 f8d1 	bl	8009ccc <prvInsertTimerInActiveList>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d01f      	beq.n	8009b70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b30:	2300      	movs	r3, #0
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	2100      	movs	r1, #0
 8009b3a:	6978      	ldr	r0, [r7, #20]
 8009b3c:	f7ff ff88 	bl	8009a50 <xTimerGenericCommand>
 8009b40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d113      	bne.n	8009b70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	60fb      	str	r3, [r7, #12]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b64:	f023 0301 	bic.w	r3, r3, #1
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	6978      	ldr	r0, [r7, #20]
 8009b76:	4798      	blx	r3
}
 8009b78:	bf00      	nop
 8009b7a:	3718      	adds	r7, #24
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	20003744 	.word	0x20003744

08009b84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b8c:	f107 0308 	add.w	r3, r7, #8
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 f857 	bl	8009c44 <prvGetNextExpireTime>
 8009b96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f000 f803 	bl	8009ba8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ba2:	f000 f8d5 	bl	8009d50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ba6:	e7f1      	b.n	8009b8c <prvTimerTask+0x8>

08009ba8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bb2:	f7ff fa39 	bl	8009028 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bb6:	f107 0308 	add.w	r3, r7, #8
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 f866 	bl	8009c8c <prvSampleTimeNow>
 8009bc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d130      	bne.n	8009c2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10a      	bne.n	8009be4 <prvProcessTimerOrBlockTask+0x3c>
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d806      	bhi.n	8009be4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009bd6:	f7ff fa35 	bl	8009044 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009bda:	68f9      	ldr	r1, [r7, #12]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7ff ff85 	bl	8009aec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009be2:	e024      	b.n	8009c2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d008      	beq.n	8009bfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009bea:	4b13      	ldr	r3, [pc, #76]	; (8009c38 <prvProcessTimerOrBlockTask+0x90>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d101      	bne.n	8009bf8 <prvProcessTimerOrBlockTask+0x50>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e000      	b.n	8009bfa <prvProcessTimerOrBlockTask+0x52>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009bfc:	4b0f      	ldr	r3, [pc, #60]	; (8009c3c <prvProcessTimerOrBlockTask+0x94>)
 8009bfe:	6818      	ldr	r0, [r3, #0]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	4619      	mov	r1, r3
 8009c0a:	f7fe ff7d 	bl	8008b08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c0e:	f7ff fa19 	bl	8009044 <xTaskResumeAll>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10a      	bne.n	8009c2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c18:	4b09      	ldr	r3, [pc, #36]	; (8009c40 <prvProcessTimerOrBlockTask+0x98>)
 8009c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	f3bf 8f6f 	isb	sy
}
 8009c28:	e001      	b.n	8009c2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c2a:	f7ff fa0b 	bl	8009044 <xTaskResumeAll>
}
 8009c2e:	bf00      	nop
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	20003748 	.word	0x20003748
 8009c3c:	2000374c 	.word	0x2000374c
 8009c40:	e000ed04 	.word	0xe000ed04

08009c44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c4c:	4b0e      	ldr	r3, [pc, #56]	; (8009c88 <prvGetNextExpireTime+0x44>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <prvGetNextExpireTime+0x16>
 8009c56:	2201      	movs	r2, #1
 8009c58:	e000      	b.n	8009c5c <prvGetNextExpireTime+0x18>
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d105      	bne.n	8009c74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c68:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <prvGetNextExpireTime+0x44>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	e001      	b.n	8009c78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c74:	2300      	movs	r3, #0
 8009c76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c78:	68fb      	ldr	r3, [r7, #12]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	20003744 	.word	0x20003744

08009c8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c94:	f7ff fa74 	bl	8009180 <xTaskGetTickCount>
 8009c98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c9a:	4b0b      	ldr	r3, [pc, #44]	; (8009cc8 <prvSampleTimeNow+0x3c>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d205      	bcs.n	8009cb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ca4:	f000 f936 	bl	8009f14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	e002      	b.n	8009cb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cb6:	4a04      	ldr	r2, [pc, #16]	; (8009cc8 <prvSampleTimeNow+0x3c>)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20003754 	.word	0x20003754

08009ccc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d812      	bhi.n	8009d18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	1ad2      	subs	r2, r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d302      	bcc.n	8009d06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d00:	2301      	movs	r3, #1
 8009d02:	617b      	str	r3, [r7, #20]
 8009d04:	e01b      	b.n	8009d3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d06:	4b10      	ldr	r3, [pc, #64]	; (8009d48 <prvInsertTimerInActiveList+0x7c>)
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4610      	mov	r0, r2
 8009d12:	f7fd ff8c 	bl	8007c2e <vListInsert>
 8009d16:	e012      	b.n	8009d3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d206      	bcs.n	8009d2e <prvInsertTimerInActiveList+0x62>
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d302      	bcc.n	8009d2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	617b      	str	r3, [r7, #20]
 8009d2c:	e007      	b.n	8009d3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d2e:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <prvInsertTimerInActiveList+0x80>)
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3304      	adds	r3, #4
 8009d36:	4619      	mov	r1, r3
 8009d38:	4610      	mov	r0, r2
 8009d3a:	f7fd ff78 	bl	8007c2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d3e:	697b      	ldr	r3, [r7, #20]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	20003748 	.word	0x20003748
 8009d4c:	20003744 	.word	0x20003744

08009d50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08e      	sub	sp, #56	; 0x38
 8009d54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d56:	e0ca      	b.n	8009eee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	da18      	bge.n	8009d90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d5e:	1d3b      	adds	r3, r7, #4
 8009d60:	3304      	adds	r3, #4
 8009d62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	61fb      	str	r3, [r7, #28]
}
 8009d7c:	bf00      	nop
 8009d7e:	e7fe      	b.n	8009d7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d86:	6850      	ldr	r0, [r2, #4]
 8009d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d8a:	6892      	ldr	r2, [r2, #8]
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f2c0 80aa 	blt.w	8009eec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9e:	695b      	ldr	r3, [r3, #20]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d004      	beq.n	8009dae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da6:	3304      	adds	r3, #4
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fd ff79 	bl	8007ca0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dae:	463b      	mov	r3, r7
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7ff ff6b 	bl	8009c8c <prvSampleTimeNow>
 8009db6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b09      	cmp	r3, #9
 8009dbc:	f200 8097 	bhi.w	8009eee <prvProcessReceivedCommands+0x19e>
 8009dc0:	a201      	add	r2, pc, #4	; (adr r2, 8009dc8 <prvProcessReceivedCommands+0x78>)
 8009dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc6:	bf00      	nop
 8009dc8:	08009df1 	.word	0x08009df1
 8009dcc:	08009df1 	.word	0x08009df1
 8009dd0:	08009df1 	.word	0x08009df1
 8009dd4:	08009e65 	.word	0x08009e65
 8009dd8:	08009e79 	.word	0x08009e79
 8009ddc:	08009ec3 	.word	0x08009ec3
 8009de0:	08009df1 	.word	0x08009df1
 8009de4:	08009df1 	.word	0x08009df1
 8009de8:	08009e65 	.word	0x08009e65
 8009dec:	08009e79 	.word	0x08009e79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009df6:	f043 0301 	orr.w	r3, r3, #1
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e06:	699b      	ldr	r3, [r3, #24]
 8009e08:	18d1      	adds	r1, r2, r3
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e10:	f7ff ff5c 	bl	8009ccc <prvInsertTimerInActiveList>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d069      	beq.n	8009eee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e28:	f003 0304 	and.w	r3, r3, #4
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d05e      	beq.n	8009eee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	441a      	add	r2, r3
 8009e38:	2300      	movs	r3, #0
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	2100      	movs	r1, #0
 8009e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e42:	f7ff fe05 	bl	8009a50 <xTimerGenericCommand>
 8009e46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e48:	6a3b      	ldr	r3, [r7, #32]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d14f      	bne.n	8009eee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	61bb      	str	r3, [r7, #24]
}
 8009e60:	bf00      	nop
 8009e62:	e7fe      	b.n	8009e62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e6a:	f023 0301 	bic.w	r3, r3, #1
 8009e6e:	b2da      	uxtb	r2, r3
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009e76:	e03a      	b.n	8009eee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e7e:	f043 0301 	orr.w	r3, r3, #1
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10a      	bne.n	8009eae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	617b      	str	r3, [r7, #20]
}
 8009eaa:	bf00      	nop
 8009eac:	e7fe      	b.n	8009eac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	699a      	ldr	r2, [r3, #24]
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb4:	18d1      	adds	r1, r2, r3
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ebc:	f7ff ff06 	bl	8009ccc <prvInsertTimerInActiveList>
					break;
 8009ec0:	e015      	b.n	8009eee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ec8:	f003 0302 	and.w	r3, r3, #2
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d103      	bne.n	8009ed8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ed2:	f7fd fd3d 	bl	8007950 <vPortFree>
 8009ed6:	e00a      	b.n	8009eee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ede:	f023 0301 	bic.w	r3, r3, #1
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009eea:	e000      	b.n	8009eee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009eec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009eee:	4b08      	ldr	r3, [pc, #32]	; (8009f10 <prvProcessReceivedCommands+0x1c0>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	1d39      	adds	r1, r7, #4
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe fbec 	bl	80086d4 <xQueueReceive>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f47f af2a 	bne.w	8009d58 <prvProcessReceivedCommands+0x8>
	}
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop
 8009f08:	3730      	adds	r7, #48	; 0x30
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	2000374c 	.word	0x2000374c

08009f14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f1a:	e048      	b.n	8009fae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f1c:	4b2d      	ldr	r3, [pc, #180]	; (8009fd4 <prvSwitchTimerLists+0xc0>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f26:	4b2b      	ldr	r3, [pc, #172]	; (8009fd4 <prvSwitchTimerLists+0xc0>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3304      	adds	r3, #4
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fd feb3 	bl	8007ca0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f48:	f003 0304 	and.w	r3, r3, #4
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d02e      	beq.n	8009fae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	693a      	ldr	r2, [r7, #16]
 8009f56:	4413      	add	r3, r2
 8009f58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d90e      	bls.n	8009f80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f6e:	4b19      	ldr	r3, [pc, #100]	; (8009fd4 <prvSwitchTimerLists+0xc0>)
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3304      	adds	r3, #4
 8009f76:	4619      	mov	r1, r3
 8009f78:	4610      	mov	r0, r2
 8009f7a:	f7fd fe58 	bl	8007c2e <vListInsert>
 8009f7e:	e016      	b.n	8009fae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f80:	2300      	movs	r3, #0
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	2300      	movs	r3, #0
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	2100      	movs	r1, #0
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f7ff fd60 	bl	8009a50 <xTimerGenericCommand>
 8009f90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	603b      	str	r3, [r7, #0]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fae:	4b09      	ldr	r3, [pc, #36]	; (8009fd4 <prvSwitchTimerLists+0xc0>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1b1      	bne.n	8009f1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009fb8:	4b06      	ldr	r3, [pc, #24]	; (8009fd4 <prvSwitchTimerLists+0xc0>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009fbe:	4b06      	ldr	r3, [pc, #24]	; (8009fd8 <prvSwitchTimerLists+0xc4>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a04      	ldr	r2, [pc, #16]	; (8009fd4 <prvSwitchTimerLists+0xc0>)
 8009fc4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009fc6:	4a04      	ldr	r2, [pc, #16]	; (8009fd8 <prvSwitchTimerLists+0xc4>)
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	6013      	str	r3, [r2, #0]
}
 8009fcc:	bf00      	nop
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20003744 	.word	0x20003744
 8009fd8:	20003748 	.word	0x20003748

08009fdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009fe2:	f7fd ffb7 	bl	8007f54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009fe6:	4b15      	ldr	r3, [pc, #84]	; (800a03c <prvCheckForValidListAndQueue+0x60>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d120      	bne.n	800a030 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009fee:	4814      	ldr	r0, [pc, #80]	; (800a040 <prvCheckForValidListAndQueue+0x64>)
 8009ff0:	f7fd fdcc 	bl	8007b8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ff4:	4813      	ldr	r0, [pc, #76]	; (800a044 <prvCheckForValidListAndQueue+0x68>)
 8009ff6:	f7fd fdc9 	bl	8007b8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ffa:	4b13      	ldr	r3, [pc, #76]	; (800a048 <prvCheckForValidListAndQueue+0x6c>)
 8009ffc:	4a10      	ldr	r2, [pc, #64]	; (800a040 <prvCheckForValidListAndQueue+0x64>)
 8009ffe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a000:	4b12      	ldr	r3, [pc, #72]	; (800a04c <prvCheckForValidListAndQueue+0x70>)
 800a002:	4a10      	ldr	r2, [pc, #64]	; (800a044 <prvCheckForValidListAndQueue+0x68>)
 800a004:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a006:	2300      	movs	r3, #0
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	4b11      	ldr	r3, [pc, #68]	; (800a050 <prvCheckForValidListAndQueue+0x74>)
 800a00c:	4a11      	ldr	r2, [pc, #68]	; (800a054 <prvCheckForValidListAndQueue+0x78>)
 800a00e:	2110      	movs	r1, #16
 800a010:	200a      	movs	r0, #10
 800a012:	f7fe f929 	bl	8008268 <xQueueGenericCreateStatic>
 800a016:	4603      	mov	r3, r0
 800a018:	4a08      	ldr	r2, [pc, #32]	; (800a03c <prvCheckForValidListAndQueue+0x60>)
 800a01a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a01c:	4b07      	ldr	r3, [pc, #28]	; (800a03c <prvCheckForValidListAndQueue+0x60>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d005      	beq.n	800a030 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a024:	4b05      	ldr	r3, [pc, #20]	; (800a03c <prvCheckForValidListAndQueue+0x60>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	490b      	ldr	r1, [pc, #44]	; (800a058 <prvCheckForValidListAndQueue+0x7c>)
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fe fd42 	bl	8008ab4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a030:	f7fd ffc0 	bl	8007fb4 <vPortExitCritical>
}
 800a034:	bf00      	nop
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	2000374c 	.word	0x2000374c
 800a040:	2000371c 	.word	0x2000371c
 800a044:	20003730 	.word	0x20003730
 800a048:	20003744 	.word	0x20003744
 800a04c:	20003748 	.word	0x20003748
 800a050:	200037f8 	.word	0x200037f8
 800a054:	20003758 	.word	0x20003758
 800a058:	0800c234 	.word	0x0800c234

0800a05c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	460b      	mov	r3, r1
 800a066:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a068:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a06c:	f7f7 fb96 	bl	800179c <USBD_static_malloc>
 800a070:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d109      	bne.n	800a08c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	32b0      	adds	r2, #176	; 0xb0
 800a082:	2100      	movs	r1, #0
 800a084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a088:	2302      	movs	r3, #2
 800a08a:	e0d4      	b.n	800a236 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a08c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a090:	2100      	movs	r1, #0
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f001 ffc6 	bl	800c024 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	32b0      	adds	r2, #176	; 0xb0
 800a0a2:	68f9      	ldr	r1, [r7, #12]
 800a0a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	32b0      	adds	r2, #176	; 0xb0
 800a0b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	7c1b      	ldrb	r3, [r3, #16]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d138      	bne.n	800a136 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a0c4:	4b5e      	ldr	r3, [pc, #376]	; (800a240 <USBD_CDC_Init+0x1e4>)
 800a0c6:	7819      	ldrb	r1, [r3, #0]
 800a0c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7f7 f950 	bl	8001374 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a0d4:	4b5a      	ldr	r3, [pc, #360]	; (800a240 <USBD_CDC_Init+0x1e4>)
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	f003 020f 	and.w	r2, r3, #15
 800a0dc:	6879      	ldr	r1, [r7, #4]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	440b      	add	r3, r1
 800a0e8:	3324      	adds	r3, #36	; 0x24
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a0ee:	4b55      	ldr	r3, [pc, #340]	; (800a244 <USBD_CDC_Init+0x1e8>)
 800a0f0:	7819      	ldrb	r1, [r3, #0]
 800a0f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7f7 f93b 	bl	8001374 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a0fe:	4b51      	ldr	r3, [pc, #324]	; (800a244 <USBD_CDC_Init+0x1e8>)
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	f003 020f 	and.w	r2, r3, #15
 800a106:	6879      	ldr	r1, [r7, #4]
 800a108:	4613      	mov	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	440b      	add	r3, r1
 800a112:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a116:	2201      	movs	r2, #1
 800a118:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a11a:	4b4b      	ldr	r3, [pc, #300]	; (800a248 <USBD_CDC_Init+0x1ec>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	f003 020f 	and.w	r2, r3, #15
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	4613      	mov	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	440b      	add	r3, r1
 800a12e:	3326      	adds	r3, #38	; 0x26
 800a130:	2210      	movs	r2, #16
 800a132:	801a      	strh	r2, [r3, #0]
 800a134:	e035      	b.n	800a1a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a136:	4b42      	ldr	r3, [pc, #264]	; (800a240 <USBD_CDC_Init+0x1e4>)
 800a138:	7819      	ldrb	r1, [r3, #0]
 800a13a:	2340      	movs	r3, #64	; 0x40
 800a13c:	2202      	movs	r2, #2
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7f7 f918 	bl	8001374 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a144:	4b3e      	ldr	r3, [pc, #248]	; (800a240 <USBD_CDC_Init+0x1e4>)
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	f003 020f 	and.w	r2, r3, #15
 800a14c:	6879      	ldr	r1, [r7, #4]
 800a14e:	4613      	mov	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	440b      	add	r3, r1
 800a158:	3324      	adds	r3, #36	; 0x24
 800a15a:	2201      	movs	r2, #1
 800a15c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a15e:	4b39      	ldr	r3, [pc, #228]	; (800a244 <USBD_CDC_Init+0x1e8>)
 800a160:	7819      	ldrb	r1, [r3, #0]
 800a162:	2340      	movs	r3, #64	; 0x40
 800a164:	2202      	movs	r2, #2
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7f7 f904 	bl	8001374 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a16c:	4b35      	ldr	r3, [pc, #212]	; (800a244 <USBD_CDC_Init+0x1e8>)
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	f003 020f 	and.w	r2, r3, #15
 800a174:	6879      	ldr	r1, [r7, #4]
 800a176:	4613      	mov	r3, r2
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4413      	add	r3, r2
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	440b      	add	r3, r1
 800a180:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a184:	2201      	movs	r2, #1
 800a186:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a188:	4b2f      	ldr	r3, [pc, #188]	; (800a248 <USBD_CDC_Init+0x1ec>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	f003 020f 	and.w	r2, r3, #15
 800a190:	6879      	ldr	r1, [r7, #4]
 800a192:	4613      	mov	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	440b      	add	r3, r1
 800a19c:	3326      	adds	r3, #38	; 0x26
 800a19e:	2210      	movs	r2, #16
 800a1a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a1a2:	4b29      	ldr	r3, [pc, #164]	; (800a248 <USBD_CDC_Init+0x1ec>)
 800a1a4:	7819      	ldrb	r1, [r3, #0]
 800a1a6:	2308      	movs	r3, #8
 800a1a8:	2203      	movs	r2, #3
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7f7 f8e2 	bl	8001374 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a1b0:	4b25      	ldr	r3, [pc, #148]	; (800a248 <USBD_CDC_Init+0x1ec>)
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	f003 020f 	and.w	r2, r3, #15
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	440b      	add	r3, r1
 800a1c4:	3324      	adds	r3, #36	; 0x24
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	33b0      	adds	r3, #176	; 0xb0
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a200:	2302      	movs	r3, #2
 800a202:	e018      	b.n	800a236 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	7c1b      	ldrb	r3, [r3, #16]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10a      	bne.n	800a222 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a20c:	4b0d      	ldr	r3, [pc, #52]	; (800a244 <USBD_CDC_Init+0x1e8>)
 800a20e:	7819      	ldrb	r1, [r3, #0]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7f7 fa24 	bl	8001668 <USBD_LL_PrepareReceive>
 800a220:	e008      	b.n	800a234 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a222:	4b08      	ldr	r3, [pc, #32]	; (800a244 <USBD_CDC_Init+0x1e8>)
 800a224:	7819      	ldrb	r1, [r3, #0]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a22c:	2340      	movs	r3, #64	; 0x40
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7f7 fa1a 	bl	8001668 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	2000010b 	.word	0x2000010b
 800a244:	2000010c 	.word	0x2000010c
 800a248:	2000010d 	.word	0x2000010d

0800a24c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a258:	4b3a      	ldr	r3, [pc, #232]	; (800a344 <USBD_CDC_DeInit+0xf8>)
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	4619      	mov	r1, r3
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7f7 f8c6 	bl	80013f0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a264:	4b37      	ldr	r3, [pc, #220]	; (800a344 <USBD_CDC_DeInit+0xf8>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	f003 020f 	and.w	r2, r3, #15
 800a26c:	6879      	ldr	r1, [r7, #4]
 800a26e:	4613      	mov	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4413      	add	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	440b      	add	r3, r1
 800a278:	3324      	adds	r3, #36	; 0x24
 800a27a:	2200      	movs	r2, #0
 800a27c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a27e:	4b32      	ldr	r3, [pc, #200]	; (800a348 <USBD_CDC_DeInit+0xfc>)
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	4619      	mov	r1, r3
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f7f7 f8b3 	bl	80013f0 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a28a:	4b2f      	ldr	r3, [pc, #188]	; (800a348 <USBD_CDC_DeInit+0xfc>)
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	f003 020f 	and.w	r2, r3, #15
 800a292:	6879      	ldr	r1, [r7, #4]
 800a294:	4613      	mov	r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4413      	add	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	440b      	add	r3, r1
 800a29e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a2a6:	4b29      	ldr	r3, [pc, #164]	; (800a34c <USBD_CDC_DeInit+0x100>)
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7f7 f89f 	bl	80013f0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a2b2:	4b26      	ldr	r3, [pc, #152]	; (800a34c <USBD_CDC_DeInit+0x100>)
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	f003 020f 	and.w	r2, r3, #15
 800a2ba:	6879      	ldr	r1, [r7, #4]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	440b      	add	r3, r1
 800a2c6:	3324      	adds	r3, #36	; 0x24
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a2cc:	4b1f      	ldr	r3, [pc, #124]	; (800a34c <USBD_CDC_DeInit+0x100>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	f003 020f 	and.w	r2, r3, #15
 800a2d4:	6879      	ldr	r1, [r7, #4]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	440b      	add	r3, r1
 800a2e0:	3326      	adds	r3, #38	; 0x26
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	32b0      	adds	r2, #176	; 0xb0
 800a2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d01f      	beq.n	800a338 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	33b0      	adds	r3, #176	; 0xb0
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	32b0      	adds	r2, #176	; 0xb0
 800a316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7f7 fa4c 	bl	80017b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	32b0      	adds	r2, #176	; 0xb0
 800a32a:	2100      	movs	r1, #0
 800a32c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	2000010b 	.word	0x2000010b
 800a348:	2000010c 	.word	0x2000010c
 800a34c:	2000010d 	.word	0x2000010d

0800a350 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	32b0      	adds	r2, #176	; 0xb0
 800a364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a368:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a36a:	2300      	movs	r3, #0
 800a36c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a36e:	2300      	movs	r3, #0
 800a370:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e0bf      	b.n	800a500 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d050      	beq.n	800a42e <USBD_CDC_Setup+0xde>
 800a38c:	2b20      	cmp	r3, #32
 800a38e:	f040 80af 	bne.w	800a4f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	88db      	ldrh	r3, [r3, #6]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d03a      	beq.n	800a410 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	b25b      	sxtb	r3, r3
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	da1b      	bge.n	800a3dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	33b0      	adds	r3, #176	; 0xb0
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a3ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	88d2      	ldrh	r2, [r2, #6]
 800a3c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	88db      	ldrh	r3, [r3, #6]
 800a3c6:	2b07      	cmp	r3, #7
 800a3c8:	bf28      	it	cs
 800a3ca:	2307      	movcs	r3, #7
 800a3cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	89fa      	ldrh	r2, [r7, #14]
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f001 fd73 	bl	800bec0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a3da:	e090      	b.n	800a4fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	785a      	ldrb	r2, [r3, #1]
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	88db      	ldrh	r3, [r3, #6]
 800a3ea:	2b3f      	cmp	r3, #63	; 0x3f
 800a3ec:	d803      	bhi.n	800a3f6 <USBD_CDC_Setup+0xa6>
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	88db      	ldrh	r3, [r3, #6]
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	e000      	b.n	800a3f8 <USBD_CDC_Setup+0xa8>
 800a3f6:	2240      	movs	r2, #64	; 0x40
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a3fe:	6939      	ldr	r1, [r7, #16]
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a406:	461a      	mov	r2, r3
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f001 fd85 	bl	800bf18 <USBD_CtlPrepareRx>
      break;
 800a40e:	e076      	b.n	800a4fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	33b0      	adds	r3, #176	; 0xb0
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	7850      	ldrb	r0, [r2, #1]
 800a426:	2200      	movs	r2, #0
 800a428:	6839      	ldr	r1, [r7, #0]
 800a42a:	4798      	blx	r3
      break;
 800a42c:	e067      	b.n	800a4fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	785b      	ldrb	r3, [r3, #1]
 800a432:	2b0b      	cmp	r3, #11
 800a434:	d851      	bhi.n	800a4da <USBD_CDC_Setup+0x18a>
 800a436:	a201      	add	r2, pc, #4	; (adr r2, 800a43c <USBD_CDC_Setup+0xec>)
 800a438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43c:	0800a46d 	.word	0x0800a46d
 800a440:	0800a4e9 	.word	0x0800a4e9
 800a444:	0800a4db 	.word	0x0800a4db
 800a448:	0800a4db 	.word	0x0800a4db
 800a44c:	0800a4db 	.word	0x0800a4db
 800a450:	0800a4db 	.word	0x0800a4db
 800a454:	0800a4db 	.word	0x0800a4db
 800a458:	0800a4db 	.word	0x0800a4db
 800a45c:	0800a4db 	.word	0x0800a4db
 800a460:	0800a4db 	.word	0x0800a4db
 800a464:	0800a497 	.word	0x0800a497
 800a468:	0800a4c1 	.word	0x0800a4c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a472:	b2db      	uxtb	r3, r3
 800a474:	2b03      	cmp	r3, #3
 800a476:	d107      	bne.n	800a488 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a478:	f107 030a 	add.w	r3, r7, #10
 800a47c:	2202      	movs	r2, #2
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f001 fd1d 	bl	800bec0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a486:	e032      	b.n	800a4ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f001 fca7 	bl	800bdde <USBD_CtlError>
            ret = USBD_FAIL;
 800a490:	2303      	movs	r3, #3
 800a492:	75fb      	strb	r3, [r7, #23]
          break;
 800a494:	e02b      	b.n	800a4ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b03      	cmp	r3, #3
 800a4a0:	d107      	bne.n	800a4b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a4a2:	f107 030d 	add.w	r3, r7, #13
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f001 fd08 	bl	800bec0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a4b0:	e01d      	b.n	800a4ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f001 fc92 	bl	800bdde <USBD_CtlError>
            ret = USBD_FAIL;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	75fb      	strb	r3, [r7, #23]
          break;
 800a4be:	e016      	b.n	800a4ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	2b03      	cmp	r3, #3
 800a4ca:	d00f      	beq.n	800a4ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a4cc:	6839      	ldr	r1, [r7, #0]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f001 fc85 	bl	800bdde <USBD_CtlError>
            ret = USBD_FAIL;
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a4d8:	e008      	b.n	800a4ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a4da:	6839      	ldr	r1, [r7, #0]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f001 fc7e 	bl	800bdde <USBD_CtlError>
          ret = USBD_FAIL;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	75fb      	strb	r3, [r7, #23]
          break;
 800a4e6:	e002      	b.n	800a4ee <USBD_CDC_Setup+0x19e>
          break;
 800a4e8:	bf00      	nop
 800a4ea:	e008      	b.n	800a4fe <USBD_CDC_Setup+0x1ae>
          break;
 800a4ec:	bf00      	nop
      }
      break;
 800a4ee:	e006      	b.n	800a4fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a4f0:	6839      	ldr	r1, [r7, #0]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f001 fc73 	bl	800bdde <USBD_CtlError>
      ret = USBD_FAIL;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a4fc:	bf00      	nop
  }

  return (uint8_t)ret;
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3718      	adds	r7, #24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	460b      	mov	r3, r1
 800a512:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a51a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	32b0      	adds	r2, #176	; 0xb0
 800a526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a52e:	2303      	movs	r3, #3
 800a530:	e065      	b.n	800a5fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	32b0      	adds	r2, #176	; 0xb0
 800a53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a540:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a542:	78fb      	ldrb	r3, [r7, #3]
 800a544:	f003 020f 	and.w	r2, r3, #15
 800a548:	6879      	ldr	r1, [r7, #4]
 800a54a:	4613      	mov	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4413      	add	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	440b      	add	r3, r1
 800a554:	3318      	adds	r3, #24
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d02f      	beq.n	800a5bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a55c:	78fb      	ldrb	r3, [r7, #3]
 800a55e:	f003 020f 	and.w	r2, r3, #15
 800a562:	6879      	ldr	r1, [r7, #4]
 800a564:	4613      	mov	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	440b      	add	r3, r1
 800a56e:	3318      	adds	r3, #24
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	78fb      	ldrb	r3, [r7, #3]
 800a574:	f003 010f 	and.w	r1, r3, #15
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	460b      	mov	r3, r1
 800a57c:	00db      	lsls	r3, r3, #3
 800a57e:	440b      	add	r3, r1
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4403      	add	r3, r0
 800a584:	3344      	adds	r3, #68	; 0x44
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	fbb2 f1f3 	udiv	r1, r2, r3
 800a58c:	fb01 f303 	mul.w	r3, r1, r3
 800a590:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a592:	2b00      	cmp	r3, #0
 800a594:	d112      	bne.n	800a5bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a596:	78fb      	ldrb	r3, [r7, #3]
 800a598:	f003 020f 	and.w	r2, r3, #15
 800a59c:	6879      	ldr	r1, [r7, #4]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	440b      	add	r3, r1
 800a5a8:	3318      	adds	r3, #24
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a5ae:	78f9      	ldrb	r1, [r7, #3]
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7f7 f81f 	bl	80015f8 <USBD_LL_Transmit>
 800a5ba:	e01f      	b.n	800a5fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	33b0      	adds	r3, #176	; 0xb0
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d010      	beq.n	800a5fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	33b0      	adds	r3, #176	; 0xb0
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a5f2:	68ba      	ldr	r2, [r7, #8]
 800a5f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a5f8:	78fa      	ldrb	r2, [r7, #3]
 800a5fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	460b      	mov	r3, r1
 800a610:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	32b0      	adds	r2, #176	; 0xb0
 800a61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a620:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	32b0      	adds	r2, #176	; 0xb0
 800a62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d101      	bne.n	800a638 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a634:	2303      	movs	r3, #3
 800a636:	e01a      	b.n	800a66e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a638:	78fb      	ldrb	r3, [r7, #3]
 800a63a:	4619      	mov	r1, r3
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7f7 f84b 	bl	80016d8 <USBD_LL_GetRxDataSize>
 800a642:	4602      	mov	r2, r0
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	33b0      	adds	r3, #176	; 0xb0
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4413      	add	r3, r2
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a668:	4611      	mov	r1, r2
 800a66a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b084      	sub	sp, #16
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	32b0      	adds	r2, #176	; 0xb0
 800a688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a68c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a694:	2303      	movs	r3, #3
 800a696:	e025      	b.n	800a6e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	33b0      	adds	r3, #176	; 0xb0
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	4413      	add	r3, r2
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d01a      	beq.n	800a6e2 <USBD_CDC_EP0_RxReady+0x6c>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a6b2:	2bff      	cmp	r3, #255	; 0xff
 800a6b4:	d015      	beq.n	800a6e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	33b0      	adds	r3, #176	; 0xb0
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a6ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a6d6:	b292      	uxth	r2, r2
 800a6d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	22ff      	movs	r2, #255	; 0xff
 800a6de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a6f4:	2182      	movs	r1, #130	; 0x82
 800a6f6:	4818      	ldr	r0, [pc, #96]	; (800a758 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a6f8:	f000 fd0f 	bl	800b11a <USBD_GetEpDesc>
 800a6fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a6fe:	2101      	movs	r1, #1
 800a700:	4815      	ldr	r0, [pc, #84]	; (800a758 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a702:	f000 fd0a 	bl	800b11a <USBD_GetEpDesc>
 800a706:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a708:	2181      	movs	r1, #129	; 0x81
 800a70a:	4813      	ldr	r0, [pc, #76]	; (800a758 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a70c:	f000 fd05 	bl	800b11a <USBD_GetEpDesc>
 800a710:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	2210      	movs	r2, #16
 800a71c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d006      	beq.n	800a732 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	2200      	movs	r2, #0
 800a728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a72c:	711a      	strb	r2, [r3, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d006      	beq.n	800a746 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a740:	711a      	strb	r2, [r3, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2243      	movs	r2, #67	; 0x43
 800a74a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a74c:	4b02      	ldr	r3, [pc, #8]	; (800a758 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3718      	adds	r7, #24
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	200000c8 	.word	0x200000c8

0800a75c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a764:	2182      	movs	r1, #130	; 0x82
 800a766:	4818      	ldr	r0, [pc, #96]	; (800a7c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a768:	f000 fcd7 	bl	800b11a <USBD_GetEpDesc>
 800a76c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a76e:	2101      	movs	r1, #1
 800a770:	4815      	ldr	r0, [pc, #84]	; (800a7c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a772:	f000 fcd2 	bl	800b11a <USBD_GetEpDesc>
 800a776:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a778:	2181      	movs	r1, #129	; 0x81
 800a77a:	4813      	ldr	r0, [pc, #76]	; (800a7c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a77c:	f000 fccd 	bl	800b11a <USBD_GetEpDesc>
 800a780:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d002      	beq.n	800a78e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2210      	movs	r2, #16
 800a78c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d006      	beq.n	800a7a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	2200      	movs	r2, #0
 800a798:	711a      	strb	r2, [r3, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f042 0202 	orr.w	r2, r2, #2
 800a7a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d006      	beq.n	800a7b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	711a      	strb	r2, [r3, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f042 0202 	orr.w	r2, r2, #2
 800a7b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2243      	movs	r2, #67	; 0x43
 800a7ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a7bc:	4b02      	ldr	r3, [pc, #8]	; (800a7c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	200000c8 	.word	0x200000c8

0800a7cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a7d4:	2182      	movs	r1, #130	; 0x82
 800a7d6:	4818      	ldr	r0, [pc, #96]	; (800a838 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7d8:	f000 fc9f 	bl	800b11a <USBD_GetEpDesc>
 800a7dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a7de:	2101      	movs	r1, #1
 800a7e0:	4815      	ldr	r0, [pc, #84]	; (800a838 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7e2:	f000 fc9a 	bl	800b11a <USBD_GetEpDesc>
 800a7e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a7e8:	2181      	movs	r1, #129	; 0x81
 800a7ea:	4813      	ldr	r0, [pc, #76]	; (800a838 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7ec:	f000 fc95 	bl	800b11a <USBD_GetEpDesc>
 800a7f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d002      	beq.n	800a7fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2210      	movs	r2, #16
 800a7fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d006      	beq.n	800a812 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	2200      	movs	r2, #0
 800a808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a80c:	711a      	strb	r2, [r3, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d006      	beq.n	800a826 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a820:	711a      	strb	r2, [r3, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2243      	movs	r2, #67	; 0x43
 800a82a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a82c:	4b02      	ldr	r3, [pc, #8]	; (800a838 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	200000c8 	.word	0x200000c8

0800a83c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	220a      	movs	r2, #10
 800a848:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a84a:	4b03      	ldr	r3, [pc, #12]	; (800a858 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr
 800a858:	20000084 	.word	0x20000084

0800a85c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d101      	bne.n	800a870 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e009      	b.n	800a884 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	33b0      	adds	r3, #176	; 0xb0
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	4413      	add	r3, r2
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a890:	b480      	push	{r7}
 800a892:	b087      	sub	sp, #28
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	32b0      	adds	r2, #176	; 0xb0
 800a8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	e008      	b.n	800a8c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	371c      	adds	r7, #28
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	32b0      	adds	r2, #176	; 0xb0
 800a8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e004      	b.n	800a902 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
	...

0800a910 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	32b0      	adds	r2, #176	; 0xb0
 800a922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a926:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	32b0      	adds	r2, #176	; 0xb0
 800a932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e018      	b.n	800a970 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	7c1b      	ldrb	r3, [r3, #16]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10a      	bne.n	800a95c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a946:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <USBD_CDC_ReceivePacket+0x68>)
 800a948:	7819      	ldrb	r1, [r3, #0]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a950:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f7f6 fe87 	bl	8001668 <USBD_LL_PrepareReceive>
 800a95a:	e008      	b.n	800a96e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a95c:	4b06      	ldr	r3, [pc, #24]	; (800a978 <USBD_CDC_ReceivePacket+0x68>)
 800a95e:	7819      	ldrb	r1, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a966:	2340      	movs	r3, #64	; 0x40
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7f6 fe7d 	bl	8001668 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	2000010c 	.word	0x2000010c

0800a97c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b086      	sub	sp, #24
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	4613      	mov	r3, r2
 800a988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d101      	bne.n	800a994 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a990:	2303      	movs	r3, #3
 800a992:	e01f      	b.n	800a9d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	79fa      	ldrb	r2, [r7, #7]
 800a9c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f7f6 fc55 	bl	8001278 <USBD_LL_Init>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a9d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3718      	adds	r7, #24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d101      	bne.n	800a9f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e025      	b.n	800aa40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	32ae      	adds	r2, #174	; 0xae
 800aa06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00f      	beq.n	800aa30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	32ae      	adds	r2, #174	; 0xae
 800aa1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	f107 020e 	add.w	r2, r7, #14
 800aa24:	4610      	mov	r0, r2
 800aa26:	4798      	blx	r3
 800aa28:	4602      	mov	r2, r0
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f7f6 fc5d 	bl	8001310 <USBD_LL_Start>
 800aa56:	4603      	mov	r3, r0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b084      	sub	sp, #16
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa82:	2300      	movs	r3, #0
 800aa84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d009      	beq.n	800aaa4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	78fa      	ldrb	r2, [r7, #3]
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	4798      	blx	r3
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b084      	sub	sp, #16
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	460b      	mov	r3, r1
 800aab8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	78fa      	ldrb	r2, [r7, #3]
 800aac8:	4611      	mov	r1, r2
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	4798      	blx	r3
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aad4:	2303      	movs	r3, #3
 800aad6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b084      	sub	sp, #16
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f001 f938 	bl	800bd6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ab08:	461a      	mov	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab16:	f003 031f 	and.w	r3, r3, #31
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d01a      	beq.n	800ab54 <USBD_LL_SetupStage+0x72>
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d822      	bhi.n	800ab68 <USBD_LL_SetupStage+0x86>
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <USBD_LL_SetupStage+0x4a>
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d00a      	beq.n	800ab40 <USBD_LL_SetupStage+0x5e>
 800ab2a:	e01d      	b.n	800ab68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fb65 	bl	800b204 <USBD_StdDevReq>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab3e:	e020      	b.n	800ab82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab46:	4619      	mov	r1, r3
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 fbcd 	bl	800b2e8 <USBD_StdItfReq>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	73fb      	strb	r3, [r7, #15]
      break;
 800ab52:	e016      	b.n	800ab82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fc2f 	bl	800b3c0 <USBD_StdEPReq>
 800ab62:	4603      	mov	r3, r0
 800ab64:	73fb      	strb	r3, [r7, #15]
      break;
 800ab66:	e00c      	b.n	800ab82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7f6 fc70 	bl	800145c <USBD_LL_StallEP>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab80:	bf00      	nop
  }

  return ret;
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	460b      	mov	r3, r1
 800ab96:	607a      	str	r2, [r7, #4]
 800ab98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ab9e:	7afb      	ldrb	r3, [r7, #11]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d16e      	bne.n	800ac82 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800abaa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	f040 8098 	bne.w	800ace8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	689a      	ldr	r2, [r3, #8]
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d913      	bls.n	800abec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	689a      	ldr	r2, [r3, #8]
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	1ad2      	subs	r2, r2, r3
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	68da      	ldr	r2, [r3, #12]
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	4293      	cmp	r3, r2
 800abdc:	bf28      	it	cs
 800abde:	4613      	movcs	r3, r2
 800abe0:	461a      	mov	r2, r3
 800abe2:	6879      	ldr	r1, [r7, #4]
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f001 f9b4 	bl	800bf52 <USBD_CtlContinueRx>
 800abea:	e07d      	b.n	800ace8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800abf2:	f003 031f 	and.w	r3, r3, #31
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d014      	beq.n	800ac24 <USBD_LL_DataOutStage+0x98>
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d81d      	bhi.n	800ac3a <USBD_LL_DataOutStage+0xae>
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d002      	beq.n	800ac08 <USBD_LL_DataOutStage+0x7c>
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d003      	beq.n	800ac0e <USBD_LL_DataOutStage+0x82>
 800ac06:	e018      	b.n	800ac3a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	75bb      	strb	r3, [r7, #22]
            break;
 800ac0c:	e018      	b.n	800ac40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	4619      	mov	r1, r3
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 fa64 	bl	800b0e6 <USBD_CoreFindIF>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	75bb      	strb	r3, [r7, #22]
            break;
 800ac22:	e00d      	b.n	800ac40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f000 fa66 	bl	800b100 <USBD_CoreFindEP>
 800ac34:	4603      	mov	r3, r0
 800ac36:	75bb      	strb	r3, [r7, #22]
            break;
 800ac38:	e002      	b.n	800ac40 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	75bb      	strb	r3, [r7, #22]
            break;
 800ac3e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ac40:	7dbb      	ldrb	r3, [r7, #22]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d119      	bne.n	800ac7a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	d113      	bne.n	800ac7a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ac52:	7dba      	ldrb	r2, [r7, #22]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	32ae      	adds	r2, #174	; 0xae
 800ac58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00b      	beq.n	800ac7a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ac62:	7dba      	ldrb	r2, [r7, #22]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ac6a:	7dba      	ldrb	r2, [r7, #22]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	32ae      	adds	r2, #174	; 0xae
 800ac70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f001 f97a 	bl	800bf74 <USBD_CtlSendStatus>
 800ac80:	e032      	b.n	800ace8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ac82:	7afb      	ldrb	r3, [r7, #11]
 800ac84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f000 fa37 	bl	800b100 <USBD_CoreFindEP>
 800ac92:	4603      	mov	r3, r0
 800ac94:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac96:	7dbb      	ldrb	r3, [r7, #22]
 800ac98:	2bff      	cmp	r3, #255	; 0xff
 800ac9a:	d025      	beq.n	800ace8 <USBD_LL_DataOutStage+0x15c>
 800ac9c:	7dbb      	ldrb	r3, [r7, #22]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d122      	bne.n	800ace8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	2b03      	cmp	r3, #3
 800acac:	d117      	bne.n	800acde <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800acae:	7dba      	ldrb	r2, [r7, #22]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	32ae      	adds	r2, #174	; 0xae
 800acb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb8:	699b      	ldr	r3, [r3, #24]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00f      	beq.n	800acde <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800acbe:	7dba      	ldrb	r2, [r7, #22]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800acc6:	7dba      	ldrb	r2, [r7, #22]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	32ae      	adds	r2, #174	; 0xae
 800accc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	7afa      	ldrb	r2, [r7, #11]
 800acd4:	4611      	mov	r1, r2
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	4798      	blx	r3
 800acda:	4603      	mov	r3, r0
 800acdc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800acde:	7dfb      	ldrb	r3, [r7, #23]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ace4:	7dfb      	ldrb	r3, [r7, #23]
 800ace6:	e000      	b.n	800acea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b086      	sub	sp, #24
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	60f8      	str	r0, [r7, #12]
 800acfa:	460b      	mov	r3, r1
 800acfc:	607a      	str	r2, [r7, #4]
 800acfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ad00:	7afb      	ldrb	r3, [r7, #11]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d16f      	bne.n	800ade6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	3314      	adds	r3, #20
 800ad0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d15a      	bne.n	800adcc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	689a      	ldr	r2, [r3, #8]
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d914      	bls.n	800ad4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	689a      	ldr	r2, [r3, #8]
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	1ad2      	subs	r2, r2, r3
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	461a      	mov	r2, r3
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f001 f8dc 	bl	800bef6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad3e:	2300      	movs	r3, #0
 800ad40:	2200      	movs	r2, #0
 800ad42:	2100      	movs	r1, #0
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7f6 fc8f 	bl	8001668 <USBD_LL_PrepareReceive>
 800ad4a:	e03f      	b.n	800adcc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	68da      	ldr	r2, [r3, #12]
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d11c      	bne.n	800ad92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d316      	bcc.n	800ad92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	685a      	ldr	r2, [r3, #4]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d20f      	bcs.n	800ad92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad72:	2200      	movs	r2, #0
 800ad74:	2100      	movs	r1, #0
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f001 f8bd 	bl	800bef6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad84:	2300      	movs	r3, #0
 800ad86:	2200      	movs	r2, #0
 800ad88:	2100      	movs	r1, #0
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f7f6 fc6c 	bl	8001668 <USBD_LL_PrepareReceive>
 800ad90:	e01c      	b.n	800adcc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d10f      	bne.n	800adbe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d009      	beq.n	800adbe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800adbe:	2180      	movs	r1, #128	; 0x80
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7f6 fb4b 	bl	800145c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f001 f8e7 	bl	800bf9a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d03a      	beq.n	800ae4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f7ff fe42 	bl	800aa60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ade4:	e032      	b.n	800ae4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ade6:	7afb      	ldrb	r3, [r7, #11]
 800ade8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adec:	b2db      	uxtb	r3, r3
 800adee:	4619      	mov	r1, r3
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f000 f985 	bl	800b100 <USBD_CoreFindEP>
 800adf6:	4603      	mov	r3, r0
 800adf8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	2bff      	cmp	r3, #255	; 0xff
 800adfe:	d025      	beq.n	800ae4c <USBD_LL_DataInStage+0x15a>
 800ae00:	7dfb      	ldrb	r3, [r7, #23]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d122      	bne.n	800ae4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b03      	cmp	r3, #3
 800ae10:	d11c      	bne.n	800ae4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ae12:	7dfa      	ldrb	r2, [r7, #23]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	32ae      	adds	r2, #174	; 0xae
 800ae18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d014      	beq.n	800ae4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ae22:	7dfa      	ldrb	r2, [r7, #23]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ae2a:	7dfa      	ldrb	r2, [r7, #23]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	32ae      	adds	r2, #174	; 0xae
 800ae30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae34:	695b      	ldr	r3, [r3, #20]
 800ae36:	7afa      	ldrb	r2, [r7, #11]
 800ae38:	4611      	mov	r1, r2
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	4798      	blx	r3
 800ae3e:	4603      	mov	r3, r0
 800ae40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ae42:	7dbb      	ldrb	r3, [r7, #22]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d001      	beq.n	800ae4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ae48:	7dbb      	ldrb	r3, [r7, #22]
 800ae4a:	e000      	b.n	800ae4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3718      	adds	r7, #24
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b084      	sub	sp, #16
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2201      	movs	r2, #1
 800ae66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d014      	beq.n	800aebc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00e      	beq.n	800aebc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	6852      	ldr	r2, [r2, #4]
 800aeaa:	b2d2      	uxtb	r2, r2
 800aeac:	4611      	mov	r1, r2
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	4798      	blx	r3
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aebc:	2340      	movs	r3, #64	; 0x40
 800aebe:	2200      	movs	r2, #0
 800aec0:	2100      	movs	r1, #0
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7f6 fa56 	bl	8001374 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2240      	movs	r2, #64	; 0x40
 800aed4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aed8:	2340      	movs	r3, #64	; 0x40
 800aeda:	2200      	movs	r2, #0
 800aedc:	2180      	movs	r1, #128	; 0x80
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7f6 fa48 	bl	8001374 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2240      	movs	r2, #64	; 0x40
 800aeee:	621a      	str	r2, [r3, #32]

  return ret;
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b083      	sub	sp, #12
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	460b      	mov	r3, r1
 800af04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	78fa      	ldrb	r2, [r7, #3]
 800af0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	370c      	adds	r7, #12
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr

0800af1a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af1a:	b480      	push	{r7}
 800af1c:	b083      	sub	sp, #12
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	2b04      	cmp	r3, #4
 800af2c:	d006      	beq.n	800af3c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af34:	b2da      	uxtb	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2204      	movs	r2, #4
 800af40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	370c      	adds	r7, #12
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr

0800af52 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b04      	cmp	r3, #4
 800af64:	d106      	bne.n	800af74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800af6c:	b2da      	uxtb	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	370c      	adds	r7, #12
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b03      	cmp	r3, #3
 800af94:	d110      	bne.n	800afb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00b      	beq.n	800afb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afa6:	69db      	ldr	r3, [r3, #28]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d005      	beq.n	800afb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afb2:	69db      	ldr	r3, [r3, #28]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b082      	sub	sp, #8
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	460b      	mov	r3, r1
 800afcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	32ae      	adds	r2, #174	; 0xae
 800afd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e01c      	b.n	800b01e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b03      	cmp	r3, #3
 800afee:	d115      	bne.n	800b01c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	32ae      	adds	r2, #174	; 0xae
 800affa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00b      	beq.n	800b01c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	32ae      	adds	r2, #174	; 0xae
 800b00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b012:	6a1b      	ldr	r3, [r3, #32]
 800b014:	78fa      	ldrb	r2, [r7, #3]
 800b016:	4611      	mov	r1, r2
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b082      	sub	sp, #8
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	460b      	mov	r3, r1
 800b030:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	32ae      	adds	r2, #174	; 0xae
 800b03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d101      	bne.n	800b048 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b044:	2303      	movs	r3, #3
 800b046:	e01c      	b.n	800b082 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	2b03      	cmp	r3, #3
 800b052:	d115      	bne.n	800b080 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	32ae      	adds	r2, #174	; 0xae
 800b05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00b      	beq.n	800b080 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	32ae      	adds	r2, #174	; 0xae
 800b072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b078:	78fa      	ldrb	r2, [r7, #3]
 800b07a:	4611      	mov	r1, r2
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b08a:	b480      	push	{r7}
 800b08c:	b083      	sub	sp, #12
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00e      	beq.n	800b0dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	6852      	ldr	r2, [r2, #4]
 800b0ca:	b2d2      	uxtb	r2, r2
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	4798      	blx	r3
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b083      	sub	sp, #12
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b0f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b10c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b10e:	4618      	mov	r0, r3
 800b110:	370c      	adds	r7, #12
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b086      	sub	sp, #24
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	460b      	mov	r3, r1
 800b124:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b12e:	2300      	movs	r3, #0
 800b130:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	885b      	ldrh	r3, [r3, #2]
 800b136:	b29a      	uxth	r2, r3
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	429a      	cmp	r2, r3
 800b140:	d920      	bls.n	800b184 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	b29b      	uxth	r3, r3
 800b148:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b14a:	e013      	b.n	800b174 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b14c:	f107 030a 	add.w	r3, r7, #10
 800b150:	4619      	mov	r1, r3
 800b152:	6978      	ldr	r0, [r7, #20]
 800b154:	f000 f81b 	bl	800b18e <USBD_GetNextDesc>
 800b158:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	785b      	ldrb	r3, [r3, #1]
 800b15e:	2b05      	cmp	r3, #5
 800b160:	d108      	bne.n	800b174 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	789b      	ldrb	r3, [r3, #2]
 800b16a:	78fa      	ldrb	r2, [r7, #3]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d008      	beq.n	800b182 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b170:	2300      	movs	r3, #0
 800b172:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	885b      	ldrh	r3, [r3, #2]
 800b178:	b29a      	uxth	r2, r3
 800b17a:	897b      	ldrh	r3, [r7, #10]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d8e5      	bhi.n	800b14c <USBD_GetEpDesc+0x32>
 800b180:	e000      	b.n	800b184 <USBD_GetEpDesc+0x6a>
          break;
 800b182:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b184:	693b      	ldr	r3, [r7, #16]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3718      	adds	r7, #24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b18e:	b480      	push	{r7}
 800b190:	b085      	sub	sp, #20
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	881a      	ldrh	r2, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	4413      	add	r3, r2
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3714      	adds	r7, #20
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b087      	sub	sp, #28
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b1e6:	8a3b      	ldrh	r3, [r7, #16]
 800b1e8:	021b      	lsls	r3, r3, #8
 800b1ea:	b21a      	sxth	r2, r3
 800b1ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	b21b      	sxth	r3, r3
 800b1f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b1f6:	89fb      	ldrh	r3, [r7, #14]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	371c      	adds	r7, #28
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b21a:	2b40      	cmp	r3, #64	; 0x40
 800b21c:	d005      	beq.n	800b22a <USBD_StdDevReq+0x26>
 800b21e:	2b40      	cmp	r3, #64	; 0x40
 800b220:	d857      	bhi.n	800b2d2 <USBD_StdDevReq+0xce>
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00f      	beq.n	800b246 <USBD_StdDevReq+0x42>
 800b226:	2b20      	cmp	r3, #32
 800b228:	d153      	bne.n	800b2d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	32ae      	adds	r2, #174	; 0xae
 800b234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	6839      	ldr	r1, [r7, #0]
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	4798      	blx	r3
 800b240:	4603      	mov	r3, r0
 800b242:	73fb      	strb	r3, [r7, #15]
      break;
 800b244:	e04a      	b.n	800b2dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	785b      	ldrb	r3, [r3, #1]
 800b24a:	2b09      	cmp	r3, #9
 800b24c:	d83b      	bhi.n	800b2c6 <USBD_StdDevReq+0xc2>
 800b24e:	a201      	add	r2, pc, #4	; (adr r2, 800b254 <USBD_StdDevReq+0x50>)
 800b250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b254:	0800b2a9 	.word	0x0800b2a9
 800b258:	0800b2bd 	.word	0x0800b2bd
 800b25c:	0800b2c7 	.word	0x0800b2c7
 800b260:	0800b2b3 	.word	0x0800b2b3
 800b264:	0800b2c7 	.word	0x0800b2c7
 800b268:	0800b287 	.word	0x0800b287
 800b26c:	0800b27d 	.word	0x0800b27d
 800b270:	0800b2c7 	.word	0x0800b2c7
 800b274:	0800b29f 	.word	0x0800b29f
 800b278:	0800b291 	.word	0x0800b291
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fa3c 	bl	800b6fc <USBD_GetDescriptor>
          break;
 800b284:	e024      	b.n	800b2d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b286:	6839      	ldr	r1, [r7, #0]
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 fbcb 	bl	800ba24 <USBD_SetAddress>
          break;
 800b28e:	e01f      	b.n	800b2d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b290:	6839      	ldr	r1, [r7, #0]
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 fc0a 	bl	800baac <USBD_SetConfig>
 800b298:	4603      	mov	r3, r0
 800b29a:	73fb      	strb	r3, [r7, #15]
          break;
 800b29c:	e018      	b.n	800b2d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fcad 	bl	800bc00 <USBD_GetConfig>
          break;
 800b2a6:	e013      	b.n	800b2d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fcde 	bl	800bc6c <USBD_GetStatus>
          break;
 800b2b0:	e00e      	b.n	800b2d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fd0d 	bl	800bcd4 <USBD_SetFeature>
          break;
 800b2ba:	e009      	b.n	800b2d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b2bc:	6839      	ldr	r1, [r7, #0]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fd31 	bl	800bd26 <USBD_ClrFeature>
          break;
 800b2c4:	e004      	b.n	800b2d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b2c6:	6839      	ldr	r1, [r7, #0]
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fd88 	bl	800bdde <USBD_CtlError>
          break;
 800b2ce:	bf00      	nop
      }
      break;
 800b2d0:	e004      	b.n	800b2dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fd82 	bl	800bdde <USBD_CtlError>
      break;
 800b2da:	bf00      	nop
  }

  return ret;
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop

0800b2e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2fe:	2b40      	cmp	r3, #64	; 0x40
 800b300:	d005      	beq.n	800b30e <USBD_StdItfReq+0x26>
 800b302:	2b40      	cmp	r3, #64	; 0x40
 800b304:	d852      	bhi.n	800b3ac <USBD_StdItfReq+0xc4>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d001      	beq.n	800b30e <USBD_StdItfReq+0x26>
 800b30a:	2b20      	cmp	r3, #32
 800b30c:	d14e      	bne.n	800b3ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b314:	b2db      	uxtb	r3, r3
 800b316:	3b01      	subs	r3, #1
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d840      	bhi.n	800b39e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	889b      	ldrh	r3, [r3, #4]
 800b320:	b2db      	uxtb	r3, r3
 800b322:	2b01      	cmp	r3, #1
 800b324:	d836      	bhi.n	800b394 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	889b      	ldrh	r3, [r3, #4]
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	4619      	mov	r1, r3
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7ff fed9 	bl	800b0e6 <USBD_CoreFindIF>
 800b334:	4603      	mov	r3, r0
 800b336:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b338:	7bbb      	ldrb	r3, [r7, #14]
 800b33a:	2bff      	cmp	r3, #255	; 0xff
 800b33c:	d01d      	beq.n	800b37a <USBD_StdItfReq+0x92>
 800b33e:	7bbb      	ldrb	r3, [r7, #14]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d11a      	bne.n	800b37a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b344:	7bba      	ldrb	r2, [r7, #14]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	32ae      	adds	r2, #174	; 0xae
 800b34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00f      	beq.n	800b374 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b354:	7bba      	ldrb	r2, [r7, #14]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b35c:	7bba      	ldrb	r2, [r7, #14]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	32ae      	adds	r2, #174	; 0xae
 800b362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	4798      	blx	r3
 800b36e:	4603      	mov	r3, r0
 800b370:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b372:	e004      	b.n	800b37e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b374:	2303      	movs	r3, #3
 800b376:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b378:	e001      	b.n	800b37e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b37a:	2303      	movs	r3, #3
 800b37c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	88db      	ldrh	r3, [r3, #6]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d110      	bne.n	800b3a8 <USBD_StdItfReq+0xc0>
 800b386:	7bfb      	ldrb	r3, [r7, #15]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10d      	bne.n	800b3a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 fdf1 	bl	800bf74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b392:	e009      	b.n	800b3a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fd21 	bl	800bdde <USBD_CtlError>
          break;
 800b39c:	e004      	b.n	800b3a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b39e:	6839      	ldr	r1, [r7, #0]
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fd1c 	bl	800bdde <USBD_CtlError>
          break;
 800b3a6:	e000      	b.n	800b3aa <USBD_StdItfReq+0xc2>
          break;
 800b3a8:	bf00      	nop
      }
      break;
 800b3aa:	e004      	b.n	800b3b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fd15 	bl	800bdde <USBD_CtlError>
      break;
 800b3b4:	bf00      	nop
  }

  return ret;
 800b3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	889b      	ldrh	r3, [r3, #4]
 800b3d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3dc:	2b40      	cmp	r3, #64	; 0x40
 800b3de:	d007      	beq.n	800b3f0 <USBD_StdEPReq+0x30>
 800b3e0:	2b40      	cmp	r3, #64	; 0x40
 800b3e2:	f200 817f 	bhi.w	800b6e4 <USBD_StdEPReq+0x324>
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d02a      	beq.n	800b440 <USBD_StdEPReq+0x80>
 800b3ea:	2b20      	cmp	r3, #32
 800b3ec:	f040 817a 	bne.w	800b6e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b3f0:	7bbb      	ldrb	r3, [r7, #14]
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f7ff fe83 	bl	800b100 <USBD_CoreFindEP>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3fe:	7b7b      	ldrb	r3, [r7, #13]
 800b400:	2bff      	cmp	r3, #255	; 0xff
 800b402:	f000 8174 	beq.w	800b6ee <USBD_StdEPReq+0x32e>
 800b406:	7b7b      	ldrb	r3, [r7, #13]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f040 8170 	bne.w	800b6ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b40e:	7b7a      	ldrb	r2, [r7, #13]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b416:	7b7a      	ldrb	r2, [r7, #13]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	32ae      	adds	r2, #174	; 0xae
 800b41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 8163 	beq.w	800b6ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b428:	7b7a      	ldrb	r2, [r7, #13]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	32ae      	adds	r2, #174	; 0xae
 800b42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	6839      	ldr	r1, [r7, #0]
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	4798      	blx	r3
 800b43a:	4603      	mov	r3, r0
 800b43c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b43e:	e156      	b.n	800b6ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	785b      	ldrb	r3, [r3, #1]
 800b444:	2b03      	cmp	r3, #3
 800b446:	d008      	beq.n	800b45a <USBD_StdEPReq+0x9a>
 800b448:	2b03      	cmp	r3, #3
 800b44a:	f300 8145 	bgt.w	800b6d8 <USBD_StdEPReq+0x318>
 800b44e:	2b00      	cmp	r3, #0
 800b450:	f000 809b 	beq.w	800b58a <USBD_StdEPReq+0x1ca>
 800b454:	2b01      	cmp	r3, #1
 800b456:	d03c      	beq.n	800b4d2 <USBD_StdEPReq+0x112>
 800b458:	e13e      	b.n	800b6d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b460:	b2db      	uxtb	r3, r3
 800b462:	2b02      	cmp	r3, #2
 800b464:	d002      	beq.n	800b46c <USBD_StdEPReq+0xac>
 800b466:	2b03      	cmp	r3, #3
 800b468:	d016      	beq.n	800b498 <USBD_StdEPReq+0xd8>
 800b46a:	e02c      	b.n	800b4c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b46c:	7bbb      	ldrb	r3, [r7, #14]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00d      	beq.n	800b48e <USBD_StdEPReq+0xce>
 800b472:	7bbb      	ldrb	r3, [r7, #14]
 800b474:	2b80      	cmp	r3, #128	; 0x80
 800b476:	d00a      	beq.n	800b48e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b478:	7bbb      	ldrb	r3, [r7, #14]
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7f5 ffed 	bl	800145c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b482:	2180      	movs	r1, #128	; 0x80
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f7f5 ffe9 	bl	800145c <USBD_LL_StallEP>
 800b48a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b48c:	e020      	b.n	800b4d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b48e:	6839      	ldr	r1, [r7, #0]
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 fca4 	bl	800bdde <USBD_CtlError>
              break;
 800b496:	e01b      	b.n	800b4d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	885b      	ldrh	r3, [r3, #2]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10e      	bne.n	800b4be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00b      	beq.n	800b4be <USBD_StdEPReq+0xfe>
 800b4a6:	7bbb      	ldrb	r3, [r7, #14]
 800b4a8:	2b80      	cmp	r3, #128	; 0x80
 800b4aa:	d008      	beq.n	800b4be <USBD_StdEPReq+0xfe>
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	88db      	ldrh	r3, [r3, #6]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d104      	bne.n	800b4be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4b4:	7bbb      	ldrb	r3, [r7, #14]
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7f5 ffcf 	bl	800145c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fd58 	bl	800bf74 <USBD_CtlSendStatus>

              break;
 800b4c4:	e004      	b.n	800b4d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fc88 	bl	800bdde <USBD_CtlError>
              break;
 800b4ce:	bf00      	nop
          }
          break;
 800b4d0:	e107      	b.n	800b6e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d002      	beq.n	800b4e4 <USBD_StdEPReq+0x124>
 800b4de:	2b03      	cmp	r3, #3
 800b4e0:	d016      	beq.n	800b510 <USBD_StdEPReq+0x150>
 800b4e2:	e04b      	b.n	800b57c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4e4:	7bbb      	ldrb	r3, [r7, #14]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00d      	beq.n	800b506 <USBD_StdEPReq+0x146>
 800b4ea:	7bbb      	ldrb	r3, [r7, #14]
 800b4ec:	2b80      	cmp	r3, #128	; 0x80
 800b4ee:	d00a      	beq.n	800b506 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7f5 ffb1 	bl	800145c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4fa:	2180      	movs	r1, #128	; 0x80
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7f5 ffad 	bl	800145c <USBD_LL_StallEP>
 800b502:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b504:	e040      	b.n	800b588 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b506:	6839      	ldr	r1, [r7, #0]
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fc68 	bl	800bdde <USBD_CtlError>
              break;
 800b50e:	e03b      	b.n	800b588 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	885b      	ldrh	r3, [r3, #2]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d136      	bne.n	800b586 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b518:	7bbb      	ldrb	r3, [r7, #14]
 800b51a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d004      	beq.n	800b52c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b522:	7bbb      	ldrb	r3, [r7, #14]
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7f5 ffce 	bl	80014c8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 fd21 	bl	800bf74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b532:	7bbb      	ldrb	r3, [r7, #14]
 800b534:	4619      	mov	r1, r3
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7ff fde2 	bl	800b100 <USBD_CoreFindEP>
 800b53c:	4603      	mov	r3, r0
 800b53e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b540:	7b7b      	ldrb	r3, [r7, #13]
 800b542:	2bff      	cmp	r3, #255	; 0xff
 800b544:	d01f      	beq.n	800b586 <USBD_StdEPReq+0x1c6>
 800b546:	7b7b      	ldrb	r3, [r7, #13]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d11c      	bne.n	800b586 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b54c:	7b7a      	ldrb	r2, [r7, #13]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b554:	7b7a      	ldrb	r2, [r7, #13]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	32ae      	adds	r2, #174	; 0xae
 800b55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d010      	beq.n	800b586 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b564:	7b7a      	ldrb	r2, [r7, #13]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	32ae      	adds	r2, #174	; 0xae
 800b56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	6839      	ldr	r1, [r7, #0]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	4798      	blx	r3
 800b576:	4603      	mov	r3, r0
 800b578:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b57a:	e004      	b.n	800b586 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fc2d 	bl	800bdde <USBD_CtlError>
              break;
 800b584:	e000      	b.n	800b588 <USBD_StdEPReq+0x1c8>
              break;
 800b586:	bf00      	nop
          }
          break;
 800b588:	e0ab      	b.n	800b6e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b02      	cmp	r3, #2
 800b594:	d002      	beq.n	800b59c <USBD_StdEPReq+0x1dc>
 800b596:	2b03      	cmp	r3, #3
 800b598:	d032      	beq.n	800b600 <USBD_StdEPReq+0x240>
 800b59a:	e097      	b.n	800b6cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d007      	beq.n	800b5b2 <USBD_StdEPReq+0x1f2>
 800b5a2:	7bbb      	ldrb	r3, [r7, #14]
 800b5a4:	2b80      	cmp	r3, #128	; 0x80
 800b5a6:	d004      	beq.n	800b5b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fc17 	bl	800bdde <USBD_CtlError>
                break;
 800b5b0:	e091      	b.n	800b6d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	da0b      	bge.n	800b5d2 <USBD_StdEPReq+0x212>
 800b5ba:	7bbb      	ldrb	r3, [r7, #14]
 800b5bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	4413      	add	r3, r2
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	3310      	adds	r3, #16
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	3304      	adds	r3, #4
 800b5d0:	e00b      	b.n	800b5ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5d2:	7bbb      	ldrb	r3, [r7, #14]
 800b5d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5d8:	4613      	mov	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	4413      	add	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	2202      	movs	r2, #2
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 fc61 	bl	800bec0 <USBD_CtlSendData>
              break;
 800b5fe:	e06a      	b.n	800b6d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b604:	2b00      	cmp	r3, #0
 800b606:	da11      	bge.n	800b62c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b608:	7bbb      	ldrb	r3, [r7, #14]
 800b60a:	f003 020f 	and.w	r2, r3, #15
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	4613      	mov	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	440b      	add	r3, r1
 800b61a:	3324      	adds	r3, #36	; 0x24
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d117      	bne.n	800b652 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b622:	6839      	ldr	r1, [r7, #0]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 fbda 	bl	800bdde <USBD_CtlError>
                  break;
 800b62a:	e054      	b.n	800b6d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b62c:	7bbb      	ldrb	r3, [r7, #14]
 800b62e:	f003 020f 	and.w	r2, r3, #15
 800b632:	6879      	ldr	r1, [r7, #4]
 800b634:	4613      	mov	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	440b      	add	r3, r1
 800b63e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b642:	881b      	ldrh	r3, [r3, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d104      	bne.n	800b652 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fbc7 	bl	800bdde <USBD_CtlError>
                  break;
 800b650:	e041      	b.n	800b6d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b652:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b656:	2b00      	cmp	r3, #0
 800b658:	da0b      	bge.n	800b672 <USBD_StdEPReq+0x2b2>
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
 800b65c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b660:	4613      	mov	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	3310      	adds	r3, #16
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	4413      	add	r3, r2
 800b66e:	3304      	adds	r3, #4
 800b670:	e00b      	b.n	800b68a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b672:	7bbb      	ldrb	r3, [r7, #14]
 800b674:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b678:	4613      	mov	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	4413      	add	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	4413      	add	r3, r2
 800b688:	3304      	adds	r3, #4
 800b68a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b68c:	7bbb      	ldrb	r3, [r7, #14]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d002      	beq.n	800b698 <USBD_StdEPReq+0x2d8>
 800b692:	7bbb      	ldrb	r3, [r7, #14]
 800b694:	2b80      	cmp	r3, #128	; 0x80
 800b696:	d103      	bne.n	800b6a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	e00e      	b.n	800b6be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b6a0:	7bbb      	ldrb	r3, [r7, #14]
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f7f5 ff45 	bl	8001534 <USBD_LL_IsStallEP>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d003      	beq.n	800b6b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	e002      	b.n	800b6be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	2202      	movs	r2, #2
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fbfb 	bl	800bec0 <USBD_CtlSendData>
              break;
 800b6ca:	e004      	b.n	800b6d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fb85 	bl	800bdde <USBD_CtlError>
              break;
 800b6d4:	bf00      	nop
          }
          break;
 800b6d6:	e004      	b.n	800b6e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fb7f 	bl	800bdde <USBD_CtlError>
          break;
 800b6e0:	bf00      	nop
      }
      break;
 800b6e2:	e005      	b.n	800b6f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fb79 	bl	800bdde <USBD_CtlError>
      break;
 800b6ec:	e000      	b.n	800b6f0 <USBD_StdEPReq+0x330>
      break;
 800b6ee:	bf00      	nop
  }

  return ret;
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
	...

0800b6fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b706:	2300      	movs	r3, #0
 800b708:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b70e:	2300      	movs	r3, #0
 800b710:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	885b      	ldrh	r3, [r3, #2]
 800b716:	0a1b      	lsrs	r3, r3, #8
 800b718:	b29b      	uxth	r3, r3
 800b71a:	3b01      	subs	r3, #1
 800b71c:	2b0e      	cmp	r3, #14
 800b71e:	f200 8152 	bhi.w	800b9c6 <USBD_GetDescriptor+0x2ca>
 800b722:	a201      	add	r2, pc, #4	; (adr r2, 800b728 <USBD_GetDescriptor+0x2c>)
 800b724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b728:	0800b799 	.word	0x0800b799
 800b72c:	0800b7b1 	.word	0x0800b7b1
 800b730:	0800b7f1 	.word	0x0800b7f1
 800b734:	0800b9c7 	.word	0x0800b9c7
 800b738:	0800b9c7 	.word	0x0800b9c7
 800b73c:	0800b967 	.word	0x0800b967
 800b740:	0800b993 	.word	0x0800b993
 800b744:	0800b9c7 	.word	0x0800b9c7
 800b748:	0800b9c7 	.word	0x0800b9c7
 800b74c:	0800b9c7 	.word	0x0800b9c7
 800b750:	0800b9c7 	.word	0x0800b9c7
 800b754:	0800b9c7 	.word	0x0800b9c7
 800b758:	0800b9c7 	.word	0x0800b9c7
 800b75c:	0800b9c7 	.word	0x0800b9c7
 800b760:	0800b765 	.word	0x0800b765
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b76a:	69db      	ldr	r3, [r3, #28]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00b      	beq.n	800b788 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b776:	69db      	ldr	r3, [r3, #28]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	7c12      	ldrb	r2, [r2, #16]
 800b77c:	f107 0108 	add.w	r1, r7, #8
 800b780:	4610      	mov	r0, r2
 800b782:	4798      	blx	r3
 800b784:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b786:	e126      	b.n	800b9d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b788:	6839      	ldr	r1, [r7, #0]
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 fb27 	bl	800bdde <USBD_CtlError>
        err++;
 800b790:	7afb      	ldrb	r3, [r7, #11]
 800b792:	3301      	adds	r3, #1
 800b794:	72fb      	strb	r3, [r7, #11]
      break;
 800b796:	e11e      	b.n	800b9d6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	7c12      	ldrb	r2, [r2, #16]
 800b7a4:	f107 0108 	add.w	r1, r7, #8
 800b7a8:	4610      	mov	r0, r2
 800b7aa:	4798      	blx	r3
 800b7ac:	60f8      	str	r0, [r7, #12]
      break;
 800b7ae:	e112      	b.n	800b9d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	7c1b      	ldrb	r3, [r3, #16]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10d      	bne.n	800b7d4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c0:	f107 0208 	add.w	r2, r7, #8
 800b7c4:	4610      	mov	r0, r2
 800b7c6:	4798      	blx	r3
 800b7c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	2202      	movs	r2, #2
 800b7d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b7d2:	e100      	b.n	800b9d6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7dc:	f107 0208 	add.w	r2, r7, #8
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	4798      	blx	r3
 800b7e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	701a      	strb	r2, [r3, #0]
      break;
 800b7ee:	e0f2      	b.n	800b9d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	885b      	ldrh	r3, [r3, #2]
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	2b05      	cmp	r3, #5
 800b7f8:	f200 80ac 	bhi.w	800b954 <USBD_GetDescriptor+0x258>
 800b7fc:	a201      	add	r2, pc, #4	; (adr r2, 800b804 <USBD_GetDescriptor+0x108>)
 800b7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b802:	bf00      	nop
 800b804:	0800b81d 	.word	0x0800b81d
 800b808:	0800b851 	.word	0x0800b851
 800b80c:	0800b885 	.word	0x0800b885
 800b810:	0800b8b9 	.word	0x0800b8b9
 800b814:	0800b8ed 	.word	0x0800b8ed
 800b818:	0800b921 	.word	0x0800b921
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00b      	beq.n	800b840 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	7c12      	ldrb	r2, [r2, #16]
 800b834:	f107 0108 	add.w	r1, r7, #8
 800b838:	4610      	mov	r0, r2
 800b83a:	4798      	blx	r3
 800b83c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b83e:	e091      	b.n	800b964 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 facb 	bl	800bdde <USBD_CtlError>
            err++;
 800b848:	7afb      	ldrb	r3, [r7, #11]
 800b84a:	3301      	adds	r3, #1
 800b84c:	72fb      	strb	r3, [r7, #11]
          break;
 800b84e:	e089      	b.n	800b964 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00b      	beq.n	800b874 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	7c12      	ldrb	r2, [r2, #16]
 800b868:	f107 0108 	add.w	r1, r7, #8
 800b86c:	4610      	mov	r0, r2
 800b86e:	4798      	blx	r3
 800b870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b872:	e077      	b.n	800b964 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b874:	6839      	ldr	r1, [r7, #0]
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 fab1 	bl	800bdde <USBD_CtlError>
            err++;
 800b87c:	7afb      	ldrb	r3, [r7, #11]
 800b87e:	3301      	adds	r3, #1
 800b880:	72fb      	strb	r3, [r7, #11]
          break;
 800b882:	e06f      	b.n	800b964 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00b      	beq.n	800b8a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	7c12      	ldrb	r2, [r2, #16]
 800b89c:	f107 0108 	add.w	r1, r7, #8
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	4798      	blx	r3
 800b8a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8a6:	e05d      	b.n	800b964 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fa97 	bl	800bdde <USBD_CtlError>
            err++;
 800b8b0:	7afb      	ldrb	r3, [r7, #11]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8b6:	e055      	b.n	800b964 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d00b      	beq.n	800b8dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	7c12      	ldrb	r2, [r2, #16]
 800b8d0:	f107 0108 	add.w	r1, r7, #8
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	4798      	blx	r3
 800b8d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8da:	e043      	b.n	800b964 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8dc:	6839      	ldr	r1, [r7, #0]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 fa7d 	bl	800bdde <USBD_CtlError>
            err++;
 800b8e4:	7afb      	ldrb	r3, [r7, #11]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b8ea:	e03b      	b.n	800b964 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8f2:	695b      	ldr	r3, [r3, #20]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00b      	beq.n	800b910 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8fe:	695b      	ldr	r3, [r3, #20]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	7c12      	ldrb	r2, [r2, #16]
 800b904:	f107 0108 	add.w	r1, r7, #8
 800b908:	4610      	mov	r0, r2
 800b90a:	4798      	blx	r3
 800b90c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b90e:	e029      	b.n	800b964 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fa63 	bl	800bdde <USBD_CtlError>
            err++;
 800b918:	7afb      	ldrb	r3, [r7, #11]
 800b91a:	3301      	adds	r3, #1
 800b91c:	72fb      	strb	r3, [r7, #11]
          break;
 800b91e:	e021      	b.n	800b964 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00b      	beq.n	800b944 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	7c12      	ldrb	r2, [r2, #16]
 800b938:	f107 0108 	add.w	r1, r7, #8
 800b93c:	4610      	mov	r0, r2
 800b93e:	4798      	blx	r3
 800b940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b942:	e00f      	b.n	800b964 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b944:	6839      	ldr	r1, [r7, #0]
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fa49 	bl	800bdde <USBD_CtlError>
            err++;
 800b94c:	7afb      	ldrb	r3, [r7, #11]
 800b94e:	3301      	adds	r3, #1
 800b950:	72fb      	strb	r3, [r7, #11]
          break;
 800b952:	e007      	b.n	800b964 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b954:	6839      	ldr	r1, [r7, #0]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fa41 	bl	800bdde <USBD_CtlError>
          err++;
 800b95c:	7afb      	ldrb	r3, [r7, #11]
 800b95e:	3301      	adds	r3, #1
 800b960:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b962:	bf00      	nop
      }
      break;
 800b964:	e037      	b.n	800b9d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	7c1b      	ldrb	r3, [r3, #16]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d109      	bne.n	800b982 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b976:	f107 0208 	add.w	r2, r7, #8
 800b97a:	4610      	mov	r0, r2
 800b97c:	4798      	blx	r3
 800b97e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b980:	e029      	b.n	800b9d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b982:	6839      	ldr	r1, [r7, #0]
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 fa2a 	bl	800bdde <USBD_CtlError>
        err++;
 800b98a:	7afb      	ldrb	r3, [r7, #11]
 800b98c:	3301      	adds	r3, #1
 800b98e:	72fb      	strb	r3, [r7, #11]
      break;
 800b990:	e021      	b.n	800b9d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	7c1b      	ldrb	r3, [r3, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10d      	bne.n	800b9b6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9a2:	f107 0208 	add.w	r2, r7, #8
 800b9a6:	4610      	mov	r0, r2
 800b9a8:	4798      	blx	r3
 800b9aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	2207      	movs	r2, #7
 800b9b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9b4:	e00f      	b.n	800b9d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b9b6:	6839      	ldr	r1, [r7, #0]
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 fa10 	bl	800bdde <USBD_CtlError>
        err++;
 800b9be:	7afb      	ldrb	r3, [r7, #11]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	72fb      	strb	r3, [r7, #11]
      break;
 800b9c4:	e007      	b.n	800b9d6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b9c6:	6839      	ldr	r1, [r7, #0]
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fa08 	bl	800bdde <USBD_CtlError>
      err++;
 800b9ce:	7afb      	ldrb	r3, [r7, #11]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	72fb      	strb	r3, [r7, #11]
      break;
 800b9d4:	bf00      	nop
  }

  if (err != 0U)
 800b9d6:	7afb      	ldrb	r3, [r7, #11]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d11e      	bne.n	800ba1a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	88db      	ldrh	r3, [r3, #6]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d016      	beq.n	800ba12 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b9e4:	893b      	ldrh	r3, [r7, #8]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00e      	beq.n	800ba08 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	88da      	ldrh	r2, [r3, #6]
 800b9ee:	893b      	ldrh	r3, [r7, #8]
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	bf28      	it	cs
 800b9f4:	4613      	movcs	r3, r2
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b9fa:	893b      	ldrh	r3, [r7, #8]
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	68f9      	ldr	r1, [r7, #12]
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 fa5d 	bl	800bec0 <USBD_CtlSendData>
 800ba06:	e009      	b.n	800ba1c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ba08:	6839      	ldr	r1, [r7, #0]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f9e7 	bl	800bdde <USBD_CtlError>
 800ba10:	e004      	b.n	800ba1c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 faae 	bl	800bf74 <USBD_CtlSendStatus>
 800ba18:	e000      	b.n	800ba1c <USBD_GetDescriptor+0x320>
    return;
 800ba1a:	bf00      	nop
  }
}
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop

0800ba24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	889b      	ldrh	r3, [r3, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d131      	bne.n	800ba9a <USBD_SetAddress+0x76>
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	88db      	ldrh	r3, [r3, #6]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d12d      	bne.n	800ba9a <USBD_SetAddress+0x76>
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	885b      	ldrh	r3, [r3, #2]
 800ba42:	2b7f      	cmp	r3, #127	; 0x7f
 800ba44:	d829      	bhi.n	800ba9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	885b      	ldrh	r3, [r3, #2]
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d104      	bne.n	800ba68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 f9bc 	bl	800bdde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba66:	e01d      	b.n	800baa4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	7bfa      	ldrb	r2, [r7, #15]
 800ba6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
 800ba72:	4619      	mov	r1, r3
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f7f5 fd89 	bl	800158c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fa7a 	bl	800bf74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d004      	beq.n	800ba90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2202      	movs	r2, #2
 800ba8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba8e:	e009      	b.n	800baa4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba98:	e004      	b.n	800baa4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba9a:	6839      	ldr	r1, [r7, #0]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f99e 	bl	800bdde <USBD_CtlError>
  }
}
 800baa2:	bf00      	nop
 800baa4:	bf00      	nop
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bab6:	2300      	movs	r3, #0
 800bab8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	885b      	ldrh	r3, [r3, #2]
 800babe:	b2da      	uxtb	r2, r3
 800bac0:	4b4e      	ldr	r3, [pc, #312]	; (800bbfc <USBD_SetConfig+0x150>)
 800bac2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bac4:	4b4d      	ldr	r3, [pc, #308]	; (800bbfc <USBD_SetConfig+0x150>)
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d905      	bls.n	800bad8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f985 	bl	800bdde <USBD_CtlError>
    return USBD_FAIL;
 800bad4:	2303      	movs	r3, #3
 800bad6:	e08c      	b.n	800bbf2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	d002      	beq.n	800baea <USBD_SetConfig+0x3e>
 800bae4:	2b03      	cmp	r3, #3
 800bae6:	d029      	beq.n	800bb3c <USBD_SetConfig+0x90>
 800bae8:	e075      	b.n	800bbd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800baea:	4b44      	ldr	r3, [pc, #272]	; (800bbfc <USBD_SetConfig+0x150>)
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d020      	beq.n	800bb34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800baf2:	4b42      	ldr	r3, [pc, #264]	; (800bbfc <USBD_SetConfig+0x150>)
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bafc:	4b3f      	ldr	r3, [pc, #252]	; (800bbfc <USBD_SetConfig+0x150>)
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f7fe ffb7 	bl	800aa76 <USBD_SetClassConfig>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d008      	beq.n	800bb24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f962 	bl	800bdde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2202      	movs	r2, #2
 800bb1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb22:	e065      	b.n	800bbf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 fa25 	bl	800bf74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2203      	movs	r2, #3
 800bb2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb32:	e05d      	b.n	800bbf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 fa1d 	bl	800bf74 <USBD_CtlSendStatus>
      break;
 800bb3a:	e059      	b.n	800bbf0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bb3c:	4b2f      	ldr	r3, [pc, #188]	; (800bbfc <USBD_SetConfig+0x150>)
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d112      	bne.n	800bb6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2202      	movs	r2, #2
 800bb48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bb4c:	4b2b      	ldr	r3, [pc, #172]	; (800bbfc <USBD_SetConfig+0x150>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	461a      	mov	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb56:	4b29      	ldr	r3, [pc, #164]	; (800bbfc <USBD_SetConfig+0x150>)
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7fe ffa6 	bl	800aaae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fa06 	bl	800bf74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb68:	e042      	b.n	800bbf0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bb6a:	4b24      	ldr	r3, [pc, #144]	; (800bbfc <USBD_SetConfig+0x150>)
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d02a      	beq.n	800bbce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7fe ff94 	bl	800aaae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb86:	4b1d      	ldr	r3, [pc, #116]	; (800bbfc <USBD_SetConfig+0x150>)
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb90:	4b1a      	ldr	r3, [pc, #104]	; (800bbfc <USBD_SetConfig+0x150>)
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7fe ff6d 	bl	800aa76 <USBD_SetClassConfig>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00f      	beq.n	800bbc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f918 	bl	800bdde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7fe ff79 	bl	800aaae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bbc4:	e014      	b.n	800bbf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f9d4 	bl	800bf74 <USBD_CtlSendStatus>
      break;
 800bbcc:	e010      	b.n	800bbf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 f9d0 	bl	800bf74 <USBD_CtlSendStatus>
      break;
 800bbd4:	e00c      	b.n	800bbf0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 f900 	bl	800bdde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bbde:	4b07      	ldr	r3, [pc, #28]	; (800bbfc <USBD_SetConfig+0x150>)
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7fe ff62 	bl	800aaae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bbea:	2303      	movs	r3, #3
 800bbec:	73fb      	strb	r3, [r7, #15]
      break;
 800bbee:	bf00      	nop
  }

  return ret;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	20003848 	.word	0x20003848

0800bc00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	88db      	ldrh	r3, [r3, #6]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d004      	beq.n	800bc1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 f8e2 	bl	800bdde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc1a:	e023      	b.n	800bc64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	dc02      	bgt.n	800bc2e <USBD_GetConfig+0x2e>
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	dc03      	bgt.n	800bc34 <USBD_GetConfig+0x34>
 800bc2c:	e015      	b.n	800bc5a <USBD_GetConfig+0x5a>
 800bc2e:	2b03      	cmp	r3, #3
 800bc30:	d00b      	beq.n	800bc4a <USBD_GetConfig+0x4a>
 800bc32:	e012      	b.n	800bc5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	3308      	adds	r3, #8
 800bc3e:	2201      	movs	r2, #1
 800bc40:	4619      	mov	r1, r3
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f93c 	bl	800bec0 <USBD_CtlSendData>
        break;
 800bc48:	e00c      	b.n	800bc64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	2201      	movs	r2, #1
 800bc50:	4619      	mov	r1, r3
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f934 	bl	800bec0 <USBD_CtlSendData>
        break;
 800bc58:	e004      	b.n	800bc64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 f8be 	bl	800bdde <USBD_CtlError>
        break;
 800bc62:	bf00      	nop
}
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	d81e      	bhi.n	800bcc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	88db      	ldrh	r3, [r3, #6]
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d004      	beq.n	800bc96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bc8c:	6839      	ldr	r1, [r7, #0]
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 f8a5 	bl	800bdde <USBD_CtlError>
        break;
 800bc94:	e01a      	b.n	800bccc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d005      	beq.n	800bcb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	f043 0202 	orr.w	r2, r3, #2
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	330c      	adds	r3, #12
 800bcb6:	2202      	movs	r2, #2
 800bcb8:	4619      	mov	r1, r3
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 f900 	bl	800bec0 <USBD_CtlSendData>
      break;
 800bcc0:	e004      	b.n	800bccc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bcc2:	6839      	ldr	r1, [r7, #0]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 f88a 	bl	800bdde <USBD_CtlError>
      break;
 800bcca:	bf00      	nop
  }
}
 800bccc:	bf00      	nop
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	885b      	ldrh	r3, [r3, #2]
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d107      	bne.n	800bcf6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2201      	movs	r2, #1
 800bcea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f940 	bl	800bf74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bcf4:	e013      	b.n	800bd1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	885b      	ldrh	r3, [r3, #2]
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	d10b      	bne.n	800bd16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	889b      	ldrh	r3, [r3, #4]
 800bd02:	0a1b      	lsrs	r3, r3, #8
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 f930 	bl	800bf74 <USBD_CtlSendStatus>
}
 800bd14:	e003      	b.n	800bd1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bd16:	6839      	ldr	r1, [r7, #0]
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 f860 	bl	800bdde <USBD_CtlError>
}
 800bd1e:	bf00      	nop
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b082      	sub	sp, #8
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
 800bd2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d80b      	bhi.n	800bd56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	885b      	ldrh	r3, [r3, #2]
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d10c      	bne.n	800bd60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f910 	bl	800bf74 <USBD_CtlSendStatus>
      }
      break;
 800bd54:	e004      	b.n	800bd60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bd56:	6839      	ldr	r1, [r7, #0]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 f840 	bl	800bdde <USBD_CtlError>
      break;
 800bd5e:	e000      	b.n	800bd62 <USBD_ClrFeature+0x3c>
      break;
 800bd60:	bf00      	nop
  }
}
 800bd62:	bf00      	nop
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b084      	sub	sp, #16
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	781a      	ldrb	r2, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	3301      	adds	r3, #1
 800bd84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	781a      	ldrb	r2, [r3, #0]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	3301      	adds	r3, #1
 800bd92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f7ff fa17 	bl	800b1c8 <SWAPBYTE>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3301      	adds	r3, #1
 800bda6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f7ff fa0a 	bl	800b1c8 <SWAPBYTE>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f7ff f9fd 	bl	800b1c8 <SWAPBYTE>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	80da      	strh	r2, [r3, #6]
}
 800bdd6:	bf00      	nop
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b082      	sub	sp, #8
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bde8:	2180      	movs	r1, #128	; 0x80
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7f5 fb36 	bl	800145c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f7f5 fb32 	bl	800145c <USBD_LL_StallEP>
}
 800bdf8:	bf00      	nop
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be0c:	2300      	movs	r3, #0
 800be0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d036      	beq.n	800be84 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800be1a:	6938      	ldr	r0, [r7, #16]
 800be1c:	f000 f836 	bl	800be8c <USBD_GetLen>
 800be20:	4603      	mov	r3, r0
 800be22:	3301      	adds	r3, #1
 800be24:	b29b      	uxth	r3, r3
 800be26:	005b      	lsls	r3, r3, #1
 800be28:	b29a      	uxth	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800be2e:	7dfb      	ldrb	r3, [r7, #23]
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	4413      	add	r3, r2
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	7812      	ldrb	r2, [r2, #0]
 800be38:	701a      	strb	r2, [r3, #0]
  idx++;
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	3301      	adds	r3, #1
 800be3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	68ba      	ldr	r2, [r7, #8]
 800be44:	4413      	add	r3, r2
 800be46:	2203      	movs	r2, #3
 800be48:	701a      	strb	r2, [r3, #0]
  idx++;
 800be4a:	7dfb      	ldrb	r3, [r7, #23]
 800be4c:	3301      	adds	r3, #1
 800be4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800be50:	e013      	b.n	800be7a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800be52:	7dfb      	ldrb	r3, [r7, #23]
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	4413      	add	r3, r2
 800be58:	693a      	ldr	r2, [r7, #16]
 800be5a:	7812      	ldrb	r2, [r2, #0]
 800be5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	3301      	adds	r3, #1
 800be62:	613b      	str	r3, [r7, #16]
    idx++;
 800be64:	7dfb      	ldrb	r3, [r7, #23]
 800be66:	3301      	adds	r3, #1
 800be68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	4413      	add	r3, r2
 800be70:	2200      	movs	r2, #0
 800be72:	701a      	strb	r2, [r3, #0]
    idx++;
 800be74:	7dfb      	ldrb	r3, [r7, #23]
 800be76:	3301      	adds	r3, #1
 800be78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1e7      	bne.n	800be52 <USBD_GetString+0x52>
 800be82:	e000      	b.n	800be86 <USBD_GetString+0x86>
    return;
 800be84:	bf00      	nop
  }
}
 800be86:	3718      	adds	r7, #24
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be94:	2300      	movs	r3, #0
 800be96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800be9c:	e005      	b.n	800beaa <USBD_GetLen+0x1e>
  {
    len++;
 800be9e:	7bfb      	ldrb	r3, [r7, #15]
 800bea0:	3301      	adds	r3, #1
 800bea2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	3301      	adds	r3, #1
 800bea8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1f5      	bne.n	800be9e <USBD_GetLen+0x12>
  }

  return len;
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3714      	adds	r7, #20
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2202      	movs	r2, #2
 800bed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	68ba      	ldr	r2, [r7, #8]
 800bee4:	2100      	movs	r1, #0
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f7f5 fb86 	bl	80015f8 <USBD_LL_Transmit>

  return USBD_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b084      	sub	sp, #16
 800befa:	af00      	add	r7, sp, #0
 800befc:	60f8      	str	r0, [r7, #12]
 800befe:	60b9      	str	r1, [r7, #8]
 800bf00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	2100      	movs	r1, #0
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f7f5 fb75 	bl	80015f8 <USBD_LL_Transmit>

  return USBD_OK;
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2203      	movs	r2, #3
 800bf28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	68ba      	ldr	r2, [r7, #8]
 800bf40:	2100      	movs	r1, #0
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f7f5 fb90 	bl	8001668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b084      	sub	sp, #16
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	60f8      	str	r0, [r7, #12]
 800bf5a:	60b9      	str	r1, [r7, #8]
 800bf5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	2100      	movs	r1, #0
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f7f5 fb7f 	bl	8001668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2204      	movs	r2, #4
 800bf80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf84:	2300      	movs	r3, #0
 800bf86:	2200      	movs	r2, #0
 800bf88:	2100      	movs	r1, #0
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7f5 fb34 	bl	80015f8 <USBD_LL_Transmit>

  return USBD_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3708      	adds	r7, #8
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b082      	sub	sp, #8
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2205      	movs	r2, #5
 800bfa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfaa:	2300      	movs	r3, #0
 800bfac:	2200      	movs	r2, #0
 800bfae:	2100      	movs	r1, #0
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f7f5 fb59 	bl	8001668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3708      	adds	r7, #8
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <__libc_init_array>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	4d0d      	ldr	r5, [pc, #52]	; (800bff8 <__libc_init_array+0x38>)
 800bfc4:	4c0d      	ldr	r4, [pc, #52]	; (800bffc <__libc_init_array+0x3c>)
 800bfc6:	1b64      	subs	r4, r4, r5
 800bfc8:	10a4      	asrs	r4, r4, #2
 800bfca:	2600      	movs	r6, #0
 800bfcc:	42a6      	cmp	r6, r4
 800bfce:	d109      	bne.n	800bfe4 <__libc_init_array+0x24>
 800bfd0:	4d0b      	ldr	r5, [pc, #44]	; (800c000 <__libc_init_array+0x40>)
 800bfd2:	4c0c      	ldr	r4, [pc, #48]	; (800c004 <__libc_init_array+0x44>)
 800bfd4:	f000 f8f0 	bl	800c1b8 <_init>
 800bfd8:	1b64      	subs	r4, r4, r5
 800bfda:	10a4      	asrs	r4, r4, #2
 800bfdc:	2600      	movs	r6, #0
 800bfde:	42a6      	cmp	r6, r4
 800bfe0:	d105      	bne.n	800bfee <__libc_init_array+0x2e>
 800bfe2:	bd70      	pop	{r4, r5, r6, pc}
 800bfe4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfe8:	4798      	blx	r3
 800bfea:	3601      	adds	r6, #1
 800bfec:	e7ee      	b.n	800bfcc <__libc_init_array+0xc>
 800bfee:	f855 3b04 	ldr.w	r3, [r5], #4
 800bff2:	4798      	blx	r3
 800bff4:	3601      	adds	r6, #1
 800bff6:	e7f2      	b.n	800bfde <__libc_init_array+0x1e>
 800bff8:	0800c310 	.word	0x0800c310
 800bffc:	0800c310 	.word	0x0800c310
 800c000:	0800c310 	.word	0x0800c310
 800c004:	0800c314 	.word	0x0800c314

0800c008 <memcpy>:
 800c008:	440a      	add	r2, r1
 800c00a:	4291      	cmp	r1, r2
 800c00c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c010:	d100      	bne.n	800c014 <memcpy+0xc>
 800c012:	4770      	bx	lr
 800c014:	b510      	push	{r4, lr}
 800c016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c01a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c01e:	4291      	cmp	r1, r2
 800c020:	d1f9      	bne.n	800c016 <memcpy+0xe>
 800c022:	bd10      	pop	{r4, pc}

0800c024 <memset>:
 800c024:	4402      	add	r2, r0
 800c026:	4603      	mov	r3, r0
 800c028:	4293      	cmp	r3, r2
 800c02a:	d100      	bne.n	800c02e <memset+0xa>
 800c02c:	4770      	bx	lr
 800c02e:	f803 1b01 	strb.w	r1, [r3], #1
 800c032:	e7f9      	b.n	800c028 <memset+0x4>

0800c034 <_free_r>:
 800c034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c036:	2900      	cmp	r1, #0
 800c038:	d044      	beq.n	800c0c4 <_free_r+0x90>
 800c03a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c03e:	9001      	str	r0, [sp, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	f1a1 0404 	sub.w	r4, r1, #4
 800c046:	bfb8      	it	lt
 800c048:	18e4      	addlt	r4, r4, r3
 800c04a:	f000 f8a9 	bl	800c1a0 <__malloc_lock>
 800c04e:	4a1e      	ldr	r2, [pc, #120]	; (800c0c8 <_free_r+0x94>)
 800c050:	9801      	ldr	r0, [sp, #4]
 800c052:	6813      	ldr	r3, [r2, #0]
 800c054:	b933      	cbnz	r3, 800c064 <_free_r+0x30>
 800c056:	6063      	str	r3, [r4, #4]
 800c058:	6014      	str	r4, [r2, #0]
 800c05a:	b003      	add	sp, #12
 800c05c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c060:	f000 b8a4 	b.w	800c1ac <__malloc_unlock>
 800c064:	42a3      	cmp	r3, r4
 800c066:	d908      	bls.n	800c07a <_free_r+0x46>
 800c068:	6825      	ldr	r5, [r4, #0]
 800c06a:	1961      	adds	r1, r4, r5
 800c06c:	428b      	cmp	r3, r1
 800c06e:	bf01      	itttt	eq
 800c070:	6819      	ldreq	r1, [r3, #0]
 800c072:	685b      	ldreq	r3, [r3, #4]
 800c074:	1949      	addeq	r1, r1, r5
 800c076:	6021      	streq	r1, [r4, #0]
 800c078:	e7ed      	b.n	800c056 <_free_r+0x22>
 800c07a:	461a      	mov	r2, r3
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	b10b      	cbz	r3, 800c084 <_free_r+0x50>
 800c080:	42a3      	cmp	r3, r4
 800c082:	d9fa      	bls.n	800c07a <_free_r+0x46>
 800c084:	6811      	ldr	r1, [r2, #0]
 800c086:	1855      	adds	r5, r2, r1
 800c088:	42a5      	cmp	r5, r4
 800c08a:	d10b      	bne.n	800c0a4 <_free_r+0x70>
 800c08c:	6824      	ldr	r4, [r4, #0]
 800c08e:	4421      	add	r1, r4
 800c090:	1854      	adds	r4, r2, r1
 800c092:	42a3      	cmp	r3, r4
 800c094:	6011      	str	r1, [r2, #0]
 800c096:	d1e0      	bne.n	800c05a <_free_r+0x26>
 800c098:	681c      	ldr	r4, [r3, #0]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	6053      	str	r3, [r2, #4]
 800c09e:	4421      	add	r1, r4
 800c0a0:	6011      	str	r1, [r2, #0]
 800c0a2:	e7da      	b.n	800c05a <_free_r+0x26>
 800c0a4:	d902      	bls.n	800c0ac <_free_r+0x78>
 800c0a6:	230c      	movs	r3, #12
 800c0a8:	6003      	str	r3, [r0, #0]
 800c0aa:	e7d6      	b.n	800c05a <_free_r+0x26>
 800c0ac:	6825      	ldr	r5, [r4, #0]
 800c0ae:	1961      	adds	r1, r4, r5
 800c0b0:	428b      	cmp	r3, r1
 800c0b2:	bf04      	itt	eq
 800c0b4:	6819      	ldreq	r1, [r3, #0]
 800c0b6:	685b      	ldreq	r3, [r3, #4]
 800c0b8:	6063      	str	r3, [r4, #4]
 800c0ba:	bf04      	itt	eq
 800c0bc:	1949      	addeq	r1, r1, r5
 800c0be:	6021      	streq	r1, [r4, #0]
 800c0c0:	6054      	str	r4, [r2, #4]
 800c0c2:	e7ca      	b.n	800c05a <_free_r+0x26>
 800c0c4:	b003      	add	sp, #12
 800c0c6:	bd30      	pop	{r4, r5, pc}
 800c0c8:	2000384c 	.word	0x2000384c

0800c0cc <cleanup_glue>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	460c      	mov	r4, r1
 800c0d0:	6809      	ldr	r1, [r1, #0]
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	b109      	cbz	r1, 800c0da <cleanup_glue+0xe>
 800c0d6:	f7ff fff9 	bl	800c0cc <cleanup_glue>
 800c0da:	4621      	mov	r1, r4
 800c0dc:	4628      	mov	r0, r5
 800c0de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0e2:	f7ff bfa7 	b.w	800c034 <_free_r>
	...

0800c0e8 <_reclaim_reent>:
 800c0e8:	4b2c      	ldr	r3, [pc, #176]	; (800c19c <_reclaim_reent+0xb4>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4283      	cmp	r3, r0
 800c0ee:	b570      	push	{r4, r5, r6, lr}
 800c0f0:	4604      	mov	r4, r0
 800c0f2:	d051      	beq.n	800c198 <_reclaim_reent+0xb0>
 800c0f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c0f6:	b143      	cbz	r3, 800c10a <_reclaim_reent+0x22>
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d14a      	bne.n	800c194 <_reclaim_reent+0xac>
 800c0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c100:	6819      	ldr	r1, [r3, #0]
 800c102:	b111      	cbz	r1, 800c10a <_reclaim_reent+0x22>
 800c104:	4620      	mov	r0, r4
 800c106:	f7ff ff95 	bl	800c034 <_free_r>
 800c10a:	6961      	ldr	r1, [r4, #20]
 800c10c:	b111      	cbz	r1, 800c114 <_reclaim_reent+0x2c>
 800c10e:	4620      	mov	r0, r4
 800c110:	f7ff ff90 	bl	800c034 <_free_r>
 800c114:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c116:	b111      	cbz	r1, 800c11e <_reclaim_reent+0x36>
 800c118:	4620      	mov	r0, r4
 800c11a:	f7ff ff8b 	bl	800c034 <_free_r>
 800c11e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c120:	b111      	cbz	r1, 800c128 <_reclaim_reent+0x40>
 800c122:	4620      	mov	r0, r4
 800c124:	f7ff ff86 	bl	800c034 <_free_r>
 800c128:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c12a:	b111      	cbz	r1, 800c132 <_reclaim_reent+0x4a>
 800c12c:	4620      	mov	r0, r4
 800c12e:	f7ff ff81 	bl	800c034 <_free_r>
 800c132:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c134:	b111      	cbz	r1, 800c13c <_reclaim_reent+0x54>
 800c136:	4620      	mov	r0, r4
 800c138:	f7ff ff7c 	bl	800c034 <_free_r>
 800c13c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c13e:	b111      	cbz	r1, 800c146 <_reclaim_reent+0x5e>
 800c140:	4620      	mov	r0, r4
 800c142:	f7ff ff77 	bl	800c034 <_free_r>
 800c146:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c148:	b111      	cbz	r1, 800c150 <_reclaim_reent+0x68>
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7ff ff72 	bl	800c034 <_free_r>
 800c150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c152:	b111      	cbz	r1, 800c15a <_reclaim_reent+0x72>
 800c154:	4620      	mov	r0, r4
 800c156:	f7ff ff6d 	bl	800c034 <_free_r>
 800c15a:	69a3      	ldr	r3, [r4, #24]
 800c15c:	b1e3      	cbz	r3, 800c198 <_reclaim_reent+0xb0>
 800c15e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c160:	4620      	mov	r0, r4
 800c162:	4798      	blx	r3
 800c164:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c166:	b1b9      	cbz	r1, 800c198 <_reclaim_reent+0xb0>
 800c168:	4620      	mov	r0, r4
 800c16a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c16e:	f7ff bfad 	b.w	800c0cc <cleanup_glue>
 800c172:	5949      	ldr	r1, [r1, r5]
 800c174:	b941      	cbnz	r1, 800c188 <_reclaim_reent+0xa0>
 800c176:	3504      	adds	r5, #4
 800c178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c17a:	2d80      	cmp	r5, #128	; 0x80
 800c17c:	68d9      	ldr	r1, [r3, #12]
 800c17e:	d1f8      	bne.n	800c172 <_reclaim_reent+0x8a>
 800c180:	4620      	mov	r0, r4
 800c182:	f7ff ff57 	bl	800c034 <_free_r>
 800c186:	e7ba      	b.n	800c0fe <_reclaim_reent+0x16>
 800c188:	680e      	ldr	r6, [r1, #0]
 800c18a:	4620      	mov	r0, r4
 800c18c:	f7ff ff52 	bl	800c034 <_free_r>
 800c190:	4631      	mov	r1, r6
 800c192:	e7ef      	b.n	800c174 <_reclaim_reent+0x8c>
 800c194:	2500      	movs	r5, #0
 800c196:	e7ef      	b.n	800c178 <_reclaim_reent+0x90>
 800c198:	bd70      	pop	{r4, r5, r6, pc}
 800c19a:	bf00      	nop
 800c19c:	20000110 	.word	0x20000110

0800c1a0 <__malloc_lock>:
 800c1a0:	4801      	ldr	r0, [pc, #4]	; (800c1a8 <__malloc_lock+0x8>)
 800c1a2:	f7f4 bcca 	b.w	8000b3a <__retarget_lock_acquire_recursive>
 800c1a6:	bf00      	nop
 800c1a8:	20000268 	.word	0x20000268

0800c1ac <__malloc_unlock>:
 800c1ac:	4801      	ldr	r0, [pc, #4]	; (800c1b4 <__malloc_unlock+0x8>)
 800c1ae:	f7f4 bcd8 	b.w	8000b62 <__retarget_lock_release_recursive>
 800c1b2:	bf00      	nop
 800c1b4:	20000268 	.word	0x20000268

0800c1b8 <_init>:
 800c1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ba:	bf00      	nop
 800c1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1be:	bc08      	pop	{r3}
 800c1c0:	469e      	mov	lr, r3
 800c1c2:	4770      	bx	lr

0800c1c4 <_fini>:
 800c1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c6:	bf00      	nop
 800c1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ca:	bc08      	pop	{r3}
 800c1cc:	469e      	mov	lr, r3
 800c1ce:	4770      	bx	lr
